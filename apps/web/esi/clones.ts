/**
 * Generated by orval v6.11.1 üç∫
 * Do not edit manually.
 * EVE Swagger Interface
 * An OpenAPI for EVE Online
 * OpenAPI spec version: 1.17
 */
import axios from 'axios'
import type {
  AxiosRequestConfig,
  AxiosResponse,
  AxiosError
} from 'axios'
import useSwr from 'swr'
import type {
  SWRConfiguration,
  Key
} from 'swr'
import type {
  GetCharactersCharacterIdClones200,
  BadRequest,
  Unauthorized,
  Forbidden,
  ErrorLimited,
  InternalServerError,
  ServiceUnavailable,
  GatewayTimeout,
  GetCharactersCharacterIdClonesParams,
  GetCharactersCharacterIdImplantsParams
} from './model'



  
  /**
 * A list of the character's clones

---
Alternate route: `/dev/characters/{character_id}/clones/`

Alternate route: `/v3/characters/{character_id}/clones/`

Alternate route: `/v4/characters/{character_id}/clones/`

---
This route is cached for up to 120 seconds
 * @summary Get clones
 */
export const getCharactersCharacterIdClones = (
    characterId: number,
    params?: GetCharactersCharacterIdClonesParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<GetCharactersCharacterIdClones200>> => {
    return axios.get(
      `/characters/${characterId}/clones/`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }


export const getGetCharactersCharacterIdClonesKey = (characterId: number,
    params?: GetCharactersCharacterIdClonesParams,) => [`/characters/${characterId}/clones/`, ...(params ? [params]: [])];

    
export type GetCharactersCharacterIdClonesQueryResult = NonNullable<Awaited<ReturnType<typeof getCharactersCharacterIdClones>>>
export type GetCharactersCharacterIdClonesQueryError = AxiosError<void | BadRequest | Unauthorized | Forbidden | ErrorLimited | InternalServerError | ServiceUnavailable | GatewayTimeout>

export const useGetCharactersCharacterIdClones = <TError = AxiosError<void | BadRequest | Unauthorized | Forbidden | ErrorLimited | InternalServerError | ServiceUnavailable | GatewayTimeout>>(
 characterId: number,
    params?: GetCharactersCharacterIdClonesParams, options?: { swr?:SWRConfiguration<Awaited<ReturnType<typeof getCharactersCharacterIdClones>>, TError> & { swrKey?: Key, enabled?: boolean }, axios?: AxiosRequestConfig }

  ) => {

  const {swr: swrOptions, axios: axiosOptions} = options ?? {}

  const isEnabled = swrOptions?.enabled !== false && !!(characterId)
    const swrKey = swrOptions?.swrKey ?? (() => isEnabled ? getGetCharactersCharacterIdClonesKey(characterId,params) : null);
  const swrFn = () => getCharactersCharacterIdClones(characterId,params, axiosOptions);

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * Return implants on the active clone of a character

---
Alternate route: `/dev/characters/{character_id}/implants/`

Alternate route: `/legacy/characters/{character_id}/implants/`

Alternate route: `/v1/characters/{character_id}/implants/`

Alternate route: `/v2/characters/{character_id}/implants/`

---
This route is cached for up to 120 seconds
 * @summary Get active implants
 */
export const getCharactersCharacterIdImplants = (
    characterId: number,
    params?: GetCharactersCharacterIdImplantsParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<number[]>> => {
    return axios.get(
      `/characters/${characterId}/implants/`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }


export const getGetCharactersCharacterIdImplantsKey = (characterId: number,
    params?: GetCharactersCharacterIdImplantsParams,) => [`/characters/${characterId}/implants/`, ...(params ? [params]: [])];

    
export type GetCharactersCharacterIdImplantsQueryResult = NonNullable<Awaited<ReturnType<typeof getCharactersCharacterIdImplants>>>
export type GetCharactersCharacterIdImplantsQueryError = AxiosError<void | BadRequest | Unauthorized | Forbidden | ErrorLimited | InternalServerError | ServiceUnavailable | GatewayTimeout>

export const useGetCharactersCharacterIdImplants = <TError = AxiosError<void | BadRequest | Unauthorized | Forbidden | ErrorLimited | InternalServerError | ServiceUnavailable | GatewayTimeout>>(
 characterId: number,
    params?: GetCharactersCharacterIdImplantsParams, options?: { swr?:SWRConfiguration<Awaited<ReturnType<typeof getCharactersCharacterIdImplants>>, TError> & { swrKey?: Key, enabled?: boolean }, axios?: AxiosRequestConfig }

  ) => {

  const {swr: swrOptions, axios: axiosOptions} = options ?? {}

  const isEnabled = swrOptions?.enabled !== false && !!(characterId)
    const swrKey = swrOptions?.swrKey ?? (() => isEnabled ? getGetCharactersCharacterIdImplantsKey(characterId,params) : null);
  const swrFn = () => getCharactersCharacterIdImplants(characterId,params, axiosOptions);

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

