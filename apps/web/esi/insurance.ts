/**
 * Generated by orval v6.11.1 üç∫
 * Do not edit manually.
 * EVE Swagger Interface
 * An OpenAPI for EVE Online
 * OpenAPI spec version: 1.17
 */
import axios from 'axios'
import type {
  AxiosRequestConfig,
  AxiosResponse,
  AxiosError
} from 'axios'
import useSwr from 'swr'
import type {
  SWRConfiguration,
  Key
} from 'swr'
import type {
  GetInsurancePrices200Item,
  BadRequest,
  ErrorLimited,
  InternalServerError,
  ServiceUnavailable,
  GatewayTimeout,
  GetInsurancePricesParams
} from './model'



  
  /**
 * Return available insurance levels for all ship types

---
Alternate route: `/dev/insurance/prices/`

Alternate route: `/legacy/insurance/prices/`

Alternate route: `/v1/insurance/prices/`

---
This route is cached for up to 3600 seconds
 * @summary List insurance levels
 */
export const getInsurancePrices = (
    params?: GetInsurancePricesParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<GetInsurancePrices200Item[]>> => {
    return axios.get(
      `/insurance/prices/`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }


export const getGetInsurancePricesKey = (params?: GetInsurancePricesParams,) => [`/insurance/prices/`, ...(params ? [params]: [])];

    
export type GetInsurancePricesQueryResult = NonNullable<Awaited<ReturnType<typeof getInsurancePrices>>>
export type GetInsurancePricesQueryError = AxiosError<void | BadRequest | ErrorLimited | InternalServerError | ServiceUnavailable | GatewayTimeout>

export const useGetInsurancePrices = <TError = AxiosError<void | BadRequest | ErrorLimited | InternalServerError | ServiceUnavailable | GatewayTimeout>>(
 params?: GetInsurancePricesParams, options?: { swr?:SWRConfiguration<Awaited<ReturnType<typeof getInsurancePrices>>, TError> & { swrKey?: Key, enabled?: boolean }, axios?: AxiosRequestConfig }

  ) => {

  const {swr: swrOptions, axios: axiosOptions} = options ?? {}

  const isEnabled = swrOptions?.enabled !== false
    const swrKey = swrOptions?.swrKey ?? (() => isEnabled ? getGetInsurancePricesKey(params) : null);
  const swrFn = () => getInsurancePrices(params, axiosOptions);

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

