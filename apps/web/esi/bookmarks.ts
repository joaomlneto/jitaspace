/**
 * Generated by orval v6.11.1 üç∫
 * Do not edit manually.
 * EVE Swagger Interface
 * An OpenAPI for EVE Online
 * OpenAPI spec version: 1.17
 */
import axios from 'axios'
import type {
  AxiosRequestConfig,
  AxiosResponse,
  AxiosError
} from 'axios'
import useSwr from 'swr'
import type {
  SWRConfiguration,
  Key
} from 'swr'
import type {
  GetCharactersCharacterIdBookmarks200Item,
  BadRequest,
  Unauthorized,
  Forbidden,
  ErrorLimited,
  InternalServerError,
  ServiceUnavailable,
  GatewayTimeout,
  GetCharactersCharacterIdBookmarksParams,
  GetCharactersCharacterIdBookmarksFolders200Item,
  GetCharactersCharacterIdBookmarksFoldersParams,
  GetCorporationsCorporationIdBookmarks200Item,
  GetCorporationsCorporationIdBookmarksParams,
  GetCorporationsCorporationIdBookmarksFolders200Item,
  GetCorporationsCorporationIdBookmarksFoldersParams
} from './model'



  
  /**
 * A list of your character's personal bookmarks

---
Alternate route: `/dev/characters/{character_id}/bookmarks/`

Alternate route: `/v2/characters/{character_id}/bookmarks/`

---
This route is cached for up to 3600 seconds
 * @summary List bookmarks
 */
export const getCharactersCharacterIdBookmarks = (
    characterId: number,
    params?: GetCharactersCharacterIdBookmarksParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<GetCharactersCharacterIdBookmarks200Item[]>> => {
    return axios.get(
      `/characters/${characterId}/bookmarks/`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }


export const getGetCharactersCharacterIdBookmarksKey = (characterId: number,
    params?: GetCharactersCharacterIdBookmarksParams,) => [`/characters/${characterId}/bookmarks/`, ...(params ? [params]: [])];

    
export type GetCharactersCharacterIdBookmarksQueryResult = NonNullable<Awaited<ReturnType<typeof getCharactersCharacterIdBookmarks>>>
export type GetCharactersCharacterIdBookmarksQueryError = AxiosError<void | BadRequest | Unauthorized | Forbidden | ErrorLimited | InternalServerError | ServiceUnavailable | GatewayTimeout>

export const useGetCharactersCharacterIdBookmarks = <TError = AxiosError<void | BadRequest | Unauthorized | Forbidden | ErrorLimited | InternalServerError | ServiceUnavailable | GatewayTimeout>>(
 characterId: number,
    params?: GetCharactersCharacterIdBookmarksParams, options?: { swr?:SWRConfiguration<Awaited<ReturnType<typeof getCharactersCharacterIdBookmarks>>, TError> & { swrKey?: Key, enabled?: boolean }, axios?: AxiosRequestConfig }

  ) => {

  const {swr: swrOptions, axios: axiosOptions} = options ?? {}

  const isEnabled = swrOptions?.enabled !== false && !!(characterId)
    const swrKey = swrOptions?.swrKey ?? (() => isEnabled ? getGetCharactersCharacterIdBookmarksKey(characterId,params) : null);
  const swrFn = () => getCharactersCharacterIdBookmarks(characterId,params, axiosOptions);

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * A list of your character's personal bookmark folders

---
Alternate route: `/dev/characters/{character_id}/bookmarks/folders/`

Alternate route: `/v2/characters/{character_id}/bookmarks/folders/`

---
This route is cached for up to 3600 seconds
 * @summary List bookmark folders
 */
export const getCharactersCharacterIdBookmarksFolders = (
    characterId: number,
    params?: GetCharactersCharacterIdBookmarksFoldersParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<GetCharactersCharacterIdBookmarksFolders200Item[]>> => {
    return axios.get(
      `/characters/${characterId}/bookmarks/folders/`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }


export const getGetCharactersCharacterIdBookmarksFoldersKey = (characterId: number,
    params?: GetCharactersCharacterIdBookmarksFoldersParams,) => [`/characters/${characterId}/bookmarks/folders/`, ...(params ? [params]: [])];

    
export type GetCharactersCharacterIdBookmarksFoldersQueryResult = NonNullable<Awaited<ReturnType<typeof getCharactersCharacterIdBookmarksFolders>>>
export type GetCharactersCharacterIdBookmarksFoldersQueryError = AxiosError<void | BadRequest | Unauthorized | Forbidden | ErrorLimited | InternalServerError | ServiceUnavailable | GatewayTimeout>

export const useGetCharactersCharacterIdBookmarksFolders = <TError = AxiosError<void | BadRequest | Unauthorized | Forbidden | ErrorLimited | InternalServerError | ServiceUnavailable | GatewayTimeout>>(
 characterId: number,
    params?: GetCharactersCharacterIdBookmarksFoldersParams, options?: { swr?:SWRConfiguration<Awaited<ReturnType<typeof getCharactersCharacterIdBookmarksFolders>>, TError> & { swrKey?: Key, enabled?: boolean }, axios?: AxiosRequestConfig }

  ) => {

  const {swr: swrOptions, axios: axiosOptions} = options ?? {}

  const isEnabled = swrOptions?.enabled !== false && !!(characterId)
    const swrKey = swrOptions?.swrKey ?? (() => isEnabled ? getGetCharactersCharacterIdBookmarksFoldersKey(characterId,params) : null);
  const swrFn = () => getCharactersCharacterIdBookmarksFolders(characterId,params, axiosOptions);

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * A list of your corporation's bookmarks

---
Alternate route: `/dev/corporations/{corporation_id}/bookmarks/`

Alternate route: `/legacy/corporations/{corporation_id}/bookmarks/`

Alternate route: `/v1/corporations/{corporation_id}/bookmarks/`

---
This route is cached for up to 3600 seconds
 * @summary List corporation bookmarks
 */
export const getCorporationsCorporationIdBookmarks = (
    corporationId: number,
    params?: GetCorporationsCorporationIdBookmarksParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<GetCorporationsCorporationIdBookmarks200Item[]>> => {
    return axios.get(
      `/corporations/${corporationId}/bookmarks/`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }


export const getGetCorporationsCorporationIdBookmarksKey = (corporationId: number,
    params?: GetCorporationsCorporationIdBookmarksParams,) => [`/corporations/${corporationId}/bookmarks/`, ...(params ? [params]: [])];

    
export type GetCorporationsCorporationIdBookmarksQueryResult = NonNullable<Awaited<ReturnType<typeof getCorporationsCorporationIdBookmarks>>>
export type GetCorporationsCorporationIdBookmarksQueryError = AxiosError<void | BadRequest | Unauthorized | Forbidden | ErrorLimited | InternalServerError | ServiceUnavailable | GatewayTimeout>

export const useGetCorporationsCorporationIdBookmarks = <TError = AxiosError<void | BadRequest | Unauthorized | Forbidden | ErrorLimited | InternalServerError | ServiceUnavailable | GatewayTimeout>>(
 corporationId: number,
    params?: GetCorporationsCorporationIdBookmarksParams, options?: { swr?:SWRConfiguration<Awaited<ReturnType<typeof getCorporationsCorporationIdBookmarks>>, TError> & { swrKey?: Key, enabled?: boolean }, axios?: AxiosRequestConfig }

  ) => {

  const {swr: swrOptions, axios: axiosOptions} = options ?? {}

  const isEnabled = swrOptions?.enabled !== false && !!(corporationId)
    const swrKey = swrOptions?.swrKey ?? (() => isEnabled ? getGetCorporationsCorporationIdBookmarksKey(corporationId,params) : null);
  const swrFn = () => getCorporationsCorporationIdBookmarks(corporationId,params, axiosOptions);

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * A list of your corporation's bookmark folders

---
Alternate route: `/dev/corporations/{corporation_id}/bookmarks/folders/`

Alternate route: `/legacy/corporations/{corporation_id}/bookmarks/folders/`

Alternate route: `/v1/corporations/{corporation_id}/bookmarks/folders/`

---
This route is cached for up to 3600 seconds
 * @summary List corporation bookmark folders
 */
export const getCorporationsCorporationIdBookmarksFolders = (
    corporationId: number,
    params?: GetCorporationsCorporationIdBookmarksFoldersParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<GetCorporationsCorporationIdBookmarksFolders200Item[]>> => {
    return axios.get(
      `/corporations/${corporationId}/bookmarks/folders/`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }


export const getGetCorporationsCorporationIdBookmarksFoldersKey = (corporationId: number,
    params?: GetCorporationsCorporationIdBookmarksFoldersParams,) => [`/corporations/${corporationId}/bookmarks/folders/`, ...(params ? [params]: [])];

    
export type GetCorporationsCorporationIdBookmarksFoldersQueryResult = NonNullable<Awaited<ReturnType<typeof getCorporationsCorporationIdBookmarksFolders>>>
export type GetCorporationsCorporationIdBookmarksFoldersQueryError = AxiosError<void | BadRequest | Unauthorized | Forbidden | ErrorLimited | InternalServerError | ServiceUnavailable | GatewayTimeout>

export const useGetCorporationsCorporationIdBookmarksFolders = <TError = AxiosError<void | BadRequest | Unauthorized | Forbidden | ErrorLimited | InternalServerError | ServiceUnavailable | GatewayTimeout>>(
 corporationId: number,
    params?: GetCorporationsCorporationIdBookmarksFoldersParams, options?: { swr?:SWRConfiguration<Awaited<ReturnType<typeof getCorporationsCorporationIdBookmarksFolders>>, TError> & { swrKey?: Key, enabled?: boolean }, axios?: AxiosRequestConfig }

  ) => {

  const {swr: swrOptions, axios: axiosOptions} = options ?? {}

  const isEnabled = swrOptions?.enabled !== false && !!(corporationId)
    const swrKey = swrOptions?.swrKey ?? (() => isEnabled ? getGetCorporationsCorporationIdBookmarksFoldersKey(corporationId,params) : null);
  const swrFn = () => getCorporationsCorporationIdBookmarksFolders(corporationId,params, axiosOptions);

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

