/**
 * Generated by orval v6.11.1 üç∫
 * Do not edit manually.
 * EVE Swagger Interface
 * An OpenAPI for EVE Online
 * OpenAPI spec version: 1.17
 */
import axios from 'axios'
import type {
  AxiosRequestConfig,
  AxiosResponse,
  AxiosError
} from 'axios'
import useSwr from 'swr'
import type {
  SWRConfiguration,
  Key
} from 'swr'
import type {
  BadRequest,
  ErrorLimited,
  InternalServerError,
  ServiceUnavailable,
  GatewayTimeout,
  GetWarsParams,
  GetWarsWarId200,
  GetWarsWarId422,
  GetWarsWarIdParams,
  GetWarsWarIdKillmails200Item,
  GetWarsWarIdKillmails422,
  GetWarsWarIdKillmailsParams
} from './model'



  
  /**
 * Return a list of wars

---
Alternate route: `/dev/wars/`

Alternate route: `/legacy/wars/`

Alternate route: `/v1/wars/`

---
This route is cached for up to 3600 seconds
 * @summary List wars
 */
export const getWars = (
    params?: GetWarsParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<number[]>> => {
    return axios.get(
      `/wars/`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }


export const getGetWarsKey = (params?: GetWarsParams,) => [`/wars/`, ...(params ? [params]: [])];

    
export type GetWarsQueryResult = NonNullable<Awaited<ReturnType<typeof getWars>>>
export type GetWarsQueryError = AxiosError<void | BadRequest | ErrorLimited | InternalServerError | ServiceUnavailable | GatewayTimeout>

export const useGetWars = <TError = AxiosError<void | BadRequest | ErrorLimited | InternalServerError | ServiceUnavailable | GatewayTimeout>>(
 params?: GetWarsParams, options?: { swr?:SWRConfiguration<Awaited<ReturnType<typeof getWars>>, TError> & { swrKey?: Key, enabled?: boolean }, axios?: AxiosRequestConfig }

  ) => {

  const {swr: swrOptions, axios: axiosOptions} = options ?? {}

  const isEnabled = swrOptions?.enabled !== false
    const swrKey = swrOptions?.swrKey ?? (() => isEnabled ? getGetWarsKey(params) : null);
  const swrFn = () => getWars(params, axiosOptions);

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * Return details about a war

---
Alternate route: `/dev/wars/{war_id}/`

Alternate route: `/legacy/wars/{war_id}/`

Alternate route: `/v1/wars/{war_id}/`

---
This route is cached for up to 3600 seconds
 * @summary Get war information
 */
export const getWarsWarId = (
    warId: number,
    params?: GetWarsWarIdParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<GetWarsWarId200>> => {
    return axios.get(
      `/wars/${warId}/`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }


export const getGetWarsWarIdKey = (warId: number,
    params?: GetWarsWarIdParams,) => [`/wars/${warId}/`, ...(params ? [params]: [])];

    
export type GetWarsWarIdQueryResult = NonNullable<Awaited<ReturnType<typeof getWarsWarId>>>
export type GetWarsWarIdQueryError = AxiosError<void | BadRequest | ErrorLimited | GetWarsWarId422 | InternalServerError | ServiceUnavailable | GatewayTimeout>

export const useGetWarsWarId = <TError = AxiosError<void | BadRequest | ErrorLimited | GetWarsWarId422 | InternalServerError | ServiceUnavailable | GatewayTimeout>>(
 warId: number,
    params?: GetWarsWarIdParams, options?: { swr?:SWRConfiguration<Awaited<ReturnType<typeof getWarsWarId>>, TError> & { swrKey?: Key, enabled?: boolean }, axios?: AxiosRequestConfig }

  ) => {

  const {swr: swrOptions, axios: axiosOptions} = options ?? {}

  const isEnabled = swrOptions?.enabled !== false && !!(warId)
    const swrKey = swrOptions?.swrKey ?? (() => isEnabled ? getGetWarsWarIdKey(warId,params) : null);
  const swrFn = () => getWarsWarId(warId,params, axiosOptions);

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * Return a list of kills related to a war

---
Alternate route: `/dev/wars/{war_id}/killmails/`

Alternate route: `/legacy/wars/{war_id}/killmails/`

Alternate route: `/v1/wars/{war_id}/killmails/`

---
This route is cached for up to 3600 seconds
 * @summary List kills for a war
 */
export const getWarsWarIdKillmails = (
    warId: number,
    params?: GetWarsWarIdKillmailsParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<GetWarsWarIdKillmails200Item[]>> => {
    return axios.get(
      `/wars/${warId}/killmails/`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }


export const getGetWarsWarIdKillmailsKey = (warId: number,
    params?: GetWarsWarIdKillmailsParams,) => [`/wars/${warId}/killmails/`, ...(params ? [params]: [])];

    
export type GetWarsWarIdKillmailsQueryResult = NonNullable<Awaited<ReturnType<typeof getWarsWarIdKillmails>>>
export type GetWarsWarIdKillmailsQueryError = AxiosError<void | BadRequest | ErrorLimited | GetWarsWarIdKillmails422 | InternalServerError | ServiceUnavailable | GatewayTimeout>

export const useGetWarsWarIdKillmails = <TError = AxiosError<void | BadRequest | ErrorLimited | GetWarsWarIdKillmails422 | InternalServerError | ServiceUnavailable | GatewayTimeout>>(
 warId: number,
    params?: GetWarsWarIdKillmailsParams, options?: { swr?:SWRConfiguration<Awaited<ReturnType<typeof getWarsWarIdKillmails>>, TError> & { swrKey?: Key, enabled?: boolean }, axios?: AxiosRequestConfig }

  ) => {

  const {swr: swrOptions, axios: axiosOptions} = options ?? {}

  const isEnabled = swrOptions?.enabled !== false && !!(warId)
    const swrKey = swrOptions?.swrKey ?? (() => isEnabled ? getGetWarsWarIdKillmailsKey(warId,params) : null);
  const swrFn = () => getWarsWarIdKillmails(warId,params, axiosOptions);

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

