/**
 * Generated by orval v6.11.1 üç∫
 * Do not edit manually.
 * EVE Swagger Interface
 * An OpenAPI for EVE Online
 * OpenAPI spec version: 1.17
 */
import axios from 'axios'
import type {
  AxiosRequestConfig,
  AxiosResponse,
  AxiosError
} from 'axios'
import useSwr from 'swr'
import type {
  SWRConfiguration,
  Key
} from 'swr'
import type {
  GetUniverseAncestries200Item,
  BadRequest,
  ErrorLimited,
  InternalServerError,
  ServiceUnavailable,
  GatewayTimeout,
  GetUniverseAncestriesParams,
  GetUniverseAsteroidBeltsAsteroidBeltId200,
  GetUniverseAsteroidBeltsAsteroidBeltId404,
  GetUniverseAsteroidBeltsAsteroidBeltIdParams,
  GetUniverseBloodlines200Item,
  GetUniverseBloodlinesParams,
  GetUniverseCategoriesParams,
  GetUniverseCategoriesCategoryId200,
  GetUniverseCategoriesCategoryId404,
  GetUniverseCategoriesCategoryIdParams,
  GetUniverseConstellationsParams,
  GetUniverseConstellationsConstellationId200,
  GetUniverseConstellationsConstellationId404,
  GetUniverseConstellationsConstellationIdParams,
  GetUniverseFactions200Item,
  GetUniverseFactionsParams,
  GetUniverseGraphicsParams,
  GetUniverseGraphicsGraphicId200,
  GetUniverseGraphicsGraphicId404,
  GetUniverseGraphicsGraphicIdParams,
  GetUniverseGroupsParams,
  GetUniverseGroupsGroupId200,
  GetUniverseGroupsGroupId404,
  GetUniverseGroupsGroupIdParams,
  PostUniverseIds200,
  PostUniverseIdsParams,
  GetUniverseMoonsMoonId200,
  GetUniverseMoonsMoonId404,
  GetUniverseMoonsMoonIdParams,
  PostUniverseNames200Item,
  PostUniverseNamesParams,
  GetUniversePlanetsPlanetId200,
  GetUniversePlanetsPlanetId404,
  GetUniversePlanetsPlanetIdParams,
  GetUniverseRaces200Item,
  GetUniverseRacesParams,
  GetUniverseRegionsParams,
  GetUniverseRegionsRegionId200,
  GetUniverseRegionsRegionId404,
  GetUniverseRegionsRegionIdParams,
  GetUniverseStargatesStargateId200,
  GetUniverseStargatesStargateId404,
  GetUniverseStargatesStargateIdParams,
  GetUniverseStarsStarId200,
  GetUniverseStarsStarIdParams,
  GetUniverseStationsStationId200,
  GetUniverseStationsStationId404,
  GetUniverseStationsStationIdParams,
  GetUniverseStructuresParams,
  GetUniverseStructuresStructureId200,
  Unauthorized,
  Forbidden,
  GetUniverseStructuresStructureId404,
  GetUniverseStructuresStructureIdParams,
  GetUniverseSystemJumps200Item,
  GetUniverseSystemJumpsParams,
  GetUniverseSystemKills200Item,
  GetUniverseSystemKillsParams,
  GetUniverseSystemsParams,
  GetUniverseSystemsSystemId200,
  GetUniverseSystemsSystemId404,
  GetUniverseSystemsSystemIdParams,
  GetUniverseTypesParams,
  GetUniverseTypesTypeId200,
  GetUniverseTypesTypeId404,
  GetUniverseTypesTypeIdParams
} from './model'



  
  /**
 * Get all character ancestries

---
Alternate route: `/legacy/universe/ancestries/`

Alternate route: `/v1/universe/ancestries/`

---
This route expires daily at 11:05
 * @summary Get ancestries
 */
export const getUniverseAncestries = (
    params?: GetUniverseAncestriesParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<GetUniverseAncestries200Item[]>> => {
    return axios.get(
      `/universe/ancestries/`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }


export const getGetUniverseAncestriesKey = (params?: GetUniverseAncestriesParams,) => [`/universe/ancestries/`, ...(params ? [params]: [])];

    
export type GetUniverseAncestriesQueryResult = NonNullable<Awaited<ReturnType<typeof getUniverseAncestries>>>
export type GetUniverseAncestriesQueryError = AxiosError<void | BadRequest | ErrorLimited | InternalServerError | ServiceUnavailable | GatewayTimeout>

export const useGetUniverseAncestries = <TError = AxiosError<void | BadRequest | ErrorLimited | InternalServerError | ServiceUnavailable | GatewayTimeout>>(
 params?: GetUniverseAncestriesParams, options?: { swr?:SWRConfiguration<Awaited<ReturnType<typeof getUniverseAncestries>>, TError> & { swrKey?: Key, enabled?: boolean }, axios?: AxiosRequestConfig }

  ) => {

  const {swr: swrOptions, axios: axiosOptions} = options ?? {}

  const isEnabled = swrOptions?.enabled !== false
    const swrKey = swrOptions?.swrKey ?? (() => isEnabled ? getGetUniverseAncestriesKey(params) : null);
  const swrFn = () => getUniverseAncestries(params, axiosOptions);

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * Get information on an asteroid belt

---
Alternate route: `/legacy/universe/asteroid_belts/{asteroid_belt_id}/`

Alternate route: `/v1/universe/asteroid_belts/{asteroid_belt_id}/`

---
This route expires daily at 11:05
 * @summary Get asteroid belt information
 */
export const getUniverseAsteroidBeltsAsteroidBeltId = (
    asteroidBeltId: number,
    params?: GetUniverseAsteroidBeltsAsteroidBeltIdParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<GetUniverseAsteroidBeltsAsteroidBeltId200>> => {
    return axios.get(
      `/universe/asteroid_belts/${asteroidBeltId}/`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }


export const getGetUniverseAsteroidBeltsAsteroidBeltIdKey = (asteroidBeltId: number,
    params?: GetUniverseAsteroidBeltsAsteroidBeltIdParams,) => [`/universe/asteroid_belts/${asteroidBeltId}/`, ...(params ? [params]: [])];

    
export type GetUniverseAsteroidBeltsAsteroidBeltIdQueryResult = NonNullable<Awaited<ReturnType<typeof getUniverseAsteroidBeltsAsteroidBeltId>>>
export type GetUniverseAsteroidBeltsAsteroidBeltIdQueryError = AxiosError<void | BadRequest | GetUniverseAsteroidBeltsAsteroidBeltId404 | ErrorLimited | InternalServerError | ServiceUnavailable | GatewayTimeout>

export const useGetUniverseAsteroidBeltsAsteroidBeltId = <TError = AxiosError<void | BadRequest | GetUniverseAsteroidBeltsAsteroidBeltId404 | ErrorLimited | InternalServerError | ServiceUnavailable | GatewayTimeout>>(
 asteroidBeltId: number,
    params?: GetUniverseAsteroidBeltsAsteroidBeltIdParams, options?: { swr?:SWRConfiguration<Awaited<ReturnType<typeof getUniverseAsteroidBeltsAsteroidBeltId>>, TError> & { swrKey?: Key, enabled?: boolean }, axios?: AxiosRequestConfig }

  ) => {

  const {swr: swrOptions, axios: axiosOptions} = options ?? {}

  const isEnabled = swrOptions?.enabled !== false && !!(asteroidBeltId)
    const swrKey = swrOptions?.swrKey ?? (() => isEnabled ? getGetUniverseAsteroidBeltsAsteroidBeltIdKey(asteroidBeltId,params) : null);
  const swrFn = () => getUniverseAsteroidBeltsAsteroidBeltId(asteroidBeltId,params, axiosOptions);

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * Get a list of bloodlines

---
Alternate route: `/legacy/universe/bloodlines/`

Alternate route: `/v1/universe/bloodlines/`

---
This route expires daily at 11:05
 * @summary Get bloodlines
 */
export const getUniverseBloodlines = (
    params?: GetUniverseBloodlinesParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<GetUniverseBloodlines200Item[]>> => {
    return axios.get(
      `/universe/bloodlines/`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }


export const getGetUniverseBloodlinesKey = (params?: GetUniverseBloodlinesParams,) => [`/universe/bloodlines/`, ...(params ? [params]: [])];

    
export type GetUniverseBloodlinesQueryResult = NonNullable<Awaited<ReturnType<typeof getUniverseBloodlines>>>
export type GetUniverseBloodlinesQueryError = AxiosError<void | BadRequest | ErrorLimited | InternalServerError | ServiceUnavailable | GatewayTimeout>

export const useGetUniverseBloodlines = <TError = AxiosError<void | BadRequest | ErrorLimited | InternalServerError | ServiceUnavailable | GatewayTimeout>>(
 params?: GetUniverseBloodlinesParams, options?: { swr?:SWRConfiguration<Awaited<ReturnType<typeof getUniverseBloodlines>>, TError> & { swrKey?: Key, enabled?: boolean }, axios?: AxiosRequestConfig }

  ) => {

  const {swr: swrOptions, axios: axiosOptions} = options ?? {}

  const isEnabled = swrOptions?.enabled !== false
    const swrKey = swrOptions?.swrKey ?? (() => isEnabled ? getGetUniverseBloodlinesKey(params) : null);
  const swrFn = () => getUniverseBloodlines(params, axiosOptions);

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * Get a list of item categories

---
Alternate route: `/legacy/universe/categories/`

Alternate route: `/v1/universe/categories/`

---
This route expires daily at 11:05
 * @summary Get item categories
 */
export const getUniverseCategories = (
    params?: GetUniverseCategoriesParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<number[]>> => {
    return axios.get(
      `/universe/categories/`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }


export const getGetUniverseCategoriesKey = (params?: GetUniverseCategoriesParams,) => [`/universe/categories/`, ...(params ? [params]: [])];

    
export type GetUniverseCategoriesQueryResult = NonNullable<Awaited<ReturnType<typeof getUniverseCategories>>>
export type GetUniverseCategoriesQueryError = AxiosError<void | BadRequest | ErrorLimited | InternalServerError | ServiceUnavailable | GatewayTimeout>

export const useGetUniverseCategories = <TError = AxiosError<void | BadRequest | ErrorLimited | InternalServerError | ServiceUnavailable | GatewayTimeout>>(
 params?: GetUniverseCategoriesParams, options?: { swr?:SWRConfiguration<Awaited<ReturnType<typeof getUniverseCategories>>, TError> & { swrKey?: Key, enabled?: boolean }, axios?: AxiosRequestConfig }

  ) => {

  const {swr: swrOptions, axios: axiosOptions} = options ?? {}

  const isEnabled = swrOptions?.enabled !== false
    const swrKey = swrOptions?.swrKey ?? (() => isEnabled ? getGetUniverseCategoriesKey(params) : null);
  const swrFn = () => getUniverseCategories(params, axiosOptions);

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * Get information of an item category

---
Alternate route: `/legacy/universe/categories/{category_id}/`

Alternate route: `/v1/universe/categories/{category_id}/`

---
This route expires daily at 11:05
 * @summary Get item category information
 */
export const getUniverseCategoriesCategoryId = (
    categoryId: number,
    params?: GetUniverseCategoriesCategoryIdParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<GetUniverseCategoriesCategoryId200>> => {
    return axios.get(
      `/universe/categories/${categoryId}/`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }


export const getGetUniverseCategoriesCategoryIdKey = (categoryId: number,
    params?: GetUniverseCategoriesCategoryIdParams,) => [`/universe/categories/${categoryId}/`, ...(params ? [params]: [])];

    
export type GetUniverseCategoriesCategoryIdQueryResult = NonNullable<Awaited<ReturnType<typeof getUniverseCategoriesCategoryId>>>
export type GetUniverseCategoriesCategoryIdQueryError = AxiosError<void | BadRequest | GetUniverseCategoriesCategoryId404 | ErrorLimited | InternalServerError | ServiceUnavailable | GatewayTimeout>

export const useGetUniverseCategoriesCategoryId = <TError = AxiosError<void | BadRequest | GetUniverseCategoriesCategoryId404 | ErrorLimited | InternalServerError | ServiceUnavailable | GatewayTimeout>>(
 categoryId: number,
    params?: GetUniverseCategoriesCategoryIdParams, options?: { swr?:SWRConfiguration<Awaited<ReturnType<typeof getUniverseCategoriesCategoryId>>, TError> & { swrKey?: Key, enabled?: boolean }, axios?: AxiosRequestConfig }

  ) => {

  const {swr: swrOptions, axios: axiosOptions} = options ?? {}

  const isEnabled = swrOptions?.enabled !== false && !!(categoryId)
    const swrKey = swrOptions?.swrKey ?? (() => isEnabled ? getGetUniverseCategoriesCategoryIdKey(categoryId,params) : null);
  const swrFn = () => getUniverseCategoriesCategoryId(categoryId,params, axiosOptions);

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * Get a list of constellations

---
Alternate route: `/legacy/universe/constellations/`

Alternate route: `/v1/universe/constellations/`

---
This route expires daily at 11:05
 * @summary Get constellations
 */
export const getUniverseConstellations = (
    params?: GetUniverseConstellationsParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<number[]>> => {
    return axios.get(
      `/universe/constellations/`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }


export const getGetUniverseConstellationsKey = (params?: GetUniverseConstellationsParams,) => [`/universe/constellations/`, ...(params ? [params]: [])];

    
export type GetUniverseConstellationsQueryResult = NonNullable<Awaited<ReturnType<typeof getUniverseConstellations>>>
export type GetUniverseConstellationsQueryError = AxiosError<void | BadRequest | ErrorLimited | InternalServerError | ServiceUnavailable | GatewayTimeout>

export const useGetUniverseConstellations = <TError = AxiosError<void | BadRequest | ErrorLimited | InternalServerError | ServiceUnavailable | GatewayTimeout>>(
 params?: GetUniverseConstellationsParams, options?: { swr?:SWRConfiguration<Awaited<ReturnType<typeof getUniverseConstellations>>, TError> & { swrKey?: Key, enabled?: boolean }, axios?: AxiosRequestConfig }

  ) => {

  const {swr: swrOptions, axios: axiosOptions} = options ?? {}

  const isEnabled = swrOptions?.enabled !== false
    const swrKey = swrOptions?.swrKey ?? (() => isEnabled ? getGetUniverseConstellationsKey(params) : null);
  const swrFn = () => getUniverseConstellations(params, axiosOptions);

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * Get information on a constellation

---
Alternate route: `/legacy/universe/constellations/{constellation_id}/`

Alternate route: `/v1/universe/constellations/{constellation_id}/`

---
This route expires daily at 11:05
 * @summary Get constellation information
 */
export const getUniverseConstellationsConstellationId = (
    constellationId: number,
    params?: GetUniverseConstellationsConstellationIdParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<GetUniverseConstellationsConstellationId200>> => {
    return axios.get(
      `/universe/constellations/${constellationId}/`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }


export const getGetUniverseConstellationsConstellationIdKey = (constellationId: number,
    params?: GetUniverseConstellationsConstellationIdParams,) => [`/universe/constellations/${constellationId}/`, ...(params ? [params]: [])];

    
export type GetUniverseConstellationsConstellationIdQueryResult = NonNullable<Awaited<ReturnType<typeof getUniverseConstellationsConstellationId>>>
export type GetUniverseConstellationsConstellationIdQueryError = AxiosError<void | BadRequest | GetUniverseConstellationsConstellationId404 | ErrorLimited | InternalServerError | ServiceUnavailable | GatewayTimeout>

export const useGetUniverseConstellationsConstellationId = <TError = AxiosError<void | BadRequest | GetUniverseConstellationsConstellationId404 | ErrorLimited | InternalServerError | ServiceUnavailable | GatewayTimeout>>(
 constellationId: number,
    params?: GetUniverseConstellationsConstellationIdParams, options?: { swr?:SWRConfiguration<Awaited<ReturnType<typeof getUniverseConstellationsConstellationId>>, TError> & { swrKey?: Key, enabled?: boolean }, axios?: AxiosRequestConfig }

  ) => {

  const {swr: swrOptions, axios: axiosOptions} = options ?? {}

  const isEnabled = swrOptions?.enabled !== false && !!(constellationId)
    const swrKey = swrOptions?.swrKey ?? (() => isEnabled ? getGetUniverseConstellationsConstellationIdKey(constellationId,params) : null);
  const swrFn = () => getUniverseConstellationsConstellationId(constellationId,params, axiosOptions);

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * Get a list of factions

---
Alternate route: `/dev/universe/factions/`

Alternate route: `/v2/universe/factions/`

---
This route expires daily at 11:05
 * @summary Get factions
 */
export const getUniverseFactions = (
    params?: GetUniverseFactionsParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<GetUniverseFactions200Item[]>> => {
    return axios.get(
      `/universe/factions/`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }


export const getGetUniverseFactionsKey = (params?: GetUniverseFactionsParams,) => [`/universe/factions/`, ...(params ? [params]: [])];

    
export type GetUniverseFactionsQueryResult = NonNullable<Awaited<ReturnType<typeof getUniverseFactions>>>
export type GetUniverseFactionsQueryError = AxiosError<void | BadRequest | ErrorLimited | InternalServerError | ServiceUnavailable | GatewayTimeout>

export const useGetUniverseFactions = <TError = AxiosError<void | BadRequest | ErrorLimited | InternalServerError | ServiceUnavailable | GatewayTimeout>>(
 params?: GetUniverseFactionsParams, options?: { swr?:SWRConfiguration<Awaited<ReturnType<typeof getUniverseFactions>>, TError> & { swrKey?: Key, enabled?: boolean }, axios?: AxiosRequestConfig }

  ) => {

  const {swr: swrOptions, axios: axiosOptions} = options ?? {}

  const isEnabled = swrOptions?.enabled !== false
    const swrKey = swrOptions?.swrKey ?? (() => isEnabled ? getGetUniverseFactionsKey(params) : null);
  const swrFn = () => getUniverseFactions(params, axiosOptions);

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * Get a list of graphics

---
Alternate route: `/legacy/universe/graphics/`

Alternate route: `/v1/universe/graphics/`

---
This route expires daily at 11:05
 * @summary Get graphics
 */
export const getUniverseGraphics = (
    params?: GetUniverseGraphicsParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<number[]>> => {
    return axios.get(
      `/universe/graphics/`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }


export const getGetUniverseGraphicsKey = (params?: GetUniverseGraphicsParams,) => [`/universe/graphics/`, ...(params ? [params]: [])];

    
export type GetUniverseGraphicsQueryResult = NonNullable<Awaited<ReturnType<typeof getUniverseGraphics>>>
export type GetUniverseGraphicsQueryError = AxiosError<void | BadRequest | ErrorLimited | InternalServerError | ServiceUnavailable | GatewayTimeout>

export const useGetUniverseGraphics = <TError = AxiosError<void | BadRequest | ErrorLimited | InternalServerError | ServiceUnavailable | GatewayTimeout>>(
 params?: GetUniverseGraphicsParams, options?: { swr?:SWRConfiguration<Awaited<ReturnType<typeof getUniverseGraphics>>, TError> & { swrKey?: Key, enabled?: boolean }, axios?: AxiosRequestConfig }

  ) => {

  const {swr: swrOptions, axios: axiosOptions} = options ?? {}

  const isEnabled = swrOptions?.enabled !== false
    const swrKey = swrOptions?.swrKey ?? (() => isEnabled ? getGetUniverseGraphicsKey(params) : null);
  const swrFn = () => getUniverseGraphics(params, axiosOptions);

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * Get information on a graphic

---
Alternate route: `/dev/universe/graphics/{graphic_id}/`

Alternate route: `/legacy/universe/graphics/{graphic_id}/`

Alternate route: `/v1/universe/graphics/{graphic_id}/`

---
This route expires daily at 11:05
 * @summary Get graphic information
 */
export const getUniverseGraphicsGraphicId = (
    graphicId: number,
    params?: GetUniverseGraphicsGraphicIdParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<GetUniverseGraphicsGraphicId200>> => {
    return axios.get(
      `/universe/graphics/${graphicId}/`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }


export const getGetUniverseGraphicsGraphicIdKey = (graphicId: number,
    params?: GetUniverseGraphicsGraphicIdParams,) => [`/universe/graphics/${graphicId}/`, ...(params ? [params]: [])];

    
export type GetUniverseGraphicsGraphicIdQueryResult = NonNullable<Awaited<ReturnType<typeof getUniverseGraphicsGraphicId>>>
export type GetUniverseGraphicsGraphicIdQueryError = AxiosError<void | BadRequest | GetUniverseGraphicsGraphicId404 | ErrorLimited | InternalServerError | ServiceUnavailable | GatewayTimeout>

export const useGetUniverseGraphicsGraphicId = <TError = AxiosError<void | BadRequest | GetUniverseGraphicsGraphicId404 | ErrorLimited | InternalServerError | ServiceUnavailable | GatewayTimeout>>(
 graphicId: number,
    params?: GetUniverseGraphicsGraphicIdParams, options?: { swr?:SWRConfiguration<Awaited<ReturnType<typeof getUniverseGraphicsGraphicId>>, TError> & { swrKey?: Key, enabled?: boolean }, axios?: AxiosRequestConfig }

  ) => {

  const {swr: swrOptions, axios: axiosOptions} = options ?? {}

  const isEnabled = swrOptions?.enabled !== false && !!(graphicId)
    const swrKey = swrOptions?.swrKey ?? (() => isEnabled ? getGetUniverseGraphicsGraphicIdKey(graphicId,params) : null);
  const swrFn = () => getUniverseGraphicsGraphicId(graphicId,params, axiosOptions);

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * Get a list of item groups

---
Alternate route: `/legacy/universe/groups/`

Alternate route: `/v1/universe/groups/`

---
This route expires daily at 11:05
 * @summary Get item groups
 */
export const getUniverseGroups = (
    params?: GetUniverseGroupsParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<number[]>> => {
    return axios.get(
      `/universe/groups/`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }


export const getGetUniverseGroupsKey = (params?: GetUniverseGroupsParams,) => [`/universe/groups/`, ...(params ? [params]: [])];

    
export type GetUniverseGroupsQueryResult = NonNullable<Awaited<ReturnType<typeof getUniverseGroups>>>
export type GetUniverseGroupsQueryError = AxiosError<void | BadRequest | ErrorLimited | InternalServerError | ServiceUnavailable | GatewayTimeout>

export const useGetUniverseGroups = <TError = AxiosError<void | BadRequest | ErrorLimited | InternalServerError | ServiceUnavailable | GatewayTimeout>>(
 params?: GetUniverseGroupsParams, options?: { swr?:SWRConfiguration<Awaited<ReturnType<typeof getUniverseGroups>>, TError> & { swrKey?: Key, enabled?: boolean }, axios?: AxiosRequestConfig }

  ) => {

  const {swr: swrOptions, axios: axiosOptions} = options ?? {}

  const isEnabled = swrOptions?.enabled !== false
    const swrKey = swrOptions?.swrKey ?? (() => isEnabled ? getGetUniverseGroupsKey(params) : null);
  const swrFn = () => getUniverseGroups(params, axiosOptions);

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * Get information on an item group

---
Alternate route: `/dev/universe/groups/{group_id}/`

Alternate route: `/legacy/universe/groups/{group_id}/`

Alternate route: `/v1/universe/groups/{group_id}/`

---
This route expires daily at 11:05
 * @summary Get item group information
 */
export const getUniverseGroupsGroupId = (
    groupId: number,
    params?: GetUniverseGroupsGroupIdParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<GetUniverseGroupsGroupId200>> => {
    return axios.get(
      `/universe/groups/${groupId}/`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }


export const getGetUniverseGroupsGroupIdKey = (groupId: number,
    params?: GetUniverseGroupsGroupIdParams,) => [`/universe/groups/${groupId}/`, ...(params ? [params]: [])];

    
export type GetUniverseGroupsGroupIdQueryResult = NonNullable<Awaited<ReturnType<typeof getUniverseGroupsGroupId>>>
export type GetUniverseGroupsGroupIdQueryError = AxiosError<void | BadRequest | GetUniverseGroupsGroupId404 | ErrorLimited | InternalServerError | ServiceUnavailable | GatewayTimeout>

export const useGetUniverseGroupsGroupId = <TError = AxiosError<void | BadRequest | GetUniverseGroupsGroupId404 | ErrorLimited | InternalServerError | ServiceUnavailable | GatewayTimeout>>(
 groupId: number,
    params?: GetUniverseGroupsGroupIdParams, options?: { swr?:SWRConfiguration<Awaited<ReturnType<typeof getUniverseGroupsGroupId>>, TError> & { swrKey?: Key, enabled?: boolean }, axios?: AxiosRequestConfig }

  ) => {

  const {swr: swrOptions, axios: axiosOptions} = options ?? {}

  const isEnabled = swrOptions?.enabled !== false && !!(groupId)
    const swrKey = swrOptions?.swrKey ?? (() => isEnabled ? getGetUniverseGroupsGroupIdKey(groupId,params) : null);
  const swrFn = () => getUniverseGroupsGroupId(groupId,params, axiosOptions);

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * Resolve a set of names to IDs in the following categories: agents, alliances, characters, constellations, corporations factions, inventory_types, regions, stations, and systems. Only exact matches will be returned. All names searched for are cached for 12 hours

---
Alternate route: `/dev/universe/ids/`

Alternate route: `/legacy/universe/ids/`

Alternate route: `/v1/universe/ids/`

 * @summary Bulk names to IDs
 */
export const postUniverseIds = (
    postUniverseIdsBody: string[],
    params?: PostUniverseIdsParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<PostUniverseIds200>> => {
    return axios.post(
      `/universe/ids/`,
      postUniverseIdsBody,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }


/**
 * Get information on a moon

---
Alternate route: `/legacy/universe/moons/{moon_id}/`

Alternate route: `/v1/universe/moons/{moon_id}/`

---
This route expires daily at 11:05
 * @summary Get moon information
 */
export const getUniverseMoonsMoonId = (
    moonId: number,
    params?: GetUniverseMoonsMoonIdParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<GetUniverseMoonsMoonId200>> => {
    return axios.get(
      `/universe/moons/${moonId}/`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }


export const getGetUniverseMoonsMoonIdKey = (moonId: number,
    params?: GetUniverseMoonsMoonIdParams,) => [`/universe/moons/${moonId}/`, ...(params ? [params]: [])];

    
export type GetUniverseMoonsMoonIdQueryResult = NonNullable<Awaited<ReturnType<typeof getUniverseMoonsMoonId>>>
export type GetUniverseMoonsMoonIdQueryError = AxiosError<void | BadRequest | GetUniverseMoonsMoonId404 | ErrorLimited | InternalServerError | ServiceUnavailable | GatewayTimeout>

export const useGetUniverseMoonsMoonId = <TError = AxiosError<void | BadRequest | GetUniverseMoonsMoonId404 | ErrorLimited | InternalServerError | ServiceUnavailable | GatewayTimeout>>(
 moonId: number,
    params?: GetUniverseMoonsMoonIdParams, options?: { swr?:SWRConfiguration<Awaited<ReturnType<typeof getUniverseMoonsMoonId>>, TError> & { swrKey?: Key, enabled?: boolean }, axios?: AxiosRequestConfig }

  ) => {

  const {swr: swrOptions, axios: axiosOptions} = options ?? {}

  const isEnabled = swrOptions?.enabled !== false && !!(moonId)
    const swrKey = swrOptions?.swrKey ?? (() => isEnabled ? getGetUniverseMoonsMoonIdKey(moonId,params) : null);
  const swrFn = () => getUniverseMoonsMoonId(moonId,params, axiosOptions);

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * Resolve a set of IDs to names and categories. Supported ID's for resolving are: Characters, Corporations, Alliances, Stations, Solar Systems, Constellations, Regions, Types, Factions

---
Alternate route: `/dev/universe/names/`

Alternate route: `/v3/universe/names/`

 * @summary Get names and categories for a set of IDs
 */
export const postUniverseNames = (
    postUniverseNamesBody: number[],
    params?: PostUniverseNamesParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<PostUniverseNames200Item[]>> => {
    return axios.post(
      `/universe/names/`,
      postUniverseNamesBody,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }


/**
 * Get information on a planet

---
Alternate route: `/legacy/universe/planets/{planet_id}/`

Alternate route: `/v1/universe/planets/{planet_id}/`

---
This route expires daily at 11:05
 * @summary Get planet information
 */
export const getUniversePlanetsPlanetId = (
    planetId: number,
    params?: GetUniversePlanetsPlanetIdParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<GetUniversePlanetsPlanetId200>> => {
    return axios.get(
      `/universe/planets/${planetId}/`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }


export const getGetUniversePlanetsPlanetIdKey = (planetId: number,
    params?: GetUniversePlanetsPlanetIdParams,) => [`/universe/planets/${planetId}/`, ...(params ? [params]: [])];

    
export type GetUniversePlanetsPlanetIdQueryResult = NonNullable<Awaited<ReturnType<typeof getUniversePlanetsPlanetId>>>
export type GetUniversePlanetsPlanetIdQueryError = AxiosError<void | BadRequest | GetUniversePlanetsPlanetId404 | ErrorLimited | InternalServerError | ServiceUnavailable | GatewayTimeout>

export const useGetUniversePlanetsPlanetId = <TError = AxiosError<void | BadRequest | GetUniversePlanetsPlanetId404 | ErrorLimited | InternalServerError | ServiceUnavailable | GatewayTimeout>>(
 planetId: number,
    params?: GetUniversePlanetsPlanetIdParams, options?: { swr?:SWRConfiguration<Awaited<ReturnType<typeof getUniversePlanetsPlanetId>>, TError> & { swrKey?: Key, enabled?: boolean }, axios?: AxiosRequestConfig }

  ) => {

  const {swr: swrOptions, axios: axiosOptions} = options ?? {}

  const isEnabled = swrOptions?.enabled !== false && !!(planetId)
    const swrKey = swrOptions?.swrKey ?? (() => isEnabled ? getGetUniversePlanetsPlanetIdKey(planetId,params) : null);
  const swrFn = () => getUniversePlanetsPlanetId(planetId,params, axiosOptions);

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * Get a list of character races

---
Alternate route: `/dev/universe/races/`

Alternate route: `/legacy/universe/races/`

Alternate route: `/v1/universe/races/`

---
This route expires daily at 11:05
 * @summary Get character races
 */
export const getUniverseRaces = (
    params?: GetUniverseRacesParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<GetUniverseRaces200Item[]>> => {
    return axios.get(
      `/universe/races/`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }


export const getGetUniverseRacesKey = (params?: GetUniverseRacesParams,) => [`/universe/races/`, ...(params ? [params]: [])];

    
export type GetUniverseRacesQueryResult = NonNullable<Awaited<ReturnType<typeof getUniverseRaces>>>
export type GetUniverseRacesQueryError = AxiosError<void | BadRequest | ErrorLimited | InternalServerError | ServiceUnavailable | GatewayTimeout>

export const useGetUniverseRaces = <TError = AxiosError<void | BadRequest | ErrorLimited | InternalServerError | ServiceUnavailable | GatewayTimeout>>(
 params?: GetUniverseRacesParams, options?: { swr?:SWRConfiguration<Awaited<ReturnType<typeof getUniverseRaces>>, TError> & { swrKey?: Key, enabled?: boolean }, axios?: AxiosRequestConfig }

  ) => {

  const {swr: swrOptions, axios: axiosOptions} = options ?? {}

  const isEnabled = swrOptions?.enabled !== false
    const swrKey = swrOptions?.swrKey ?? (() => isEnabled ? getGetUniverseRacesKey(params) : null);
  const swrFn = () => getUniverseRaces(params, axiosOptions);

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * Get a list of regions

---
Alternate route: `/legacy/universe/regions/`

Alternate route: `/v1/universe/regions/`

---
This route expires daily at 11:05
 * @summary Get regions
 */
export const getUniverseRegions = (
    params?: GetUniverseRegionsParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<number[]>> => {
    return axios.get(
      `/universe/regions/`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }


export const getGetUniverseRegionsKey = (params?: GetUniverseRegionsParams,) => [`/universe/regions/`, ...(params ? [params]: [])];

    
export type GetUniverseRegionsQueryResult = NonNullable<Awaited<ReturnType<typeof getUniverseRegions>>>
export type GetUniverseRegionsQueryError = AxiosError<void | BadRequest | ErrorLimited | InternalServerError | ServiceUnavailable | GatewayTimeout>

export const useGetUniverseRegions = <TError = AxiosError<void | BadRequest | ErrorLimited | InternalServerError | ServiceUnavailable | GatewayTimeout>>(
 params?: GetUniverseRegionsParams, options?: { swr?:SWRConfiguration<Awaited<ReturnType<typeof getUniverseRegions>>, TError> & { swrKey?: Key, enabled?: boolean }, axios?: AxiosRequestConfig }

  ) => {

  const {swr: swrOptions, axios: axiosOptions} = options ?? {}

  const isEnabled = swrOptions?.enabled !== false
    const swrKey = swrOptions?.swrKey ?? (() => isEnabled ? getGetUniverseRegionsKey(params) : null);
  const swrFn = () => getUniverseRegions(params, axiosOptions);

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * Get information on a region

---
Alternate route: `/legacy/universe/regions/{region_id}/`

Alternate route: `/v1/universe/regions/{region_id}/`

---
This route expires daily at 11:05
 * @summary Get region information
 */
export const getUniverseRegionsRegionId = (
    regionId: number,
    params?: GetUniverseRegionsRegionIdParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<GetUniverseRegionsRegionId200>> => {
    return axios.get(
      `/universe/regions/${regionId}/`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }


export const getGetUniverseRegionsRegionIdKey = (regionId: number,
    params?: GetUniverseRegionsRegionIdParams,) => [`/universe/regions/${regionId}/`, ...(params ? [params]: [])];

    
export type GetUniverseRegionsRegionIdQueryResult = NonNullable<Awaited<ReturnType<typeof getUniverseRegionsRegionId>>>
export type GetUniverseRegionsRegionIdQueryError = AxiosError<void | BadRequest | GetUniverseRegionsRegionId404 | ErrorLimited | InternalServerError | ServiceUnavailable | GatewayTimeout>

export const useGetUniverseRegionsRegionId = <TError = AxiosError<void | BadRequest | GetUniverseRegionsRegionId404 | ErrorLimited | InternalServerError | ServiceUnavailable | GatewayTimeout>>(
 regionId: number,
    params?: GetUniverseRegionsRegionIdParams, options?: { swr?:SWRConfiguration<Awaited<ReturnType<typeof getUniverseRegionsRegionId>>, TError> & { swrKey?: Key, enabled?: boolean }, axios?: AxiosRequestConfig }

  ) => {

  const {swr: swrOptions, axios: axiosOptions} = options ?? {}

  const isEnabled = swrOptions?.enabled !== false && !!(regionId)
    const swrKey = swrOptions?.swrKey ?? (() => isEnabled ? getGetUniverseRegionsRegionIdKey(regionId,params) : null);
  const swrFn = () => getUniverseRegionsRegionId(regionId,params, axiosOptions);

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * Get information on a stargate

---
Alternate route: `/legacy/universe/stargates/{stargate_id}/`

Alternate route: `/v1/universe/stargates/{stargate_id}/`

---
This route expires daily at 11:05
 * @summary Get stargate information
 */
export const getUniverseStargatesStargateId = (
    stargateId: number,
    params?: GetUniverseStargatesStargateIdParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<GetUniverseStargatesStargateId200>> => {
    return axios.get(
      `/universe/stargates/${stargateId}/`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }


export const getGetUniverseStargatesStargateIdKey = (stargateId: number,
    params?: GetUniverseStargatesStargateIdParams,) => [`/universe/stargates/${stargateId}/`, ...(params ? [params]: [])];

    
export type GetUniverseStargatesStargateIdQueryResult = NonNullable<Awaited<ReturnType<typeof getUniverseStargatesStargateId>>>
export type GetUniverseStargatesStargateIdQueryError = AxiosError<void | BadRequest | GetUniverseStargatesStargateId404 | ErrorLimited | InternalServerError | ServiceUnavailable | GatewayTimeout>

export const useGetUniverseStargatesStargateId = <TError = AxiosError<void | BadRequest | GetUniverseStargatesStargateId404 | ErrorLimited | InternalServerError | ServiceUnavailable | GatewayTimeout>>(
 stargateId: number,
    params?: GetUniverseStargatesStargateIdParams, options?: { swr?:SWRConfiguration<Awaited<ReturnType<typeof getUniverseStargatesStargateId>>, TError> & { swrKey?: Key, enabled?: boolean }, axios?: AxiosRequestConfig }

  ) => {

  const {swr: swrOptions, axios: axiosOptions} = options ?? {}

  const isEnabled = swrOptions?.enabled !== false && !!(stargateId)
    const swrKey = swrOptions?.swrKey ?? (() => isEnabled ? getGetUniverseStargatesStargateIdKey(stargateId,params) : null);
  const swrFn = () => getUniverseStargatesStargateId(stargateId,params, axiosOptions);

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * Get information on a star

---
Alternate route: `/legacy/universe/stars/{star_id}/`

Alternate route: `/v1/universe/stars/{star_id}/`

---
This route expires daily at 11:05
 * @summary Get star information
 */
export const getUniverseStarsStarId = (
    starId: number,
    params?: GetUniverseStarsStarIdParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<GetUniverseStarsStarId200>> => {
    return axios.get(
      `/universe/stars/${starId}/`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }


export const getGetUniverseStarsStarIdKey = (starId: number,
    params?: GetUniverseStarsStarIdParams,) => [`/universe/stars/${starId}/`, ...(params ? [params]: [])];

    
export type GetUniverseStarsStarIdQueryResult = NonNullable<Awaited<ReturnType<typeof getUniverseStarsStarId>>>
export type GetUniverseStarsStarIdQueryError = AxiosError<void | BadRequest | ErrorLimited | InternalServerError | ServiceUnavailable | GatewayTimeout>

export const useGetUniverseStarsStarId = <TError = AxiosError<void | BadRequest | ErrorLimited | InternalServerError | ServiceUnavailable | GatewayTimeout>>(
 starId: number,
    params?: GetUniverseStarsStarIdParams, options?: { swr?:SWRConfiguration<Awaited<ReturnType<typeof getUniverseStarsStarId>>, TError> & { swrKey?: Key, enabled?: boolean }, axios?: AxiosRequestConfig }

  ) => {

  const {swr: swrOptions, axios: axiosOptions} = options ?? {}

  const isEnabled = swrOptions?.enabled !== false && !!(starId)
    const swrKey = swrOptions?.swrKey ?? (() => isEnabled ? getGetUniverseStarsStarIdKey(starId,params) : null);
  const swrFn = () => getUniverseStarsStarId(starId,params, axiosOptions);

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * Get information on a station

---
Alternate route: `/dev/universe/stations/{station_id}/`

Alternate route: `/v2/universe/stations/{station_id}/`

---
This route expires daily at 11:05
 * @summary Get station information
 */
export const getUniverseStationsStationId = (
    stationId: number,
    params?: GetUniverseStationsStationIdParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<GetUniverseStationsStationId200>> => {
    return axios.get(
      `/universe/stations/${stationId}/`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }


export const getGetUniverseStationsStationIdKey = (stationId: number,
    params?: GetUniverseStationsStationIdParams,) => [`/universe/stations/${stationId}/`, ...(params ? [params]: [])];

    
export type GetUniverseStationsStationIdQueryResult = NonNullable<Awaited<ReturnType<typeof getUniverseStationsStationId>>>
export type GetUniverseStationsStationIdQueryError = AxiosError<void | BadRequest | GetUniverseStationsStationId404 | ErrorLimited | InternalServerError | ServiceUnavailable | GatewayTimeout>

export const useGetUniverseStationsStationId = <TError = AxiosError<void | BadRequest | GetUniverseStationsStationId404 | ErrorLimited | InternalServerError | ServiceUnavailable | GatewayTimeout>>(
 stationId: number,
    params?: GetUniverseStationsStationIdParams, options?: { swr?:SWRConfiguration<Awaited<ReturnType<typeof getUniverseStationsStationId>>, TError> & { swrKey?: Key, enabled?: boolean }, axios?: AxiosRequestConfig }

  ) => {

  const {swr: swrOptions, axios: axiosOptions} = options ?? {}

  const isEnabled = swrOptions?.enabled !== false && !!(stationId)
    const swrKey = swrOptions?.swrKey ?? (() => isEnabled ? getGetUniverseStationsStationIdKey(stationId,params) : null);
  const swrFn = () => getUniverseStationsStationId(stationId,params, axiosOptions);

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * List all public structures

---
Alternate route: `/dev/universe/structures/`

Alternate route: `/legacy/universe/structures/`

Alternate route: `/v1/universe/structures/`

---
This route is cached for up to 3600 seconds
 * @summary List all public structures
 */
export const getUniverseStructures = (
    params?: GetUniverseStructuresParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<number[]>> => {
    return axios.get(
      `/universe/structures/`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }


export const getGetUniverseStructuresKey = (params?: GetUniverseStructuresParams,) => [`/universe/structures/`, ...(params ? [params]: [])];

    
export type GetUniverseStructuresQueryResult = NonNullable<Awaited<ReturnType<typeof getUniverseStructures>>>
export type GetUniverseStructuresQueryError = AxiosError<void | BadRequest | ErrorLimited | InternalServerError | ServiceUnavailable | GatewayTimeout>

export const useGetUniverseStructures = <TError = AxiosError<void | BadRequest | ErrorLimited | InternalServerError | ServiceUnavailable | GatewayTimeout>>(
 params?: GetUniverseStructuresParams, options?: { swr?:SWRConfiguration<Awaited<ReturnType<typeof getUniverseStructures>>, TError> & { swrKey?: Key, enabled?: boolean }, axios?: AxiosRequestConfig }

  ) => {

  const {swr: swrOptions, axios: axiosOptions} = options ?? {}

  const isEnabled = swrOptions?.enabled !== false
    const swrKey = swrOptions?.swrKey ?? (() => isEnabled ? getGetUniverseStructuresKey(params) : null);
  const swrFn = () => getUniverseStructures(params, axiosOptions);

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * Returns information on requested structure if you are on the ACL. Otherwise, returns "Forbidden" for all inputs.

---
Alternate route: `/v2/universe/structures/{structure_id}/`

---
This route is cached for up to 3600 seconds
 * @summary Get structure information
 */
export const getUniverseStructuresStructureId = (
    structureId: number,
    params?: GetUniverseStructuresStructureIdParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<GetUniverseStructuresStructureId200>> => {
    return axios.get(
      `/universe/structures/${structureId}/`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }


export const getGetUniverseStructuresStructureIdKey = (structureId: number,
    params?: GetUniverseStructuresStructureIdParams,) => [`/universe/structures/${structureId}/`, ...(params ? [params]: [])];

    
export type GetUniverseStructuresStructureIdQueryResult = NonNullable<Awaited<ReturnType<typeof getUniverseStructuresStructureId>>>
export type GetUniverseStructuresStructureIdQueryError = AxiosError<void | BadRequest | Unauthorized | Forbidden | GetUniverseStructuresStructureId404 | ErrorLimited | InternalServerError | ServiceUnavailable | GatewayTimeout>

export const useGetUniverseStructuresStructureId = <TError = AxiosError<void | BadRequest | Unauthorized | Forbidden | GetUniverseStructuresStructureId404 | ErrorLimited | InternalServerError | ServiceUnavailable | GatewayTimeout>>(
 structureId: number,
    params?: GetUniverseStructuresStructureIdParams, options?: { swr?:SWRConfiguration<Awaited<ReturnType<typeof getUniverseStructuresStructureId>>, TError> & { swrKey?: Key, enabled?: boolean }, axios?: AxiosRequestConfig }

  ) => {

  const {swr: swrOptions, axios: axiosOptions} = options ?? {}

  const isEnabled = swrOptions?.enabled !== false && !!(structureId)
    const swrKey = swrOptions?.swrKey ?? (() => isEnabled ? getGetUniverseStructuresStructureIdKey(structureId,params) : null);
  const swrFn = () => getUniverseStructuresStructureId(structureId,params, axiosOptions);

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * Get the number of jumps in solar systems within the last hour ending at the timestamp of the Last-Modified header, excluding wormhole space. Only systems with jumps will be listed

---
Alternate route: `/legacy/universe/system_jumps/`

Alternate route: `/v1/universe/system_jumps/`

---
This route is cached for up to 3600 seconds
 * @summary Get system jumps
 */
export const getUniverseSystemJumps = (
    params?: GetUniverseSystemJumpsParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<GetUniverseSystemJumps200Item[]>> => {
    return axios.get(
      `/universe/system_jumps/`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }


export const getGetUniverseSystemJumpsKey = (params?: GetUniverseSystemJumpsParams,) => [`/universe/system_jumps/`, ...(params ? [params]: [])];

    
export type GetUniverseSystemJumpsQueryResult = NonNullable<Awaited<ReturnType<typeof getUniverseSystemJumps>>>
export type GetUniverseSystemJumpsQueryError = AxiosError<void | BadRequest | ErrorLimited | InternalServerError | ServiceUnavailable | GatewayTimeout>

export const useGetUniverseSystemJumps = <TError = AxiosError<void | BadRequest | ErrorLimited | InternalServerError | ServiceUnavailable | GatewayTimeout>>(
 params?: GetUniverseSystemJumpsParams, options?: { swr?:SWRConfiguration<Awaited<ReturnType<typeof getUniverseSystemJumps>>, TError> & { swrKey?: Key, enabled?: boolean }, axios?: AxiosRequestConfig }

  ) => {

  const {swr: swrOptions, axios: axiosOptions} = options ?? {}

  const isEnabled = swrOptions?.enabled !== false
    const swrKey = swrOptions?.swrKey ?? (() => isEnabled ? getGetUniverseSystemJumpsKey(params) : null);
  const swrFn = () => getUniverseSystemJumps(params, axiosOptions);

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * Get the number of ship, pod and NPC kills per solar system within the last hour ending at the timestamp of the Last-Modified header, excluding wormhole space. Only systems with kills will be listed

---
Alternate route: `/v2/universe/system_kills/`

---
This route is cached for up to 3600 seconds
 * @summary Get system kills
 */
export const getUniverseSystemKills = (
    params?: GetUniverseSystemKillsParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<GetUniverseSystemKills200Item[]>> => {
    return axios.get(
      `/universe/system_kills/`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }


export const getGetUniverseSystemKillsKey = (params?: GetUniverseSystemKillsParams,) => [`/universe/system_kills/`, ...(params ? [params]: [])];

    
export type GetUniverseSystemKillsQueryResult = NonNullable<Awaited<ReturnType<typeof getUniverseSystemKills>>>
export type GetUniverseSystemKillsQueryError = AxiosError<void | BadRequest | ErrorLimited | InternalServerError | ServiceUnavailable | GatewayTimeout>

export const useGetUniverseSystemKills = <TError = AxiosError<void | BadRequest | ErrorLimited | InternalServerError | ServiceUnavailable | GatewayTimeout>>(
 params?: GetUniverseSystemKillsParams, options?: { swr?:SWRConfiguration<Awaited<ReturnType<typeof getUniverseSystemKills>>, TError> & { swrKey?: Key, enabled?: boolean }, axios?: AxiosRequestConfig }

  ) => {

  const {swr: swrOptions, axios: axiosOptions} = options ?? {}

  const isEnabled = swrOptions?.enabled !== false
    const swrKey = swrOptions?.swrKey ?? (() => isEnabled ? getGetUniverseSystemKillsKey(params) : null);
  const swrFn = () => getUniverseSystemKills(params, axiosOptions);

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * Get a list of solar systems

---
Alternate route: `/dev/universe/systems/`

Alternate route: `/legacy/universe/systems/`

Alternate route: `/v1/universe/systems/`

---
This route expires daily at 11:05
 * @summary Get solar systems
 */
export const getUniverseSystems = (
    params?: GetUniverseSystemsParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<number[]>> => {
    return axios.get(
      `/universe/systems/`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }


export const getGetUniverseSystemsKey = (params?: GetUniverseSystemsParams,) => [`/universe/systems/`, ...(params ? [params]: [])];

    
export type GetUniverseSystemsQueryResult = NonNullable<Awaited<ReturnType<typeof getUniverseSystems>>>
export type GetUniverseSystemsQueryError = AxiosError<void | BadRequest | ErrorLimited | InternalServerError | ServiceUnavailable | GatewayTimeout>

export const useGetUniverseSystems = <TError = AxiosError<void | BadRequest | ErrorLimited | InternalServerError | ServiceUnavailable | GatewayTimeout>>(
 params?: GetUniverseSystemsParams, options?: { swr?:SWRConfiguration<Awaited<ReturnType<typeof getUniverseSystems>>, TError> & { swrKey?: Key, enabled?: boolean }, axios?: AxiosRequestConfig }

  ) => {

  const {swr: swrOptions, axios: axiosOptions} = options ?? {}

  const isEnabled = swrOptions?.enabled !== false
    const swrKey = swrOptions?.swrKey ?? (() => isEnabled ? getGetUniverseSystemsKey(params) : null);
  const swrFn = () => getUniverseSystems(params, axiosOptions);

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * Get information on a solar system.

---
Alternate route: `/dev/universe/systems/{system_id}/`

Alternate route: `/v4/universe/systems/{system_id}/`

---
This route expires daily at 11:05
 * @summary Get solar system information
 */
export const getUniverseSystemsSystemId = (
    systemId: number,
    params?: GetUniverseSystemsSystemIdParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<GetUniverseSystemsSystemId200>> => {
    return axios.get(
      `/universe/systems/${systemId}/`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }


export const getGetUniverseSystemsSystemIdKey = (systemId: number,
    params?: GetUniverseSystemsSystemIdParams,) => [`/universe/systems/${systemId}/`, ...(params ? [params]: [])];

    
export type GetUniverseSystemsSystemIdQueryResult = NonNullable<Awaited<ReturnType<typeof getUniverseSystemsSystemId>>>
export type GetUniverseSystemsSystemIdQueryError = AxiosError<void | BadRequest | GetUniverseSystemsSystemId404 | ErrorLimited | InternalServerError | ServiceUnavailable | GatewayTimeout>

export const useGetUniverseSystemsSystemId = <TError = AxiosError<void | BadRequest | GetUniverseSystemsSystemId404 | ErrorLimited | InternalServerError | ServiceUnavailable | GatewayTimeout>>(
 systemId: number,
    params?: GetUniverseSystemsSystemIdParams, options?: { swr?:SWRConfiguration<Awaited<ReturnType<typeof getUniverseSystemsSystemId>>, TError> & { swrKey?: Key, enabled?: boolean }, axios?: AxiosRequestConfig }

  ) => {

  const {swr: swrOptions, axios: axiosOptions} = options ?? {}

  const isEnabled = swrOptions?.enabled !== false && !!(systemId)
    const swrKey = swrOptions?.swrKey ?? (() => isEnabled ? getGetUniverseSystemsSystemIdKey(systemId,params) : null);
  const swrFn = () => getUniverseSystemsSystemId(systemId,params, axiosOptions);

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * Get a list of type ids

---
Alternate route: `/legacy/universe/types/`

Alternate route: `/v1/universe/types/`

---
This route expires daily at 11:05
 * @summary Get types
 */
export const getUniverseTypes = (
    params?: GetUniverseTypesParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<number[]>> => {
    return axios.get(
      `/universe/types/`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }


export const getGetUniverseTypesKey = (params?: GetUniverseTypesParams,) => [`/universe/types/`, ...(params ? [params]: [])];

    
export type GetUniverseTypesQueryResult = NonNullable<Awaited<ReturnType<typeof getUniverseTypes>>>
export type GetUniverseTypesQueryError = AxiosError<void | BadRequest | ErrorLimited | InternalServerError | ServiceUnavailable | GatewayTimeout>

export const useGetUniverseTypes = <TError = AxiosError<void | BadRequest | ErrorLimited | InternalServerError | ServiceUnavailable | GatewayTimeout>>(
 params?: GetUniverseTypesParams, options?: { swr?:SWRConfiguration<Awaited<ReturnType<typeof getUniverseTypes>>, TError> & { swrKey?: Key, enabled?: boolean }, axios?: AxiosRequestConfig }

  ) => {

  const {swr: swrOptions, axios: axiosOptions} = options ?? {}

  const isEnabled = swrOptions?.enabled !== false
    const swrKey = swrOptions?.swrKey ?? (() => isEnabled ? getGetUniverseTypesKey(params) : null);
  const swrFn = () => getUniverseTypes(params, axiosOptions);

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * Get information on a type

---
Alternate route: `/dev/universe/types/{type_id}/`

Alternate route: `/v3/universe/types/{type_id}/`

---
This route expires daily at 11:05
 * @summary Get type information
 */
export const getUniverseTypesTypeId = (
    typeId: number,
    params?: GetUniverseTypesTypeIdParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<GetUniverseTypesTypeId200>> => {
    return axios.get(
      `/universe/types/${typeId}/`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }


export const getGetUniverseTypesTypeIdKey = (typeId: number,
    params?: GetUniverseTypesTypeIdParams,) => [`/universe/types/${typeId}/`, ...(params ? [params]: [])];

    
export type GetUniverseTypesTypeIdQueryResult = NonNullable<Awaited<ReturnType<typeof getUniverseTypesTypeId>>>
export type GetUniverseTypesTypeIdQueryError = AxiosError<void | BadRequest | GetUniverseTypesTypeId404 | ErrorLimited | InternalServerError | ServiceUnavailable | GatewayTimeout>

export const useGetUniverseTypesTypeId = <TError = AxiosError<void | BadRequest | GetUniverseTypesTypeId404 | ErrorLimited | InternalServerError | ServiceUnavailable | GatewayTimeout>>(
 typeId: number,
    params?: GetUniverseTypesTypeIdParams, options?: { swr?:SWRConfiguration<Awaited<ReturnType<typeof getUniverseTypesTypeId>>, TError> & { swrKey?: Key, enabled?: boolean }, axios?: AxiosRequestConfig }

  ) => {

  const {swr: swrOptions, axios: axiosOptions} = options ?? {}

  const isEnabled = swrOptions?.enabled !== false && !!(typeId)
    const swrKey = swrOptions?.swrKey ?? (() => isEnabled ? getGetUniverseTypesTypeIdKey(typeId,params) : null);
  const swrFn = () => getUniverseTypesTypeId(typeId,params, axiosOptions);

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

