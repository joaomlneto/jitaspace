/**
 * Generated by orval v6.11.1 üç∫
 * Do not edit manually.
 * EVE Swagger Interface
 * An OpenAPI for EVE Online
 * OpenAPI spec version: 1.17
 */
import axios from 'axios'
import type {
  AxiosRequestConfig,
  AxiosResponse,
  AxiosError
} from 'axios'
import useSwr from 'swr'
import type {
  SWRConfiguration,
  Key
} from 'swr'
import type {
  BadRequest,
  ErrorLimited,
  InternalServerError,
  ServiceUnavailable,
  GatewayTimeout,
  GetAlliancesParams,
  GetAlliancesAllianceId200,
  GetAlliancesAllianceId404,
  GetAlliancesAllianceIdParams,
  GetAlliancesAllianceIdCorporationsParams,
  GetAlliancesAllianceIdIcons200,
  GetAlliancesAllianceIdIcons404,
  GetAlliancesAllianceIdIconsParams
} from './model'



  
  /**
 * List all active player alliances

---
Alternate route: `/dev/alliances/`

Alternate route: `/legacy/alliances/`

Alternate route: `/v1/alliances/`

Alternate route: `/v2/alliances/`

---
This route is cached for up to 3600 seconds
 * @summary List all alliances
 */
export const getAlliances = (
    params?: GetAlliancesParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<number[]>> => {
    return axios.get(
      `/alliances/`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }


export const getGetAlliancesKey = (params?: GetAlliancesParams,) => [`/alliances/`, ...(params ? [params]: [])];

    
export type GetAlliancesQueryResult = NonNullable<Awaited<ReturnType<typeof getAlliances>>>
export type GetAlliancesQueryError = AxiosError<void | BadRequest | ErrorLimited | InternalServerError | ServiceUnavailable | GatewayTimeout>

export const useGetAlliances = <TError = AxiosError<void | BadRequest | ErrorLimited | InternalServerError | ServiceUnavailable | GatewayTimeout>>(
 params?: GetAlliancesParams, options?: { swr?:SWRConfiguration<Awaited<ReturnType<typeof getAlliances>>, TError> & { swrKey?: Key, enabled?: boolean }, axios?: AxiosRequestConfig }

  ) => {

  const {swr: swrOptions, axios: axiosOptions} = options ?? {}

  const isEnabled = swrOptions?.enabled !== false
    const swrKey = swrOptions?.swrKey ?? (() => isEnabled ? getGetAlliancesKey(params) : null);
  const swrFn = () => getAlliances(params, axiosOptions);

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * Public information about an alliance

---
Alternate route: `/dev/alliances/{alliance_id}/`

Alternate route: `/legacy/alliances/{alliance_id}/`

Alternate route: `/v3/alliances/{alliance_id}/`

Alternate route: `/v4/alliances/{alliance_id}/`

---
This route is cached for up to 3600 seconds
 * @summary Get alliance information
 */
export const getAlliancesAllianceId = (
    allianceId: number,
    params?: GetAlliancesAllianceIdParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<GetAlliancesAllianceId200>> => {
    return axios.get(
      `/alliances/${allianceId}/`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }


export const getGetAlliancesAllianceIdKey = (allianceId: number,
    params?: GetAlliancesAllianceIdParams,) => [`/alliances/${allianceId}/`, ...(params ? [params]: [])];

    
export type GetAlliancesAllianceIdQueryResult = NonNullable<Awaited<ReturnType<typeof getAlliancesAllianceId>>>
export type GetAlliancesAllianceIdQueryError = AxiosError<void | BadRequest | GetAlliancesAllianceId404 | ErrorLimited | InternalServerError | ServiceUnavailable | GatewayTimeout>

export const useGetAlliancesAllianceId = <TError = AxiosError<void | BadRequest | GetAlliancesAllianceId404 | ErrorLimited | InternalServerError | ServiceUnavailable | GatewayTimeout>>(
 allianceId: number,
    params?: GetAlliancesAllianceIdParams, options?: { swr?:SWRConfiguration<Awaited<ReturnType<typeof getAlliancesAllianceId>>, TError> & { swrKey?: Key, enabled?: boolean }, axios?: AxiosRequestConfig }

  ) => {

  const {swr: swrOptions, axios: axiosOptions} = options ?? {}

  const isEnabled = swrOptions?.enabled !== false && !!(allianceId)
    const swrKey = swrOptions?.swrKey ?? (() => isEnabled ? getGetAlliancesAllianceIdKey(allianceId,params) : null);
  const swrFn = () => getAlliancesAllianceId(allianceId,params, axiosOptions);

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * List all current member corporations of an alliance

---
Alternate route: `/dev/alliances/{alliance_id}/corporations/`

Alternate route: `/legacy/alliances/{alliance_id}/corporations/`

Alternate route: `/v1/alliances/{alliance_id}/corporations/`

Alternate route: `/v2/alliances/{alliance_id}/corporations/`

---
This route is cached for up to 3600 seconds
 * @summary List alliance's corporations
 */
export const getAlliancesAllianceIdCorporations = (
    allianceId: number,
    params?: GetAlliancesAllianceIdCorporationsParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<number[]>> => {
    return axios.get(
      `/alliances/${allianceId}/corporations/`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }


export const getGetAlliancesAllianceIdCorporationsKey = (allianceId: number,
    params?: GetAlliancesAllianceIdCorporationsParams,) => [`/alliances/${allianceId}/corporations/`, ...(params ? [params]: [])];

    
export type GetAlliancesAllianceIdCorporationsQueryResult = NonNullable<Awaited<ReturnType<typeof getAlliancesAllianceIdCorporations>>>
export type GetAlliancesAllianceIdCorporationsQueryError = AxiosError<void | BadRequest | ErrorLimited | InternalServerError | ServiceUnavailable | GatewayTimeout>

export const useGetAlliancesAllianceIdCorporations = <TError = AxiosError<void | BadRequest | ErrorLimited | InternalServerError | ServiceUnavailable | GatewayTimeout>>(
 allianceId: number,
    params?: GetAlliancesAllianceIdCorporationsParams, options?: { swr?:SWRConfiguration<Awaited<ReturnType<typeof getAlliancesAllianceIdCorporations>>, TError> & { swrKey?: Key, enabled?: boolean }, axios?: AxiosRequestConfig }

  ) => {

  const {swr: swrOptions, axios: axiosOptions} = options ?? {}

  const isEnabled = swrOptions?.enabled !== false && !!(allianceId)
    const swrKey = swrOptions?.swrKey ?? (() => isEnabled ? getGetAlliancesAllianceIdCorporationsKey(allianceId,params) : null);
  const swrFn = () => getAlliancesAllianceIdCorporations(allianceId,params, axiosOptions);

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * Get the icon urls for a alliance

---
Alternate route: `/legacy/alliances/{alliance_id}/icons/`

Alternate route: `/v1/alliances/{alliance_id}/icons/`

---
This route expires daily at 11:05

---
[Diff of the upcoming changes](https://esi.evetech.net/diff/latest/dev/#GET-/alliances/{alliance_id}/icons/)
 * @summary Get alliance icon
 */
export const getAlliancesAllianceIdIcons = (
    allianceId: number,
    params?: GetAlliancesAllianceIdIconsParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<GetAlliancesAllianceIdIcons200>> => {
    return axios.get(
      `/alliances/${allianceId}/icons/`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }


export const getGetAlliancesAllianceIdIconsKey = (allianceId: number,
    params?: GetAlliancesAllianceIdIconsParams,) => [`/alliances/${allianceId}/icons/`, ...(params ? [params]: [])];

    
export type GetAlliancesAllianceIdIconsQueryResult = NonNullable<Awaited<ReturnType<typeof getAlliancesAllianceIdIcons>>>
export type GetAlliancesAllianceIdIconsQueryError = AxiosError<void | BadRequest | GetAlliancesAllianceIdIcons404 | ErrorLimited | InternalServerError | ServiceUnavailable | GatewayTimeout>

export const useGetAlliancesAllianceIdIcons = <TError = AxiosError<void | BadRequest | GetAlliancesAllianceIdIcons404 | ErrorLimited | InternalServerError | ServiceUnavailable | GatewayTimeout>>(
 allianceId: number,
    params?: GetAlliancesAllianceIdIconsParams, options?: { swr?:SWRConfiguration<Awaited<ReturnType<typeof getAlliancesAllianceIdIcons>>, TError> & { swrKey?: Key, enabled?: boolean }, axios?: AxiosRequestConfig }

  ) => {

  const {swr: swrOptions, axios: axiosOptions} = options ?? {}

  const isEnabled = swrOptions?.enabled !== false && !!(allianceId)
    const swrKey = swrOptions?.swrKey ?? (() => isEnabled ? getGetAlliancesAllianceIdIconsKey(allianceId,params) : null);
  const swrFn = () => getAlliancesAllianceIdIcons(allianceId,params, axiosOptions);

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

