/**
 * Generated by orval v6.11.1 üç∫
 * Do not edit manually.
 * EVE Swagger Interface
 * An OpenAPI for EVE Online
 * OpenAPI spec version: 1.17
 */
import axios from 'axios'
import type {
  AxiosRequestConfig,
  AxiosResponse,
  AxiosError
} from 'axios'
import useSwr from 'swr'
import type {
  SWRConfiguration,
  Key
} from 'swr'
import type {
  GetCharactersCharacterIdPlanets200Item,
  BadRequest,
  Unauthorized,
  Forbidden,
  ErrorLimited,
  InternalServerError,
  ServiceUnavailable,
  GatewayTimeout,
  GetCharactersCharacterIdPlanetsParams,
  GetCharactersCharacterIdPlanetsPlanetId200,
  GetCharactersCharacterIdPlanetsPlanetId404,
  GetCharactersCharacterIdPlanetsPlanetIdParams,
  GetCorporationsCorporationIdCustomsOffices200Item,
  GetCorporationsCorporationIdCustomsOfficesParams,
  GetUniverseSchematicsSchematicId200,
  GetUniverseSchematicsSchematicId404,
  GetUniverseSchematicsSchematicIdParams
} from './model'



  
  /**
 * Returns a list of all planetary colonies owned by a character.

---
Alternate route: `/dev/characters/{character_id}/planets/`

Alternate route: `/legacy/characters/{character_id}/planets/`

Alternate route: `/v1/characters/{character_id}/planets/`

---
This route is cached for up to 600 seconds
 * @summary Get colonies
 */
export const getCharactersCharacterIdPlanets = (
    characterId: number,
    params?: GetCharactersCharacterIdPlanetsParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<GetCharactersCharacterIdPlanets200Item[]>> => {
    return axios.get(
      `/characters/${characterId}/planets/`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }


export const getGetCharactersCharacterIdPlanetsKey = (characterId: number,
    params?: GetCharactersCharacterIdPlanetsParams,) => [`/characters/${characterId}/planets/`, ...(params ? [params]: [])];

    
export type GetCharactersCharacterIdPlanetsQueryResult = NonNullable<Awaited<ReturnType<typeof getCharactersCharacterIdPlanets>>>
export type GetCharactersCharacterIdPlanetsQueryError = AxiosError<void | BadRequest | Unauthorized | Forbidden | ErrorLimited | InternalServerError | ServiceUnavailable | GatewayTimeout>

export const useGetCharactersCharacterIdPlanets = <TError = AxiosError<void | BadRequest | Unauthorized | Forbidden | ErrorLimited | InternalServerError | ServiceUnavailable | GatewayTimeout>>(
 characterId: number,
    params?: GetCharactersCharacterIdPlanetsParams, options?: { swr?:SWRConfiguration<Awaited<ReturnType<typeof getCharactersCharacterIdPlanets>>, TError> & { swrKey?: Key, enabled?: boolean }, axios?: AxiosRequestConfig }

  ) => {

  const {swr: swrOptions, axios: axiosOptions} = options ?? {}

  const isEnabled = swrOptions?.enabled !== false && !!(characterId)
    const swrKey = swrOptions?.swrKey ?? (() => isEnabled ? getGetCharactersCharacterIdPlanetsKey(characterId,params) : null);
  const swrFn = () => getCharactersCharacterIdPlanets(characterId,params, axiosOptions);

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * Returns full details on the layout of a single planetary colony, including links, pins and routes. Note: Planetary information is only recalculated when the colony is viewed through the client. Information will not update until this criteria is met.

---
Alternate route: `/dev/characters/{character_id}/planets/{planet_id}/`

Alternate route: `/v3/characters/{character_id}/planets/{planet_id}/`

 * @summary Get colony layout
 */
export const getCharactersCharacterIdPlanetsPlanetId = (
    characterId: number,
    planetId: number,
    params?: GetCharactersCharacterIdPlanetsPlanetIdParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<GetCharactersCharacterIdPlanetsPlanetId200>> => {
    return axios.get(
      `/characters/${characterId}/planets/${planetId}/`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }


export const getGetCharactersCharacterIdPlanetsPlanetIdKey = (characterId: number,
    planetId: number,
    params?: GetCharactersCharacterIdPlanetsPlanetIdParams,) => [`/characters/${characterId}/planets/${planetId}/`, ...(params ? [params]: [])];

    
export type GetCharactersCharacterIdPlanetsPlanetIdQueryResult = NonNullable<Awaited<ReturnType<typeof getCharactersCharacterIdPlanetsPlanetId>>>
export type GetCharactersCharacterIdPlanetsPlanetIdQueryError = AxiosError<BadRequest | Unauthorized | Forbidden | GetCharactersCharacterIdPlanetsPlanetId404 | ErrorLimited | InternalServerError | ServiceUnavailable | GatewayTimeout>

export const useGetCharactersCharacterIdPlanetsPlanetId = <TError = AxiosError<BadRequest | Unauthorized | Forbidden | GetCharactersCharacterIdPlanetsPlanetId404 | ErrorLimited | InternalServerError | ServiceUnavailable | GatewayTimeout>>(
 characterId: number,
    planetId: number,
    params?: GetCharactersCharacterIdPlanetsPlanetIdParams, options?: { swr?:SWRConfiguration<Awaited<ReturnType<typeof getCharactersCharacterIdPlanetsPlanetId>>, TError> & { swrKey?: Key, enabled?: boolean }, axios?: AxiosRequestConfig }

  ) => {

  const {swr: swrOptions, axios: axiosOptions} = options ?? {}

  const isEnabled = swrOptions?.enabled !== false && !!(characterId && planetId)
    const swrKey = swrOptions?.swrKey ?? (() => isEnabled ? getGetCharactersCharacterIdPlanetsPlanetIdKey(characterId,planetId,params) : null);
  const swrFn = () => getCharactersCharacterIdPlanetsPlanetId(characterId,planetId,params, axiosOptions);

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * List customs offices owned by a corporation

---
Alternate route: `/dev/corporations/{corporation_id}/customs_offices/`

Alternate route: `/legacy/corporations/{corporation_id}/customs_offices/`

Alternate route: `/v1/corporations/{corporation_id}/customs_offices/`

---
This route is cached for up to 3600 seconds

---
Requires one of the following EVE corporation role(s): Director

 * @summary List corporation customs offices
 */
export const getCorporationsCorporationIdCustomsOffices = (
    corporationId: number,
    params?: GetCorporationsCorporationIdCustomsOfficesParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<GetCorporationsCorporationIdCustomsOffices200Item[]>> => {
    return axios.get(
      `/corporations/${corporationId}/customs_offices/`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }


export const getGetCorporationsCorporationIdCustomsOfficesKey = (corporationId: number,
    params?: GetCorporationsCorporationIdCustomsOfficesParams,) => [`/corporations/${corporationId}/customs_offices/`, ...(params ? [params]: [])];

    
export type GetCorporationsCorporationIdCustomsOfficesQueryResult = NonNullable<Awaited<ReturnType<typeof getCorporationsCorporationIdCustomsOffices>>>
export type GetCorporationsCorporationIdCustomsOfficesQueryError = AxiosError<void | BadRequest | Unauthorized | Forbidden | ErrorLimited | InternalServerError | ServiceUnavailable | GatewayTimeout>

export const useGetCorporationsCorporationIdCustomsOffices = <TError = AxiosError<void | BadRequest | Unauthorized | Forbidden | ErrorLimited | InternalServerError | ServiceUnavailable | GatewayTimeout>>(
 corporationId: number,
    params?: GetCorporationsCorporationIdCustomsOfficesParams, options?: { swr?:SWRConfiguration<Awaited<ReturnType<typeof getCorporationsCorporationIdCustomsOffices>>, TError> & { swrKey?: Key, enabled?: boolean }, axios?: AxiosRequestConfig }

  ) => {

  const {swr: swrOptions, axios: axiosOptions} = options ?? {}

  const isEnabled = swrOptions?.enabled !== false && !!(corporationId)
    const swrKey = swrOptions?.swrKey ?? (() => isEnabled ? getGetCorporationsCorporationIdCustomsOfficesKey(corporationId,params) : null);
  const swrFn = () => getCorporationsCorporationIdCustomsOffices(corporationId,params, axiosOptions);

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * Get information on a planetary factory schematic

---
Alternate route: `/dev/universe/schematics/{schematic_id}/`

Alternate route: `/legacy/universe/schematics/{schematic_id}/`

Alternate route: `/v1/universe/schematics/{schematic_id}/`

---
This route is cached for up to 3600 seconds
 * @summary Get schematic information
 */
export const getUniverseSchematicsSchematicId = (
    schematicId: number,
    params?: GetUniverseSchematicsSchematicIdParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<GetUniverseSchematicsSchematicId200>> => {
    return axios.get(
      `/universe/schematics/${schematicId}/`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }


export const getGetUniverseSchematicsSchematicIdKey = (schematicId: number,
    params?: GetUniverseSchematicsSchematicIdParams,) => [`/universe/schematics/${schematicId}/`, ...(params ? [params]: [])];

    
export type GetUniverseSchematicsSchematicIdQueryResult = NonNullable<Awaited<ReturnType<typeof getUniverseSchematicsSchematicId>>>
export type GetUniverseSchematicsSchematicIdQueryError = AxiosError<void | BadRequest | GetUniverseSchematicsSchematicId404 | ErrorLimited | InternalServerError | ServiceUnavailable | GatewayTimeout>

export const useGetUniverseSchematicsSchematicId = <TError = AxiosError<void | BadRequest | GetUniverseSchematicsSchematicId404 | ErrorLimited | InternalServerError | ServiceUnavailable | GatewayTimeout>>(
 schematicId: number,
    params?: GetUniverseSchematicsSchematicIdParams, options?: { swr?:SWRConfiguration<Awaited<ReturnType<typeof getUniverseSchematicsSchematicId>>, TError> & { swrKey?: Key, enabled?: boolean }, axios?: AxiosRequestConfig }

  ) => {

  const {swr: swrOptions, axios: axiosOptions} = options ?? {}

  const isEnabled = swrOptions?.enabled !== false && !!(schematicId)
    const swrKey = swrOptions?.swrKey ?? (() => isEnabled ? getGetUniverseSchematicsSchematicIdKey(schematicId,params) : null);
  const swrFn = () => getUniverseSchematicsSchematicId(schematicId,params, axiosOptions);

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

