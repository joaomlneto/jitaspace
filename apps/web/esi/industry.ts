/**
 * Generated by orval v6.11.1 üç∫
 * Do not edit manually.
 * EVE Swagger Interface
 * An OpenAPI for EVE Online
 * OpenAPI spec version: 1.17
 */
import axios from 'axios'
import type {
  AxiosRequestConfig,
  AxiosResponse,
  AxiosError
} from 'axios'
import useSwr from 'swr'
import type {
  SWRConfiguration,
  Key
} from 'swr'
import type {
  GetCharactersCharacterIdIndustryJobs200Item,
  BadRequest,
  Unauthorized,
  Forbidden,
  ErrorLimited,
  InternalServerError,
  ServiceUnavailable,
  GatewayTimeout,
  GetCharactersCharacterIdIndustryJobsParams,
  GetCharactersCharacterIdMining200Item,
  GetCharactersCharacterIdMiningParams,
  GetCorporationCorporationIdMiningExtractions200Item,
  GetCorporationCorporationIdMiningExtractionsParams,
  GetCorporationCorporationIdMiningObservers200Item,
  GetCorporationCorporationIdMiningObserversParams,
  GetCorporationCorporationIdMiningObserversObserverId200Item,
  GetCorporationCorporationIdMiningObserversObserverIdParams,
  GetCorporationsCorporationIdIndustryJobs200Item,
  GetCorporationsCorporationIdIndustryJobsParams,
  GetIndustryFacilities200Item,
  GetIndustryFacilitiesParams,
  GetIndustrySystems200Item,
  GetIndustrySystemsParams
} from './model'



  
  /**
 * List industry jobs placed by a character

---
Alternate route: `/dev/characters/{character_id}/industry/jobs/`

Alternate route: `/legacy/characters/{character_id}/industry/jobs/`

Alternate route: `/v1/characters/{character_id}/industry/jobs/`

---
This route is cached for up to 300 seconds
 * @summary List character industry jobs
 */
export const getCharactersCharacterIdIndustryJobs = (
    characterId: number,
    params?: GetCharactersCharacterIdIndustryJobsParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<GetCharactersCharacterIdIndustryJobs200Item[]>> => {
    return axios.get(
      `/characters/${characterId}/industry/jobs/`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }


export const getGetCharactersCharacterIdIndustryJobsKey = (characterId: number,
    params?: GetCharactersCharacterIdIndustryJobsParams,) => [`/characters/${characterId}/industry/jobs/`, ...(params ? [params]: [])];

    
export type GetCharactersCharacterIdIndustryJobsQueryResult = NonNullable<Awaited<ReturnType<typeof getCharactersCharacterIdIndustryJobs>>>
export type GetCharactersCharacterIdIndustryJobsQueryError = AxiosError<void | BadRequest | Unauthorized | Forbidden | ErrorLimited | InternalServerError | ServiceUnavailable | GatewayTimeout>

export const useGetCharactersCharacterIdIndustryJobs = <TError = AxiosError<void | BadRequest | Unauthorized | Forbidden | ErrorLimited | InternalServerError | ServiceUnavailable | GatewayTimeout>>(
 characterId: number,
    params?: GetCharactersCharacterIdIndustryJobsParams, options?: { swr?:SWRConfiguration<Awaited<ReturnType<typeof getCharactersCharacterIdIndustryJobs>>, TError> & { swrKey?: Key, enabled?: boolean }, axios?: AxiosRequestConfig }

  ) => {

  const {swr: swrOptions, axios: axiosOptions} = options ?? {}

  const isEnabled = swrOptions?.enabled !== false && !!(characterId)
    const swrKey = swrOptions?.swrKey ?? (() => isEnabled ? getGetCharactersCharacterIdIndustryJobsKey(characterId,params) : null);
  const swrFn = () => getCharactersCharacterIdIndustryJobs(characterId,params, axiosOptions);

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * Paginated record of all mining done by a character for the past 30 days


---
Alternate route: `/dev/characters/{character_id}/mining/`

Alternate route: `/legacy/characters/{character_id}/mining/`

Alternate route: `/v1/characters/{character_id}/mining/`

---
This route is cached for up to 600 seconds
 * @summary Character mining ledger
 */
export const getCharactersCharacterIdMining = (
    characterId: number,
    params?: GetCharactersCharacterIdMiningParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<GetCharactersCharacterIdMining200Item[]>> => {
    return axios.get(
      `/characters/${characterId}/mining/`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }


export const getGetCharactersCharacterIdMiningKey = (characterId: number,
    params?: GetCharactersCharacterIdMiningParams,) => [`/characters/${characterId}/mining/`, ...(params ? [params]: [])];

    
export type GetCharactersCharacterIdMiningQueryResult = NonNullable<Awaited<ReturnType<typeof getCharactersCharacterIdMining>>>
export type GetCharactersCharacterIdMiningQueryError = AxiosError<void | BadRequest | Unauthorized | Forbidden | ErrorLimited | InternalServerError | ServiceUnavailable | GatewayTimeout>

export const useGetCharactersCharacterIdMining = <TError = AxiosError<void | BadRequest | Unauthorized | Forbidden | ErrorLimited | InternalServerError | ServiceUnavailable | GatewayTimeout>>(
 characterId: number,
    params?: GetCharactersCharacterIdMiningParams, options?: { swr?:SWRConfiguration<Awaited<ReturnType<typeof getCharactersCharacterIdMining>>, TError> & { swrKey?: Key, enabled?: boolean }, axios?: AxiosRequestConfig }

  ) => {

  const {swr: swrOptions, axios: axiosOptions} = options ?? {}

  const isEnabled = swrOptions?.enabled !== false && !!(characterId)
    const swrKey = swrOptions?.swrKey ?? (() => isEnabled ? getGetCharactersCharacterIdMiningKey(characterId,params) : null);
  const swrFn = () => getCharactersCharacterIdMining(characterId,params, axiosOptions);

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * Extraction timers for all moon chunks being extracted by refineries belonging to a corporation.


---
Alternate route: `/dev/corporation/{corporation_id}/mining/extractions/`

Alternate route: `/legacy/corporation/{corporation_id}/mining/extractions/`

Alternate route: `/v1/corporation/{corporation_id}/mining/extractions/`

---
This route is cached for up to 1800 seconds

---
Requires one of the following EVE corporation role(s): Station_Manager

 * @summary Moon extraction timers
 */
export const getCorporationCorporationIdMiningExtractions = (
    corporationId: number,
    params?: GetCorporationCorporationIdMiningExtractionsParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<GetCorporationCorporationIdMiningExtractions200Item[]>> => {
    return axios.get(
      `/corporation/${corporationId}/mining/extractions/`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }


export const getGetCorporationCorporationIdMiningExtractionsKey = (corporationId: number,
    params?: GetCorporationCorporationIdMiningExtractionsParams,) => [`/corporation/${corporationId}/mining/extractions/`, ...(params ? [params]: [])];

    
export type GetCorporationCorporationIdMiningExtractionsQueryResult = NonNullable<Awaited<ReturnType<typeof getCorporationCorporationIdMiningExtractions>>>
export type GetCorporationCorporationIdMiningExtractionsQueryError = AxiosError<void | BadRequest | Unauthorized | Forbidden | ErrorLimited | InternalServerError | ServiceUnavailable | GatewayTimeout>

export const useGetCorporationCorporationIdMiningExtractions = <TError = AxiosError<void | BadRequest | Unauthorized | Forbidden | ErrorLimited | InternalServerError | ServiceUnavailable | GatewayTimeout>>(
 corporationId: number,
    params?: GetCorporationCorporationIdMiningExtractionsParams, options?: { swr?:SWRConfiguration<Awaited<ReturnType<typeof getCorporationCorporationIdMiningExtractions>>, TError> & { swrKey?: Key, enabled?: boolean }, axios?: AxiosRequestConfig }

  ) => {

  const {swr: swrOptions, axios: axiosOptions} = options ?? {}

  const isEnabled = swrOptions?.enabled !== false && !!(corporationId)
    const swrKey = swrOptions?.swrKey ?? (() => isEnabled ? getGetCorporationCorporationIdMiningExtractionsKey(corporationId,params) : null);
  const swrFn = () => getCorporationCorporationIdMiningExtractions(corporationId,params, axiosOptions);

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * Paginated list of all entities capable of observing and recording mining for a corporation


---
Alternate route: `/dev/corporation/{corporation_id}/mining/observers/`

Alternate route: `/legacy/corporation/{corporation_id}/mining/observers/`

Alternate route: `/v1/corporation/{corporation_id}/mining/observers/`

---
This route is cached for up to 3600 seconds

---
Requires one of the following EVE corporation role(s): Accountant

 * @summary Corporation mining observers
 */
export const getCorporationCorporationIdMiningObservers = (
    corporationId: number,
    params?: GetCorporationCorporationIdMiningObserversParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<GetCorporationCorporationIdMiningObservers200Item[]>> => {
    return axios.get(
      `/corporation/${corporationId}/mining/observers/`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }


export const getGetCorporationCorporationIdMiningObserversKey = (corporationId: number,
    params?: GetCorporationCorporationIdMiningObserversParams,) => [`/corporation/${corporationId}/mining/observers/`, ...(params ? [params]: [])];

    
export type GetCorporationCorporationIdMiningObserversQueryResult = NonNullable<Awaited<ReturnType<typeof getCorporationCorporationIdMiningObservers>>>
export type GetCorporationCorporationIdMiningObserversQueryError = AxiosError<void | BadRequest | Unauthorized | Forbidden | ErrorLimited | InternalServerError | ServiceUnavailable | GatewayTimeout>

export const useGetCorporationCorporationIdMiningObservers = <TError = AxiosError<void | BadRequest | Unauthorized | Forbidden | ErrorLimited | InternalServerError | ServiceUnavailable | GatewayTimeout>>(
 corporationId: number,
    params?: GetCorporationCorporationIdMiningObserversParams, options?: { swr?:SWRConfiguration<Awaited<ReturnType<typeof getCorporationCorporationIdMiningObservers>>, TError> & { swrKey?: Key, enabled?: boolean }, axios?: AxiosRequestConfig }

  ) => {

  const {swr: swrOptions, axios: axiosOptions} = options ?? {}

  const isEnabled = swrOptions?.enabled !== false && !!(corporationId)
    const swrKey = swrOptions?.swrKey ?? (() => isEnabled ? getGetCorporationCorporationIdMiningObserversKey(corporationId,params) : null);
  const swrFn = () => getCorporationCorporationIdMiningObservers(corporationId,params, axiosOptions);

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * Paginated record of all mining seen by an observer


---
Alternate route: `/dev/corporation/{corporation_id}/mining/observers/{observer_id}/`

Alternate route: `/legacy/corporation/{corporation_id}/mining/observers/{observer_id}/`

Alternate route: `/v1/corporation/{corporation_id}/mining/observers/{observer_id}/`

---
This route is cached for up to 3600 seconds

---
Requires one of the following EVE corporation role(s): Accountant

 * @summary Observed corporation mining
 */
export const getCorporationCorporationIdMiningObserversObserverId = (
    corporationId: number,
    observerId: number,
    params?: GetCorporationCorporationIdMiningObserversObserverIdParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<GetCorporationCorporationIdMiningObserversObserverId200Item[]>> => {
    return axios.get(
      `/corporation/${corporationId}/mining/observers/${observerId}/`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }


export const getGetCorporationCorporationIdMiningObserversObserverIdKey = (corporationId: number,
    observerId: number,
    params?: GetCorporationCorporationIdMiningObserversObserverIdParams,) => [`/corporation/${corporationId}/mining/observers/${observerId}/`, ...(params ? [params]: [])];

    
export type GetCorporationCorporationIdMiningObserversObserverIdQueryResult = NonNullable<Awaited<ReturnType<typeof getCorporationCorporationIdMiningObserversObserverId>>>
export type GetCorporationCorporationIdMiningObserversObserverIdQueryError = AxiosError<void | BadRequest | Unauthorized | Forbidden | ErrorLimited | InternalServerError | ServiceUnavailable | GatewayTimeout>

export const useGetCorporationCorporationIdMiningObserversObserverId = <TError = AxiosError<void | BadRequest | Unauthorized | Forbidden | ErrorLimited | InternalServerError | ServiceUnavailable | GatewayTimeout>>(
 corporationId: number,
    observerId: number,
    params?: GetCorporationCorporationIdMiningObserversObserverIdParams, options?: { swr?:SWRConfiguration<Awaited<ReturnType<typeof getCorporationCorporationIdMiningObserversObserverId>>, TError> & { swrKey?: Key, enabled?: boolean }, axios?: AxiosRequestConfig }

  ) => {

  const {swr: swrOptions, axios: axiosOptions} = options ?? {}

  const isEnabled = swrOptions?.enabled !== false && !!(corporationId && observerId)
    const swrKey = swrOptions?.swrKey ?? (() => isEnabled ? getGetCorporationCorporationIdMiningObserversObserverIdKey(corporationId,observerId,params) : null);
  const swrFn = () => getCorporationCorporationIdMiningObserversObserverId(corporationId,observerId,params, axiosOptions);

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * List industry jobs run by a corporation

---
Alternate route: `/dev/corporations/{corporation_id}/industry/jobs/`

Alternate route: `/legacy/corporations/{corporation_id}/industry/jobs/`

Alternate route: `/v1/corporations/{corporation_id}/industry/jobs/`

---
This route is cached for up to 300 seconds

---
Requires one of the following EVE corporation role(s): Factory_Manager

 * @summary List corporation industry jobs
 */
export const getCorporationsCorporationIdIndustryJobs = (
    corporationId: number,
    params?: GetCorporationsCorporationIdIndustryJobsParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<GetCorporationsCorporationIdIndustryJobs200Item[]>> => {
    return axios.get(
      `/corporations/${corporationId}/industry/jobs/`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }


export const getGetCorporationsCorporationIdIndustryJobsKey = (corporationId: number,
    params?: GetCorporationsCorporationIdIndustryJobsParams,) => [`/corporations/${corporationId}/industry/jobs/`, ...(params ? [params]: [])];

    
export type GetCorporationsCorporationIdIndustryJobsQueryResult = NonNullable<Awaited<ReturnType<typeof getCorporationsCorporationIdIndustryJobs>>>
export type GetCorporationsCorporationIdIndustryJobsQueryError = AxiosError<void | BadRequest | Unauthorized | Forbidden | ErrorLimited | InternalServerError | ServiceUnavailable | GatewayTimeout>

export const useGetCorporationsCorporationIdIndustryJobs = <TError = AxiosError<void | BadRequest | Unauthorized | Forbidden | ErrorLimited | InternalServerError | ServiceUnavailable | GatewayTimeout>>(
 corporationId: number,
    params?: GetCorporationsCorporationIdIndustryJobsParams, options?: { swr?:SWRConfiguration<Awaited<ReturnType<typeof getCorporationsCorporationIdIndustryJobs>>, TError> & { swrKey?: Key, enabled?: boolean }, axios?: AxiosRequestConfig }

  ) => {

  const {swr: swrOptions, axios: axiosOptions} = options ?? {}

  const isEnabled = swrOptions?.enabled !== false && !!(corporationId)
    const swrKey = swrOptions?.swrKey ?? (() => isEnabled ? getGetCorporationsCorporationIdIndustryJobsKey(corporationId,params) : null);
  const swrFn = () => getCorporationsCorporationIdIndustryJobs(corporationId,params, axiosOptions);

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * Return a list of industry facilities

---
Alternate route: `/dev/industry/facilities/`

Alternate route: `/legacy/industry/facilities/`

Alternate route: `/v1/industry/facilities/`

---
This route is cached for up to 3600 seconds
 * @summary List industry facilities
 */
export const getIndustryFacilities = (
    params?: GetIndustryFacilitiesParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<GetIndustryFacilities200Item[]>> => {
    return axios.get(
      `/industry/facilities/`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }


export const getGetIndustryFacilitiesKey = (params?: GetIndustryFacilitiesParams,) => [`/industry/facilities/`, ...(params ? [params]: [])];

    
export type GetIndustryFacilitiesQueryResult = NonNullable<Awaited<ReturnType<typeof getIndustryFacilities>>>
export type GetIndustryFacilitiesQueryError = AxiosError<void | BadRequest | ErrorLimited | InternalServerError | ServiceUnavailable | GatewayTimeout>

export const useGetIndustryFacilities = <TError = AxiosError<void | BadRequest | ErrorLimited | InternalServerError | ServiceUnavailable | GatewayTimeout>>(
 params?: GetIndustryFacilitiesParams, options?: { swr?:SWRConfiguration<Awaited<ReturnType<typeof getIndustryFacilities>>, TError> & { swrKey?: Key, enabled?: boolean }, axios?: AxiosRequestConfig }

  ) => {

  const {swr: swrOptions, axios: axiosOptions} = options ?? {}

  const isEnabled = swrOptions?.enabled !== false
    const swrKey = swrOptions?.swrKey ?? (() => isEnabled ? getGetIndustryFacilitiesKey(params) : null);
  const swrFn = () => getIndustryFacilities(params, axiosOptions);

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * Return cost indices for solar systems

---
Alternate route: `/dev/industry/systems/`

Alternate route: `/legacy/industry/systems/`

Alternate route: `/v1/industry/systems/`

---
This route is cached for up to 3600 seconds
 * @summary List solar system cost indices
 */
export const getIndustrySystems = (
    params?: GetIndustrySystemsParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<GetIndustrySystems200Item[]>> => {
    return axios.get(
      `/industry/systems/`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }


export const getGetIndustrySystemsKey = (params?: GetIndustrySystemsParams,) => [`/industry/systems/`, ...(params ? [params]: [])];

    
export type GetIndustrySystemsQueryResult = NonNullable<Awaited<ReturnType<typeof getIndustrySystems>>>
export type GetIndustrySystemsQueryError = AxiosError<void | BadRequest | ErrorLimited | InternalServerError | ServiceUnavailable | GatewayTimeout>

export const useGetIndustrySystems = <TError = AxiosError<void | BadRequest | ErrorLimited | InternalServerError | ServiceUnavailable | GatewayTimeout>>(
 params?: GetIndustrySystemsParams, options?: { swr?:SWRConfiguration<Awaited<ReturnType<typeof getIndustrySystems>>, TError> & { swrKey?: Key, enabled?: boolean }, axios?: AxiosRequestConfig }

  ) => {

  const {swr: swrOptions, axios: axiosOptions} = options ?? {}

  const isEnabled = swrOptions?.enabled !== false
    const swrKey = swrOptions?.swrKey ?? (() => isEnabled ? getGetIndustrySystemsKey(params) : null);
  const swrFn = () => getIndustrySystems(params, axiosOptions);

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

