/**
 * Generated by orval v6.11.1 üç∫
 * Do not edit manually.
 * EVE Swagger Interface
 * An OpenAPI for EVE Online
 * OpenAPI spec version: 1.17
 */
import type { AxiosError, AxiosRequestConfig, AxiosResponse } from "axios";
import axios from "axios";
import type { Key, SWRConfiguration } from "swr";
import useSwr from "swr";

import type {
  BadRequest,
  DeleteCharactersCharacterIdMailLabelsLabelIdParams,
  DeleteCharactersCharacterIdMailMailIdParams,
  ErrorLimited,
  Forbidden,
  GatewayTimeout,
  GetCharactersCharacterIdMail200Item,
  GetCharactersCharacterIdMailLabels200,
  GetCharactersCharacterIdMailLabelsParams,
  GetCharactersCharacterIdMailLists200Item,
  GetCharactersCharacterIdMailListsParams,
  GetCharactersCharacterIdMailMailId200,
  GetCharactersCharacterIdMailMailId404,
  GetCharactersCharacterIdMailMailIdParams,
  GetCharactersCharacterIdMailParams,
  InternalServerError,
  PostCharactersCharacterIdMailBody,
  PostCharactersCharacterIdMailLabelsBody,
  PostCharactersCharacterIdMailLabelsParams,
  PostCharactersCharacterIdMailParams,
  PutCharactersCharacterIdMailMailIdBody,
  PutCharactersCharacterIdMailMailIdParams,
  ServiceUnavailable,
  Unauthorized,
} from "./model";

/**
 * Return the 50 most recent mail headers belonging to the character that match the query criteria. Queries can be filtered by label, and last_mail_id can be used to paginate backwards

---
Alternate route: `/dev/characters/{character_id}/mail/`

Alternate route: `/legacy/characters/{character_id}/mail/`

Alternate route: `/v1/characters/{character_id}/mail/`

---
This route is cached for up to 30 seconds
 * @summary Return mail headers
 */
export const getCharactersCharacterIdMail = (
  characterId: number,
  params?: GetCharactersCharacterIdMailParams,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<GetCharactersCharacterIdMail200Item[]>> => {
  return axios.get(`/characters/${characterId}/mail/`, {
    ...options,
    params: { ...params, ...options?.params },
  });
};

export const getGetCharactersCharacterIdMailKey = (
  characterId: number,
  params?: GetCharactersCharacterIdMailParams,
) => [`/characters/${characterId}/mail/`, ...(params ? [params] : [])];

export type GetCharactersCharacterIdMailQueryResult = NonNullable<
  Awaited<ReturnType<typeof getCharactersCharacterIdMail>>
>;
export type GetCharactersCharacterIdMailQueryError = AxiosError<
  | void
  | BadRequest
  | Unauthorized
  | Forbidden
  | ErrorLimited
  | InternalServerError
  | ServiceUnavailable
  | GatewayTimeout
>;

export const useGetCharactersCharacterIdMail = <
  TError = AxiosError<
    | void
    | BadRequest
    | Unauthorized
    | Forbidden
    | ErrorLimited
    | InternalServerError
    | ServiceUnavailable
    | GatewayTimeout
  >,
>(
  characterId: number,
  params?: GetCharactersCharacterIdMailParams,
  options?: {
    swr?: SWRConfiguration<
      Awaited<ReturnType<typeof getCharactersCharacterIdMail>>,
      TError
    > & { swrKey?: Key; enabled?: boolean };
    axios?: AxiosRequestConfig;
  },
) => {
  const { swr: swrOptions, axios: axiosOptions } = options ?? {};

  const isEnabled = swrOptions?.enabled !== false && !!characterId;
  const swrKey =
    swrOptions?.swrKey ??
    (() =>
      isEnabled
        ? getGetCharactersCharacterIdMailKey(characterId, params)
        : null);
  const swrFn = () =>
    getCharactersCharacterIdMail(characterId, params, axiosOptions);

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(
    swrKey,
    swrFn,
    swrOptions,
  );

  return {
    swrKey,
    ...query,
  };
};

/**
 * Create and send a new mail

---
Alternate route: `/dev/characters/{character_id}/mail/`

Alternate route: `/legacy/characters/{character_id}/mail/`

Alternate route: `/v1/characters/{character_id}/mail/`

 * @summary Send a new mail
 */
export const postCharactersCharacterIdMail = (
  characterId: number,
  postCharactersCharacterIdMailBody: PostCharactersCharacterIdMailBody,
  params?: PostCharactersCharacterIdMailParams,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<number>> => {
  return axios.post(
    `/characters/${characterId}/mail/`,
    postCharactersCharacterIdMailBody,
    {
      ...options,
      params: { ...params, ...options?.params },
    },
  );
};

/**
 * Return a list of the users mail labels, unread counts for each label and a total unread count.

---
Alternate route: `/dev/characters/{character_id}/mail/labels/`

Alternate route: `/v3/characters/{character_id}/mail/labels/`

---
This route is cached for up to 30 seconds
 * @summary Get mail labels and unread counts
 */
export const getCharactersCharacterIdMailLabels = (
  characterId: number,
  params?: GetCharactersCharacterIdMailLabelsParams,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<GetCharactersCharacterIdMailLabels200>> => {
  return axios.get(`/characters/${characterId}/mail/labels/`, {
    ...options,
    params: { ...params, ...options?.params },
  });
};

export const getGetCharactersCharacterIdMailLabelsKey = (
  characterId: number,
  params?: GetCharactersCharacterIdMailLabelsParams,
) => [`/characters/${characterId}/mail/labels/`, ...(params ? [params] : [])];

export type GetCharactersCharacterIdMailLabelsQueryResult = NonNullable<
  Awaited<ReturnType<typeof getCharactersCharacterIdMailLabels>>
>;
export type GetCharactersCharacterIdMailLabelsQueryError = AxiosError<
  | void
  | BadRequest
  | Unauthorized
  | Forbidden
  | ErrorLimited
  | InternalServerError
  | ServiceUnavailable
  | GatewayTimeout
>;

export const useGetCharactersCharacterIdMailLabels = <
  TError = AxiosError<
    | void
    | BadRequest
    | Unauthorized
    | Forbidden
    | ErrorLimited
    | InternalServerError
    | ServiceUnavailable
    | GatewayTimeout
  >,
>(
  characterId: number,
  params?: GetCharactersCharacterIdMailLabelsParams,
  options?: {
    swr?: SWRConfiguration<
      Awaited<ReturnType<typeof getCharactersCharacterIdMailLabels>>,
      TError
    > & { swrKey?: Key; enabled?: boolean };
    axios?: AxiosRequestConfig;
  },
) => {
  const { swr: swrOptions, axios: axiosOptions } = options ?? {};

  const isEnabled = swrOptions?.enabled !== false && !!characterId;
  const swrKey =
    swrOptions?.swrKey ??
    (() =>
      isEnabled
        ? getGetCharactersCharacterIdMailLabelsKey(characterId, params)
        : null);
  const swrFn = () =>
    getCharactersCharacterIdMailLabels(characterId, params, axiosOptions);

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(
    swrKey,
    swrFn,
    swrOptions,
  );

  return {
    swrKey,
    ...query,
  };
};

/**
 * Create a mail label

---
Alternate route: `/dev/characters/{character_id}/mail/labels/`

Alternate route: `/legacy/characters/{character_id}/mail/labels/`

Alternate route: `/v2/characters/{character_id}/mail/labels/`

 * @summary Create a mail label
 */
export const postCharactersCharacterIdMailLabels = (
  characterId: number,
  postCharactersCharacterIdMailLabelsBody: PostCharactersCharacterIdMailLabelsBody,
  params?: PostCharactersCharacterIdMailLabelsParams,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<number>> => {
  return axios.post(
    `/characters/${characterId}/mail/labels/`,
    postCharactersCharacterIdMailLabelsBody,
    {
      ...options,
      params: { ...params, ...options?.params },
    },
  );
};

/**
 * Delete a mail label

---
Alternate route: `/dev/characters/{character_id}/mail/labels/{label_id}/`

Alternate route: `/legacy/characters/{character_id}/mail/labels/{label_id}/`

Alternate route: `/v1/characters/{character_id}/mail/labels/{label_id}/`

 * @summary Delete a mail label
 */
export const deleteCharactersCharacterIdMailLabelsLabelId = (
  characterId: number,
  labelId: number,
  params?: DeleteCharactersCharacterIdMailLabelsLabelIdParams,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<void>> => {
  return axios.delete(`/characters/${characterId}/mail/labels/${labelId}/`, {
    ...options,
    params: { ...params, ...options?.params },
  });
};

/**
 * Return all mailing lists that the character is subscribed to

---
Alternate route: `/dev/characters/{character_id}/mail/lists/`

Alternate route: `/legacy/characters/{character_id}/mail/lists/`

Alternate route: `/v1/characters/{character_id}/mail/lists/`

---
This route is cached for up to 120 seconds
 * @summary Return mailing list subscriptions
 */
export const getCharactersCharacterIdMailLists = (
  characterId: number,
  params?: GetCharactersCharacterIdMailListsParams,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<GetCharactersCharacterIdMailLists200Item[]>> => {
  return axios.get(`/characters/${characterId}/mail/lists/`, {
    ...options,
    params: { ...params, ...options?.params },
  });
};

export const getGetCharactersCharacterIdMailListsKey = (
  characterId: number,
  params?: GetCharactersCharacterIdMailListsParams,
) => [`/characters/${characterId}/mail/lists/`, ...(params ? [params] : [])];

export type GetCharactersCharacterIdMailListsQueryResult = NonNullable<
  Awaited<ReturnType<typeof getCharactersCharacterIdMailLists>>
>;
export type GetCharactersCharacterIdMailListsQueryError = AxiosError<
  | void
  | BadRequest
  | Unauthorized
  | Forbidden
  | ErrorLimited
  | InternalServerError
  | ServiceUnavailable
  | GatewayTimeout
>;

export const useGetCharactersCharacterIdMailLists = <
  TError = AxiosError<
    | void
    | BadRequest
    | Unauthorized
    | Forbidden
    | ErrorLimited
    | InternalServerError
    | ServiceUnavailable
    | GatewayTimeout
  >,
>(
  characterId: number,
  params?: GetCharactersCharacterIdMailListsParams,
  options?: {
    swr?: SWRConfiguration<
      Awaited<ReturnType<typeof getCharactersCharacterIdMailLists>>,
      TError
    > & { swrKey?: Key; enabled?: boolean };
    axios?: AxiosRequestConfig;
  },
) => {
  const { swr: swrOptions, axios: axiosOptions } = options ?? {};

  const isEnabled = swrOptions?.enabled !== false && !!characterId;
  const swrKey =
    swrOptions?.swrKey ??
    (() =>
      isEnabled
        ? getGetCharactersCharacterIdMailListsKey(characterId, params)
        : null);
  const swrFn = () =>
    getCharactersCharacterIdMailLists(characterId, params, axiosOptions);

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(
    swrKey,
    swrFn,
    swrOptions,
  );

  return {
    swrKey,
    ...query,
  };
};

/**
 * Delete a mail

---
Alternate route: `/dev/characters/{character_id}/mail/{mail_id}/`

Alternate route: `/legacy/characters/{character_id}/mail/{mail_id}/`

Alternate route: `/v1/characters/{character_id}/mail/{mail_id}/`

 * @summary Delete a mail
 */
export const deleteCharactersCharacterIdMailMailId = (
  characterId: number,
  mailId: number,
  params?: DeleteCharactersCharacterIdMailMailIdParams,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<void>> => {
  return axios.delete(`/characters/${characterId}/mail/${mailId}/`, {
    ...options,
    params: { ...params, ...options?.params },
  });
};

/**
 * Return the contents of an EVE mail

---
Alternate route: `/dev/characters/{character_id}/mail/{mail_id}/`

Alternate route: `/legacy/characters/{character_id}/mail/{mail_id}/`

Alternate route: `/v1/characters/{character_id}/mail/{mail_id}/`

---
This route is cached for up to 30 seconds
 * @summary Return a mail
 */
export const getCharactersCharacterIdMailMailId = (
  characterId: number,
  mailId: number,
  params?: GetCharactersCharacterIdMailMailIdParams,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<GetCharactersCharacterIdMailMailId200>> => {
  return axios.get(`/characters/${characterId}/mail/${mailId}/`, {
    ...options,
    params: { ...params, ...options?.params },
  });
};

export const getGetCharactersCharacterIdMailMailIdKey = (
  characterId: number,
  mailId: number,
  params?: GetCharactersCharacterIdMailMailIdParams,
) => [
  `/characters/${characterId}/mail/${mailId}/`,
  ...(params ? [params] : []),
];

export type GetCharactersCharacterIdMailMailIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof getCharactersCharacterIdMailMailId>>
>;
export type GetCharactersCharacterIdMailMailIdQueryError = AxiosError<
  | void
  | BadRequest
  | Unauthorized
  | Forbidden
  | GetCharactersCharacterIdMailMailId404
  | ErrorLimited
  | InternalServerError
  | ServiceUnavailable
  | GatewayTimeout
>;

export const useGetCharactersCharacterIdMailMailId = <
  TError = AxiosError<
    | void
    | BadRequest
    | Unauthorized
    | Forbidden
    | GetCharactersCharacterIdMailMailId404
    | ErrorLimited
    | InternalServerError
    | ServiceUnavailable
    | GatewayTimeout
  >,
>(
  characterId: number,
  mailId: number,
  params?: GetCharactersCharacterIdMailMailIdParams,
  options?: {
    swr?: SWRConfiguration<
      Awaited<ReturnType<typeof getCharactersCharacterIdMailMailId>>,
      TError
    > & { swrKey?: Key; enabled?: boolean };
    axios?: AxiosRequestConfig;
  },
) => {
  const { swr: swrOptions, axios: axiosOptions } = options ?? {};

  const isEnabled = swrOptions?.enabled !== false && !!(characterId && mailId);
  const swrKey =
    swrOptions?.swrKey ??
    (() =>
      isEnabled
        ? getGetCharactersCharacterIdMailMailIdKey(characterId, mailId, params)
        : null);
  const swrFn = () =>
    getCharactersCharacterIdMailMailId(
      characterId,
      mailId,
      params,
      axiosOptions,
    );

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(
    swrKey,
    swrFn,
    swrOptions,
  );

  return {
    swrKey,
    ...query,
  };
};

/**
 * Update metadata about a mail

---
Alternate route: `/dev/characters/{character_id}/mail/{mail_id}/`

Alternate route: `/legacy/characters/{character_id}/mail/{mail_id}/`

Alternate route: `/v1/characters/{character_id}/mail/{mail_id}/`

 * @summary Update metadata about a mail
 */
export const putCharactersCharacterIdMailMailId = (
  characterId: number,
  mailId: number,
  putCharactersCharacterIdMailMailIdBody: PutCharactersCharacterIdMailMailIdBody,
  params?: PutCharactersCharacterIdMailMailIdParams,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<void>> => {
  return axios.put(
    `/characters/${characterId}/mail/${mailId}/`,
    putCharactersCharacterIdMailMailIdBody,
    {
      ...options,
      params: { ...params, ...options?.params },
    },
  );
};
