/**
 * Generated by orval v6.11.1 üç∫
 * Do not edit manually.
 * EVE Swagger Interface
 * An OpenAPI for EVE Online
 * OpenAPI spec version: 1.17
 */
import type { AxiosError, AxiosRequestConfig, AxiosResponse } from "axios";
import axios from "axios";
import type { Key, SWRConfiguration } from "swr";
import useSwr from "swr";

import type {
  BadRequest,
  ErrorLimited,
  Forbidden,
  GatewayTimeout,
  GetCharactersCharacterIdFwStats200,
  GetCharactersCharacterIdFwStatsParams,
  GetCorporationsCorporationIdFwStats200,
  GetCorporationsCorporationIdFwStatsParams,
  GetFwLeaderboards200,
  GetFwLeaderboardsCharacters200,
  GetFwLeaderboardsCharactersParams,
  GetFwLeaderboardsCorporations200,
  GetFwLeaderboardsCorporationsParams,
  GetFwLeaderboardsParams,
  GetFwStats200Item,
  GetFwStatsParams,
  GetFwSystems200Item,
  GetFwSystemsParams,
  GetFwWars200Item,
  GetFwWarsParams,
  InternalServerError,
  ServiceUnavailable,
  Unauthorized,
} from "./model";

/**
 * Statistical overview of a character involved in faction warfare

---
Alternate route: `/dev/characters/{character_id}/fw/stats/`

Alternate route: `/legacy/characters/{character_id}/fw/stats/`

Alternate route: `/v1/characters/{character_id}/fw/stats/`

Alternate route: `/v2/characters/{character_id}/fw/stats/`

---
This route expires daily at 11:05
 * @summary Overview of a character involved in faction warfare
 */
export const getCharactersCharacterIdFwStats = (
  characterId: number,
  params?: GetCharactersCharacterIdFwStatsParams,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<GetCharactersCharacterIdFwStats200>> => {
  return axios.get(`/characters/${characterId}/fw/stats/`, {
    ...options,
    params: { ...params, ...options?.params },
  });
};

export const getGetCharactersCharacterIdFwStatsKey = (
  characterId: number,
  params?: GetCharactersCharacterIdFwStatsParams,
) => [`/characters/${characterId}/fw/stats/`, ...(params ? [params] : [])];

export type GetCharactersCharacterIdFwStatsQueryResult = NonNullable<
  Awaited<ReturnType<typeof getCharactersCharacterIdFwStats>>
>;
export type GetCharactersCharacterIdFwStatsQueryError = AxiosError<
  | void
  | BadRequest
  | Unauthorized
  | Forbidden
  | ErrorLimited
  | InternalServerError
  | ServiceUnavailable
  | GatewayTimeout
>;

export const useGetCharactersCharacterIdFwStats = <
  TError = AxiosError<
    | void
    | BadRequest
    | Unauthorized
    | Forbidden
    | ErrorLimited
    | InternalServerError
    | ServiceUnavailable
    | GatewayTimeout
  >,
>(
  characterId: number,
  params?: GetCharactersCharacterIdFwStatsParams,
  options?: {
    swr?: SWRConfiguration<
      Awaited<ReturnType<typeof getCharactersCharacterIdFwStats>>,
      TError
    > & { swrKey?: Key; enabled?: boolean };
    axios?: AxiosRequestConfig;
  },
) => {
  const { swr: swrOptions, axios: axiosOptions } = options ?? {};

  const isEnabled = swrOptions?.enabled !== false && !!characterId;
  const swrKey =
    swrOptions?.swrKey ??
    (() =>
      isEnabled
        ? getGetCharactersCharacterIdFwStatsKey(characterId, params)
        : null);
  const swrFn = () =>
    getCharactersCharacterIdFwStats(characterId, params, axiosOptions);

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(
    swrKey,
    swrFn,
    swrOptions,
  );

  return {
    swrKey,
    ...query,
  };
};

/**
 * Statistics about a corporation involved in faction warfare

---
Alternate route: `/dev/corporations/{corporation_id}/fw/stats/`

Alternate route: `/legacy/corporations/{corporation_id}/fw/stats/`

Alternate route: `/v1/corporations/{corporation_id}/fw/stats/`

Alternate route: `/v2/corporations/{corporation_id}/fw/stats/`

---
This route expires daily at 11:05
 * @summary Overview of a corporation involved in faction warfare
 */
export const getCorporationsCorporationIdFwStats = (
  corporationId: number,
  params?: GetCorporationsCorporationIdFwStatsParams,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<GetCorporationsCorporationIdFwStats200>> => {
  return axios.get(`/corporations/${corporationId}/fw/stats/`, {
    ...options,
    params: { ...params, ...options?.params },
  });
};

export const getGetCorporationsCorporationIdFwStatsKey = (
  corporationId: number,
  params?: GetCorporationsCorporationIdFwStatsParams,
) => [`/corporations/${corporationId}/fw/stats/`, ...(params ? [params] : [])];

export type GetCorporationsCorporationIdFwStatsQueryResult = NonNullable<
  Awaited<ReturnType<typeof getCorporationsCorporationIdFwStats>>
>;
export type GetCorporationsCorporationIdFwStatsQueryError = AxiosError<
  | void
  | BadRequest
  | Unauthorized
  | Forbidden
  | ErrorLimited
  | InternalServerError
  | ServiceUnavailable
  | GatewayTimeout
>;

export const useGetCorporationsCorporationIdFwStats = <
  TError = AxiosError<
    | void
    | BadRequest
    | Unauthorized
    | Forbidden
    | ErrorLimited
    | InternalServerError
    | ServiceUnavailable
    | GatewayTimeout
  >,
>(
  corporationId: number,
  params?: GetCorporationsCorporationIdFwStatsParams,
  options?: {
    swr?: SWRConfiguration<
      Awaited<ReturnType<typeof getCorporationsCorporationIdFwStats>>,
      TError
    > & { swrKey?: Key; enabled?: boolean };
    axios?: AxiosRequestConfig;
  },
) => {
  const { swr: swrOptions, axios: axiosOptions } = options ?? {};

  const isEnabled = swrOptions?.enabled !== false && !!corporationId;
  const swrKey =
    swrOptions?.swrKey ??
    (() =>
      isEnabled
        ? getGetCorporationsCorporationIdFwStatsKey(corporationId, params)
        : null);
  const swrFn = () =>
    getCorporationsCorporationIdFwStats(corporationId, params, axiosOptions);

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(
    swrKey,
    swrFn,
    swrOptions,
  );

  return {
    swrKey,
    ...query,
  };
};

/**
 * Top 4 leaderboard of factions for kills and victory points separated by total, last week and yesterday

---
Alternate route: `/dev/fw/leaderboards/`

Alternate route: `/legacy/fw/leaderboards/`

Alternate route: `/v1/fw/leaderboards/`

Alternate route: `/v2/fw/leaderboards/`

---
This route expires daily at 11:05
 * @summary List of the top factions in faction warfare
 */
export const getFwLeaderboards = (
  params?: GetFwLeaderboardsParams,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<GetFwLeaderboards200>> => {
  return axios.get(`/fw/leaderboards/`, {
    ...options,
    params: { ...params, ...options?.params },
  });
};

export const getGetFwLeaderboardsKey = (params?: GetFwLeaderboardsParams) => [
  `/fw/leaderboards/`,
  ...(params ? [params] : []),
];

export type GetFwLeaderboardsQueryResult = NonNullable<
  Awaited<ReturnType<typeof getFwLeaderboards>>
>;
export type GetFwLeaderboardsQueryError = AxiosError<
  | void
  | BadRequest
  | ErrorLimited
  | InternalServerError
  | ServiceUnavailable
  | GatewayTimeout
>;

export const useGetFwLeaderboards = <
  TError = AxiosError<
    | void
    | BadRequest
    | ErrorLimited
    | InternalServerError
    | ServiceUnavailable
    | GatewayTimeout
  >,
>(
  params?: GetFwLeaderboardsParams,
  options?: {
    swr?: SWRConfiguration<
      Awaited<ReturnType<typeof getFwLeaderboards>>,
      TError
    > & { swrKey?: Key; enabled?: boolean };
    axios?: AxiosRequestConfig;
  },
) => {
  const { swr: swrOptions, axios: axiosOptions } = options ?? {};

  const isEnabled = swrOptions?.enabled !== false;
  const swrKey =
    swrOptions?.swrKey ??
    (() => (isEnabled ? getGetFwLeaderboardsKey(params) : null));
  const swrFn = () => getFwLeaderboards(params, axiosOptions);

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(
    swrKey,
    swrFn,
    swrOptions,
  );

  return {
    swrKey,
    ...query,
  };
};

/**
 * Top 100 leaderboard of pilots for kills and victory points separated by total, last week and yesterday

---
Alternate route: `/dev/fw/leaderboards/characters/`

Alternate route: `/legacy/fw/leaderboards/characters/`

Alternate route: `/v1/fw/leaderboards/characters/`

Alternate route: `/v2/fw/leaderboards/characters/`

---
This route expires daily at 11:05
 * @summary List of the top pilots in faction warfare
 */
export const getFwLeaderboardsCharacters = (
  params?: GetFwLeaderboardsCharactersParams,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<GetFwLeaderboardsCharacters200>> => {
  return axios.get(`/fw/leaderboards/characters/`, {
    ...options,
    params: { ...params, ...options?.params },
  });
};

export const getGetFwLeaderboardsCharactersKey = (
  params?: GetFwLeaderboardsCharactersParams,
) => [`/fw/leaderboards/characters/`, ...(params ? [params] : [])];

export type GetFwLeaderboardsCharactersQueryResult = NonNullable<
  Awaited<ReturnType<typeof getFwLeaderboardsCharacters>>
>;
export type GetFwLeaderboardsCharactersQueryError = AxiosError<
  | void
  | BadRequest
  | ErrorLimited
  | InternalServerError
  | ServiceUnavailable
  | GatewayTimeout
>;

export const useGetFwLeaderboardsCharacters = <
  TError = AxiosError<
    | void
    | BadRequest
    | ErrorLimited
    | InternalServerError
    | ServiceUnavailable
    | GatewayTimeout
  >,
>(
  params?: GetFwLeaderboardsCharactersParams,
  options?: {
    swr?: SWRConfiguration<
      Awaited<ReturnType<typeof getFwLeaderboardsCharacters>>,
      TError
    > & { swrKey?: Key; enabled?: boolean };
    axios?: AxiosRequestConfig;
  },
) => {
  const { swr: swrOptions, axios: axiosOptions } = options ?? {};

  const isEnabled = swrOptions?.enabled !== false;
  const swrKey =
    swrOptions?.swrKey ??
    (() => (isEnabled ? getGetFwLeaderboardsCharactersKey(params) : null));
  const swrFn = () => getFwLeaderboardsCharacters(params, axiosOptions);

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(
    swrKey,
    swrFn,
    swrOptions,
  );

  return {
    swrKey,
    ...query,
  };
};

/**
 * Top 10 leaderboard of corporations for kills and victory points separated by total, last week and yesterday

---
Alternate route: `/dev/fw/leaderboards/corporations/`

Alternate route: `/legacy/fw/leaderboards/corporations/`

Alternate route: `/v1/fw/leaderboards/corporations/`

Alternate route: `/v2/fw/leaderboards/corporations/`

---
This route expires daily at 11:05
 * @summary List of the top corporations in faction warfare
 */
export const getFwLeaderboardsCorporations = (
  params?: GetFwLeaderboardsCorporationsParams,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<GetFwLeaderboardsCorporations200>> => {
  return axios.get(`/fw/leaderboards/corporations/`, {
    ...options,
    params: { ...params, ...options?.params },
  });
};

export const getGetFwLeaderboardsCorporationsKey = (
  params?: GetFwLeaderboardsCorporationsParams,
) => [`/fw/leaderboards/corporations/`, ...(params ? [params] : [])];

export type GetFwLeaderboardsCorporationsQueryResult = NonNullable<
  Awaited<ReturnType<typeof getFwLeaderboardsCorporations>>
>;
export type GetFwLeaderboardsCorporationsQueryError = AxiosError<
  | void
  | BadRequest
  | ErrorLimited
  | InternalServerError
  | ServiceUnavailable
  | GatewayTimeout
>;

export const useGetFwLeaderboardsCorporations = <
  TError = AxiosError<
    | void
    | BadRequest
    | ErrorLimited
    | InternalServerError
    | ServiceUnavailable
    | GatewayTimeout
  >,
>(
  params?: GetFwLeaderboardsCorporationsParams,
  options?: {
    swr?: SWRConfiguration<
      Awaited<ReturnType<typeof getFwLeaderboardsCorporations>>,
      TError
    > & { swrKey?: Key; enabled?: boolean };
    axios?: AxiosRequestConfig;
  },
) => {
  const { swr: swrOptions, axios: axiosOptions } = options ?? {};

  const isEnabled = swrOptions?.enabled !== false;
  const swrKey =
    swrOptions?.swrKey ??
    (() => (isEnabled ? getGetFwLeaderboardsCorporationsKey(params) : null));
  const swrFn = () => getFwLeaderboardsCorporations(params, axiosOptions);

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(
    swrKey,
    swrFn,
    swrOptions,
  );

  return {
    swrKey,
    ...query,
  };
};

/**
 * Statistical overviews of factions involved in faction warfare

---
Alternate route: `/dev/fw/stats/`

Alternate route: `/legacy/fw/stats/`

Alternate route: `/v1/fw/stats/`

Alternate route: `/v2/fw/stats/`

---
This route expires daily at 11:05
 * @summary An overview of statistics about factions involved in faction warfare
 */
export const getFwStats = (
  params?: GetFwStatsParams,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<GetFwStats200Item[]>> => {
  return axios.get(`/fw/stats/`, {
    ...options,
    params: { ...params, ...options?.params },
  });
};

export const getGetFwStatsKey = (params?: GetFwStatsParams) => [
  `/fw/stats/`,
  ...(params ? [params] : []),
];

export type GetFwStatsQueryResult = NonNullable<
  Awaited<ReturnType<typeof getFwStats>>
>;
export type GetFwStatsQueryError = AxiosError<
  | void
  | BadRequest
  | ErrorLimited
  | InternalServerError
  | ServiceUnavailable
  | GatewayTimeout
>;

export const useGetFwStats = <
  TError = AxiosError<
    | void
    | BadRequest
    | ErrorLimited
    | InternalServerError
    | ServiceUnavailable
    | GatewayTimeout
  >,
>(
  params?: GetFwStatsParams,
  options?: {
    swr?: SWRConfiguration<Awaited<ReturnType<typeof getFwStats>>, TError> & {
      swrKey?: Key;
      enabled?: boolean;
    };
    axios?: AxiosRequestConfig;
  },
) => {
  const { swr: swrOptions, axios: axiosOptions } = options ?? {};

  const isEnabled = swrOptions?.enabled !== false;
  const swrKey =
    swrOptions?.swrKey ?? (() => (isEnabled ? getGetFwStatsKey(params) : null));
  const swrFn = () => getFwStats(params, axiosOptions);

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(
    swrKey,
    swrFn,
    swrOptions,
  );

  return {
    swrKey,
    ...query,
  };
};

/**
 * An overview of the current ownership of faction warfare solar systems

---
Alternate route: `/dev/fw/systems/`

Alternate route: `/legacy/fw/systems/`

Alternate route: `/v2/fw/systems/`

Alternate route: `/v3/fw/systems/`

---
This route is cached for up to 1800 seconds
 * @summary Ownership of faction warfare systems
 */
export const getFwSystems = (
  params?: GetFwSystemsParams,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<GetFwSystems200Item[]>> => {
  return axios.get(`/fw/systems/`, {
    ...options,
    params: { ...params, ...options?.params },
  });
};

export const getGetFwSystemsKey = (params?: GetFwSystemsParams) => [
  `/fw/systems/`,
  ...(params ? [params] : []),
];

export type GetFwSystemsQueryResult = NonNullable<
  Awaited<ReturnType<typeof getFwSystems>>
>;
export type GetFwSystemsQueryError = AxiosError<
  | void
  | BadRequest
  | ErrorLimited
  | InternalServerError
  | ServiceUnavailable
  | GatewayTimeout
>;

export const useGetFwSystems = <
  TError = AxiosError<
    | void
    | BadRequest
    | ErrorLimited
    | InternalServerError
    | ServiceUnavailable
    | GatewayTimeout
  >,
>(
  params?: GetFwSystemsParams,
  options?: {
    swr?: SWRConfiguration<Awaited<ReturnType<typeof getFwSystems>>, TError> & {
      swrKey?: Key;
      enabled?: boolean;
    };
    axios?: AxiosRequestConfig;
  },
) => {
  const { swr: swrOptions, axios: axiosOptions } = options ?? {};

  const isEnabled = swrOptions?.enabled !== false;
  const swrKey =
    swrOptions?.swrKey ??
    (() => (isEnabled ? getGetFwSystemsKey(params) : null));
  const swrFn = () => getFwSystems(params, axiosOptions);

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(
    swrKey,
    swrFn,
    swrOptions,
  );

  return {
    swrKey,
    ...query,
  };
};

/**
 * Data about which NPC factions are at war

---
Alternate route: `/dev/fw/wars/`

Alternate route: `/legacy/fw/wars/`

Alternate route: `/v1/fw/wars/`

Alternate route: `/v2/fw/wars/`

---
This route expires daily at 11:05
 * @summary Data about which NPC factions are at war
 */
export const getFwWars = (
  params?: GetFwWarsParams,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<GetFwWars200Item[]>> => {
  return axios.get(`/fw/wars/`, {
    ...options,
    params: { ...params, ...options?.params },
  });
};

export const getGetFwWarsKey = (params?: GetFwWarsParams) => [
  `/fw/wars/`,
  ...(params ? [params] : []),
];

export type GetFwWarsQueryResult = NonNullable<
  Awaited<ReturnType<typeof getFwWars>>
>;
export type GetFwWarsQueryError = AxiosError<
  | void
  | BadRequest
  | ErrorLimited
  | InternalServerError
  | ServiceUnavailable
  | GatewayTimeout
>;

export const useGetFwWars = <
  TError = AxiosError<
    | void
    | BadRequest
    | ErrorLimited
    | InternalServerError
    | ServiceUnavailable
    | GatewayTimeout
  >,
>(
  params?: GetFwWarsParams,
  options?: {
    swr?: SWRConfiguration<Awaited<ReturnType<typeof getFwWars>>, TError> & {
      swrKey?: Key;
      enabled?: boolean;
    };
    axios?: AxiosRequestConfig;
  },
) => {
  const { swr: swrOptions, axios: axiosOptions } = options ?? {};

  const isEnabled = swrOptions?.enabled !== false;
  const swrKey =
    swrOptions?.swrKey ?? (() => (isEnabled ? getGetFwWarsKey(params) : null));
  const swrFn = () => getFwWars(params, axiosOptions);

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(
    swrKey,
    swrFn,
    swrOptions,
  );

  return {
    swrKey,
    ...query,
  };
};
