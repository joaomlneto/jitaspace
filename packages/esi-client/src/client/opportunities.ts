/**
 * Generated by orval v6.11.1 üç∫
 * Do not edit manually.
 * EVE Swagger Interface
 * An OpenAPI for EVE Online
 * OpenAPI spec version: 1.17
 */
import type { AxiosError, AxiosRequestConfig, AxiosResponse } from "axios";
import axios from "axios";
import type { Key, SWRConfiguration } from "swr";
import useSwr from "swr";

import type {
  BadRequest,
  ErrorLimited,
  Forbidden,
  GatewayTimeout,
  GetCharactersCharacterIdOpportunities200Item,
  GetCharactersCharacterIdOpportunitiesParams,
  GetOpportunitiesGroupsGroupId200,
  GetOpportunitiesGroupsGroupIdParams,
  GetOpportunitiesGroupsParams,
  GetOpportunitiesTasksParams,
  GetOpportunitiesTasksTaskId200,
  GetOpportunitiesTasksTaskIdParams,
  InternalServerError,
  ServiceUnavailable,
  Unauthorized,
} from "./model";

/**
 * Return a list of tasks finished by a character

---
Alternate route: `/dev/characters/{character_id}/opportunities/`

Alternate route: `/legacy/characters/{character_id}/opportunities/`

Alternate route: `/v1/characters/{character_id}/opportunities/`

---
This route is cached for up to 3600 seconds
 * @summary Get a character's completed tasks
 */
export const getCharactersCharacterIdOpportunities = (
  characterId: number,
  params?: GetCharactersCharacterIdOpportunitiesParams,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<GetCharactersCharacterIdOpportunities200Item[]>> => {
  return axios.get(`/characters/${characterId}/opportunities/`, {
    ...options,
    params: { ...params, ...options?.params },
  });
};

export const getGetCharactersCharacterIdOpportunitiesKey = (
  characterId: number,
  params?: GetCharactersCharacterIdOpportunitiesParams,
) => [`/characters/${characterId}/opportunities/`, ...(params ? [params] : [])];

export type GetCharactersCharacterIdOpportunitiesQueryResult = NonNullable<
  Awaited<ReturnType<typeof getCharactersCharacterIdOpportunities>>
>;
export type GetCharactersCharacterIdOpportunitiesQueryError = AxiosError<
  | void
  | BadRequest
  | Unauthorized
  | Forbidden
  | ErrorLimited
  | InternalServerError
  | ServiceUnavailable
  | GatewayTimeout
>;

export const useGetCharactersCharacterIdOpportunities = <
  TError = AxiosError<
    | void
    | BadRequest
    | Unauthorized
    | Forbidden
    | ErrorLimited
    | InternalServerError
    | ServiceUnavailable
    | GatewayTimeout
  >,
>(
  characterId: number,
  params?: GetCharactersCharacterIdOpportunitiesParams,
  options?: {
    swr?: SWRConfiguration<
      Awaited<ReturnType<typeof getCharactersCharacterIdOpportunities>>,
      TError
    > & { swrKey?: Key; enabled?: boolean };
    axios?: AxiosRequestConfig;
  },
) => {
  const { swr: swrOptions, axios: axiosOptions } = options ?? {};

  const isEnabled = swrOptions?.enabled !== false && !!characterId;
  const swrKey =
    swrOptions?.swrKey ??
    (() =>
      isEnabled
        ? getGetCharactersCharacterIdOpportunitiesKey(characterId, params)
        : null);
  const swrFn = () =>
    getCharactersCharacterIdOpportunities(characterId, params, axiosOptions);

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(
    swrKey,
    swrFn,
    swrOptions,
  );

  return {
    swrKey,
    ...query,
  };
};

/**
 * Return a list of opportunities groups

---
Alternate route: `/dev/opportunities/groups/`

Alternate route: `/legacy/opportunities/groups/`

Alternate route: `/v1/opportunities/groups/`

---
This route expires daily at 11:05
 * @summary Get opportunities groups
 */
export const getOpportunitiesGroups = (
  params?: GetOpportunitiesGroupsParams,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<number[]>> => {
  return axios.get(`/opportunities/groups/`, {
    ...options,
    params: { ...params, ...options?.params },
  });
};

export const getGetOpportunitiesGroupsKey = (
  params?: GetOpportunitiesGroupsParams,
) => [`/opportunities/groups/`, ...(params ? [params] : [])];

export type GetOpportunitiesGroupsQueryResult = NonNullable<
  Awaited<ReturnType<typeof getOpportunitiesGroups>>
>;
export type GetOpportunitiesGroupsQueryError = AxiosError<
  | void
  | BadRequest
  | ErrorLimited
  | InternalServerError
  | ServiceUnavailable
  | GatewayTimeout
>;

export const useGetOpportunitiesGroups = <
  TError = AxiosError<
    | void
    | BadRequest
    | ErrorLimited
    | InternalServerError
    | ServiceUnavailable
    | GatewayTimeout
  >,
>(
  params?: GetOpportunitiesGroupsParams,
  options?: {
    swr?: SWRConfiguration<
      Awaited<ReturnType<typeof getOpportunitiesGroups>>,
      TError
    > & { swrKey?: Key; enabled?: boolean };
    axios?: AxiosRequestConfig;
  },
) => {
  const { swr: swrOptions, axios: axiosOptions } = options ?? {};

  const isEnabled = swrOptions?.enabled !== false;
  const swrKey =
    swrOptions?.swrKey ??
    (() => (isEnabled ? getGetOpportunitiesGroupsKey(params) : null));
  const swrFn = () => getOpportunitiesGroups(params, axiosOptions);

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(
    swrKey,
    swrFn,
    swrOptions,
  );

  return {
    swrKey,
    ...query,
  };
};

/**
 * Return information of an opportunities group

---
Alternate route: `/dev/opportunities/groups/{group_id}/`

Alternate route: `/legacy/opportunities/groups/{group_id}/`

Alternate route: `/v1/opportunities/groups/{group_id}/`

---
This route expires daily at 11:05
 * @summary Get opportunities group
 */
export const getOpportunitiesGroupsGroupId = (
  groupId: number,
  params?: GetOpportunitiesGroupsGroupIdParams,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<GetOpportunitiesGroupsGroupId200>> => {
  return axios.get(`/opportunities/groups/${groupId}/`, {
    ...options,
    params: { ...params, ...options?.params },
  });
};

export const getGetOpportunitiesGroupsGroupIdKey = (
  groupId: number,
  params?: GetOpportunitiesGroupsGroupIdParams,
) => [`/opportunities/groups/${groupId}/`, ...(params ? [params] : [])];

export type GetOpportunitiesGroupsGroupIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof getOpportunitiesGroupsGroupId>>
>;
export type GetOpportunitiesGroupsGroupIdQueryError = AxiosError<
  | void
  | BadRequest
  | ErrorLimited
  | InternalServerError
  | ServiceUnavailable
  | GatewayTimeout
>;

export const useGetOpportunitiesGroupsGroupId = <
  TError = AxiosError<
    | void
    | BadRequest
    | ErrorLimited
    | InternalServerError
    | ServiceUnavailable
    | GatewayTimeout
  >,
>(
  groupId: number,
  params?: GetOpportunitiesGroupsGroupIdParams,
  options?: {
    swr?: SWRConfiguration<
      Awaited<ReturnType<typeof getOpportunitiesGroupsGroupId>>,
      TError
    > & { swrKey?: Key; enabled?: boolean };
    axios?: AxiosRequestConfig;
  },
) => {
  const { swr: swrOptions, axios: axiosOptions } = options ?? {};

  const isEnabled = swrOptions?.enabled !== false && !!groupId;
  const swrKey =
    swrOptions?.swrKey ??
    (() =>
      isEnabled ? getGetOpportunitiesGroupsGroupIdKey(groupId, params) : null);
  const swrFn = () =>
    getOpportunitiesGroupsGroupId(groupId, params, axiosOptions);

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(
    swrKey,
    swrFn,
    swrOptions,
  );

  return {
    swrKey,
    ...query,
  };
};

/**
 * Return a list of opportunities tasks

---
Alternate route: `/dev/opportunities/tasks/`

Alternate route: `/legacy/opportunities/tasks/`

Alternate route: `/v1/opportunities/tasks/`

---
This route expires daily at 11:05
 * @summary Get opportunities tasks
 */
export const getOpportunitiesTasks = (
  params?: GetOpportunitiesTasksParams,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<number[]>> => {
  return axios.get(`/opportunities/tasks/`, {
    ...options,
    params: { ...params, ...options?.params },
  });
};

export const getGetOpportunitiesTasksKey = (
  params?: GetOpportunitiesTasksParams,
) => [`/opportunities/tasks/`, ...(params ? [params] : [])];

export type GetOpportunitiesTasksQueryResult = NonNullable<
  Awaited<ReturnType<typeof getOpportunitiesTasks>>
>;
export type GetOpportunitiesTasksQueryError = AxiosError<
  | void
  | BadRequest
  | ErrorLimited
  | InternalServerError
  | ServiceUnavailable
  | GatewayTimeout
>;

export const useGetOpportunitiesTasks = <
  TError = AxiosError<
    | void
    | BadRequest
    | ErrorLimited
    | InternalServerError
    | ServiceUnavailable
    | GatewayTimeout
  >,
>(
  params?: GetOpportunitiesTasksParams,
  options?: {
    swr?: SWRConfiguration<
      Awaited<ReturnType<typeof getOpportunitiesTasks>>,
      TError
    > & { swrKey?: Key; enabled?: boolean };
    axios?: AxiosRequestConfig;
  },
) => {
  const { swr: swrOptions, axios: axiosOptions } = options ?? {};

  const isEnabled = swrOptions?.enabled !== false;
  const swrKey =
    swrOptions?.swrKey ??
    (() => (isEnabled ? getGetOpportunitiesTasksKey(params) : null));
  const swrFn = () => getOpportunitiesTasks(params, axiosOptions);

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(
    swrKey,
    swrFn,
    swrOptions,
  );

  return {
    swrKey,
    ...query,
  };
};

/**
 * Return information of an opportunities task

---
Alternate route: `/dev/opportunities/tasks/{task_id}/`

Alternate route: `/legacy/opportunities/tasks/{task_id}/`

Alternate route: `/v1/opportunities/tasks/{task_id}/`

---
This route expires daily at 11:05
 * @summary Get opportunities task
 */
export const getOpportunitiesTasksTaskId = (
  taskId: number,
  params?: GetOpportunitiesTasksTaskIdParams,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<GetOpportunitiesTasksTaskId200>> => {
  return axios.get(`/opportunities/tasks/${taskId}/`, {
    ...options,
    params: { ...params, ...options?.params },
  });
};

export const getGetOpportunitiesTasksTaskIdKey = (
  taskId: number,
  params?: GetOpportunitiesTasksTaskIdParams,
) => [`/opportunities/tasks/${taskId}/`, ...(params ? [params] : [])];

export type GetOpportunitiesTasksTaskIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof getOpportunitiesTasksTaskId>>
>;
export type GetOpportunitiesTasksTaskIdQueryError = AxiosError<
  | void
  | BadRequest
  | ErrorLimited
  | InternalServerError
  | ServiceUnavailable
  | GatewayTimeout
>;

export const useGetOpportunitiesTasksTaskId = <
  TError = AxiosError<
    | void
    | BadRequest
    | ErrorLimited
    | InternalServerError
    | ServiceUnavailable
    | GatewayTimeout
  >,
>(
  taskId: number,
  params?: GetOpportunitiesTasksTaskIdParams,
  options?: {
    swr?: SWRConfiguration<
      Awaited<ReturnType<typeof getOpportunitiesTasksTaskId>>,
      TError
    > & { swrKey?: Key; enabled?: boolean };
    axios?: AxiosRequestConfig;
  },
) => {
  const { swr: swrOptions, axios: axiosOptions } = options ?? {};

  const isEnabled = swrOptions?.enabled !== false && !!taskId;
  const swrKey =
    swrOptions?.swrKey ??
    (() =>
      isEnabled ? getGetOpportunitiesTasksTaskIdKey(taskId, params) : null);
  const swrFn = () => getOpportunitiesTasksTaskId(taskId, params, axiosOptions);

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(
    swrKey,
    swrFn,
    swrOptions,
  );

  return {
    swrKey,
    ...query,
  };
};
