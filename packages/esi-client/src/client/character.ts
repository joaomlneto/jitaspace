/**
 * Generated by orval v6.11.1 üç∫
 * Do not edit manually.
 * EVE Swagger Interface
 * An OpenAPI for EVE Online
 * OpenAPI spec version: 1.17
 */
import type { AxiosError, AxiosRequestConfig, AxiosResponse } from "axios";
import axios from "axios";
import type { Key, SWRConfiguration } from "swr";
import useSwr from "swr";

import type {
  BadRequest,
  ErrorLimited,
  Forbidden,
  GatewayTimeout,
  GetCharactersCharacterId200,
  GetCharactersCharacterId404,
  GetCharactersCharacterIdAgentsResearch200Item,
  GetCharactersCharacterIdAgentsResearchParams,
  GetCharactersCharacterIdBlueprints200Item,
  GetCharactersCharacterIdBlueprintsParams,
  GetCharactersCharacterIdCorporationhistory200Item,
  GetCharactersCharacterIdCorporationhistoryParams,
  GetCharactersCharacterIdFatigue200,
  GetCharactersCharacterIdFatigueParams,
  GetCharactersCharacterIdMedals200Item,
  GetCharactersCharacterIdMedalsParams,
  GetCharactersCharacterIdNotifications200Item,
  GetCharactersCharacterIdNotificationsContacts200Item,
  GetCharactersCharacterIdNotificationsContactsParams,
  GetCharactersCharacterIdNotificationsParams,
  GetCharactersCharacterIdParams,
  GetCharactersCharacterIdPortrait200,
  GetCharactersCharacterIdPortrait404,
  GetCharactersCharacterIdPortraitParams,
  GetCharactersCharacterIdRoles200,
  GetCharactersCharacterIdRolesParams,
  GetCharactersCharacterIdStandings200Item,
  GetCharactersCharacterIdStandingsParams,
  GetCharactersCharacterIdTitles200Item,
  GetCharactersCharacterIdTitlesParams,
  InternalServerError,
  PostCharactersAffiliation200Item,
  PostCharactersAffiliationParams,
  PostCharactersCharacterIdCspaParams,
  ServiceUnavailable,
  Unauthorized,
} from "./model";

/**
 * Bulk lookup of character IDs to corporation, alliance and faction

---
Alternate route: `/dev/characters/affiliation/`

Alternate route: `/v2/characters/affiliation/`

---
This route is cached for up to 3600 seconds
 * @summary Character affiliation
 */
export const postCharactersAffiliation = (
  postCharactersAffiliationBody: number[],
  params?: PostCharactersAffiliationParams,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<PostCharactersAffiliation200Item[]>> => {
  return axios.post(`/characters/affiliation/`, postCharactersAffiliationBody, {
    ...options,
    params: { ...params, ...options?.params },
  });
};

/**
 * Public information about a character

---
Alternate route: `/dev/characters/{character_id}/`

Alternate route: `/legacy/characters/{character_id}/`

Alternate route: `/v5/characters/{character_id}/`

---
This route is cached for up to 86400 seconds
 * @summary Get character's public information
 */
export const getCharactersCharacterId = (
  characterId: number,
  params?: GetCharactersCharacterIdParams,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<GetCharactersCharacterId200>> => {
  return axios.get(`/characters/${characterId}/`, {
    ...options,
    params: { ...params, ...options?.params },
  });
};

export const getGetCharactersCharacterIdKey = (
  characterId: number,
  params?: GetCharactersCharacterIdParams,
) => [`/characters/${characterId}/`, ...(params ? [params] : [])];

export type GetCharactersCharacterIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof getCharactersCharacterId>>
>;
export type GetCharactersCharacterIdQueryError = AxiosError<
  | void
  | BadRequest
  | GetCharactersCharacterId404
  | ErrorLimited
  | InternalServerError
  | ServiceUnavailable
  | GatewayTimeout
>;

export const useGetCharactersCharacterId = <
  TError = AxiosError<
    | void
    | BadRequest
    | GetCharactersCharacterId404
    | ErrorLimited
    | InternalServerError
    | ServiceUnavailable
    | GatewayTimeout
  >,
>(
  characterId: number,
  params?: GetCharactersCharacterIdParams,
  options?: {
    swr?: SWRConfiguration<
      Awaited<ReturnType<typeof getCharactersCharacterId>>,
      TError
    > & { swrKey?: Key; enabled?: boolean };
    axios?: AxiosRequestConfig;
  },
) => {
  const { swr: swrOptions, axios: axiosOptions } = options ?? {};

  const isEnabled = swrOptions?.enabled !== false && !!characterId;
  const swrKey =
    swrOptions?.swrKey ??
    (() =>
      isEnabled ? getGetCharactersCharacterIdKey(characterId, params) : null);
  const swrFn = () =>
    getCharactersCharacterId(characterId, params, axiosOptions);

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(
    swrKey,
    swrFn,
    swrOptions,
  );

  return {
    swrKey,
    ...query,
  };
};

/**
 * Return a list of agents research information for a character. The formula for finding the current research points with an agent is: currentPoints = remainderPoints + pointsPerDay * days(currentTime - researchStartDate)

---
Alternate route: `/dev/characters/{character_id}/agents_research/`

Alternate route: `/v2/characters/{character_id}/agents_research/`

---
This route is cached for up to 3600 seconds
 * @summary Get agents research
 */
export const getCharactersCharacterIdAgentsResearch = (
  characterId: number,
  params?: GetCharactersCharacterIdAgentsResearchParams,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<GetCharactersCharacterIdAgentsResearch200Item[]>> => {
  return axios.get(`/characters/${characterId}/agents_research/`, {
    ...options,
    params: { ...params, ...options?.params },
  });
};

export const getGetCharactersCharacterIdAgentsResearchKey = (
  characterId: number,
  params?: GetCharactersCharacterIdAgentsResearchParams,
) => [
  `/characters/${characterId}/agents_research/`,
  ...(params ? [params] : []),
];

export type GetCharactersCharacterIdAgentsResearchQueryResult = NonNullable<
  Awaited<ReturnType<typeof getCharactersCharacterIdAgentsResearch>>
>;
export type GetCharactersCharacterIdAgentsResearchQueryError = AxiosError<
  | void
  | BadRequest
  | Unauthorized
  | Forbidden
  | ErrorLimited
  | InternalServerError
  | ServiceUnavailable
  | GatewayTimeout
>;

export const useGetCharactersCharacterIdAgentsResearch = <
  TError = AxiosError<
    | void
    | BadRequest
    | Unauthorized
    | Forbidden
    | ErrorLimited
    | InternalServerError
    | ServiceUnavailable
    | GatewayTimeout
  >,
>(
  characterId: number,
  params?: GetCharactersCharacterIdAgentsResearchParams,
  options?: {
    swr?: SWRConfiguration<
      Awaited<ReturnType<typeof getCharactersCharacterIdAgentsResearch>>,
      TError
    > & { swrKey?: Key; enabled?: boolean };
    axios?: AxiosRequestConfig;
  },
) => {
  const { swr: swrOptions, axios: axiosOptions } = options ?? {};

  const isEnabled = swrOptions?.enabled !== false && !!characterId;
  const swrKey =
    swrOptions?.swrKey ??
    (() =>
      isEnabled
        ? getGetCharactersCharacterIdAgentsResearchKey(characterId, params)
        : null);
  const swrFn = () =>
    getCharactersCharacterIdAgentsResearch(characterId, params, axiosOptions);

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(
    swrKey,
    swrFn,
    swrOptions,
  );

  return {
    swrKey,
    ...query,
  };
};

/**
 * Return a list of blueprints the character owns

---
Alternate route: `/dev/characters/{character_id}/blueprints/`

Alternate route: `/v3/characters/{character_id}/blueprints/`

---
This route is cached for up to 3600 seconds
 * @summary Get blueprints
 */
export const getCharactersCharacterIdBlueprints = (
  characterId: number,
  params?: GetCharactersCharacterIdBlueprintsParams,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<GetCharactersCharacterIdBlueprints200Item[]>> => {
  return axios.get(`/characters/${characterId}/blueprints/`, {
    ...options,
    params: { ...params, ...options?.params },
  });
};

export const getGetCharactersCharacterIdBlueprintsKey = (
  characterId: number,
  params?: GetCharactersCharacterIdBlueprintsParams,
) => [`/characters/${characterId}/blueprints/`, ...(params ? [params] : [])];

export type GetCharactersCharacterIdBlueprintsQueryResult = NonNullable<
  Awaited<ReturnType<typeof getCharactersCharacterIdBlueprints>>
>;
export type GetCharactersCharacterIdBlueprintsQueryError = AxiosError<
  | void
  | BadRequest
  | Unauthorized
  | Forbidden
  | ErrorLimited
  | InternalServerError
  | ServiceUnavailable
  | GatewayTimeout
>;

export const useGetCharactersCharacterIdBlueprints = <
  TError = AxiosError<
    | void
    | BadRequest
    | Unauthorized
    | Forbidden
    | ErrorLimited
    | InternalServerError
    | ServiceUnavailable
    | GatewayTimeout
  >,
>(
  characterId: number,
  params?: GetCharactersCharacterIdBlueprintsParams,
  options?: {
    swr?: SWRConfiguration<
      Awaited<ReturnType<typeof getCharactersCharacterIdBlueprints>>,
      TError
    > & { swrKey?: Key; enabled?: boolean };
    axios?: AxiosRequestConfig;
  },
) => {
  const { swr: swrOptions, axios: axiosOptions } = options ?? {};

  const isEnabled = swrOptions?.enabled !== false && !!characterId;
  const swrKey =
    swrOptions?.swrKey ??
    (() =>
      isEnabled
        ? getGetCharactersCharacterIdBlueprintsKey(characterId, params)
        : null);
  const swrFn = () =>
    getCharactersCharacterIdBlueprints(characterId, params, axiosOptions);

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(
    swrKey,
    swrFn,
    swrOptions,
  );

  return {
    swrKey,
    ...query,
  };
};

/**
 * Get a list of all the corporations a character has been a member of

---
Alternate route: `/dev/characters/{character_id}/corporationhistory/`

Alternate route: `/v2/characters/{character_id}/corporationhistory/`

---
This route is cached for up to 86400 seconds
 * @summary Get corporation history
 */
export const getCharactersCharacterIdCorporationhistory = (
  characterId: number,
  params?: GetCharactersCharacterIdCorporationhistoryParams,
  options?: AxiosRequestConfig,
): Promise<
  AxiosResponse<GetCharactersCharacterIdCorporationhistory200Item[]>
> => {
  return axios.get(`/characters/${characterId}/corporationhistory/`, {
    ...options,
    params: { ...params, ...options?.params },
  });
};

export const getGetCharactersCharacterIdCorporationhistoryKey = (
  characterId: number,
  params?: GetCharactersCharacterIdCorporationhistoryParams,
) => [
  `/characters/${characterId}/corporationhistory/`,
  ...(params ? [params] : []),
];

export type GetCharactersCharacterIdCorporationhistoryQueryResult = NonNullable<
  Awaited<ReturnType<typeof getCharactersCharacterIdCorporationhistory>>
>;
export type GetCharactersCharacterIdCorporationhistoryQueryError = AxiosError<
  | void
  | BadRequest
  | ErrorLimited
  | InternalServerError
  | ServiceUnavailable
  | GatewayTimeout
>;

export const useGetCharactersCharacterIdCorporationhistory = <
  TError = AxiosError<
    | void
    | BadRequest
    | ErrorLimited
    | InternalServerError
    | ServiceUnavailable
    | GatewayTimeout
  >,
>(
  characterId: number,
  params?: GetCharactersCharacterIdCorporationhistoryParams,
  options?: {
    swr?: SWRConfiguration<
      Awaited<ReturnType<typeof getCharactersCharacterIdCorporationhistory>>,
      TError
    > & { swrKey?: Key; enabled?: boolean };
    axios?: AxiosRequestConfig;
  },
) => {
  const { swr: swrOptions, axios: axiosOptions } = options ?? {};

  const isEnabled = swrOptions?.enabled !== false && !!characterId;
  const swrKey =
    swrOptions?.swrKey ??
    (() =>
      isEnabled
        ? getGetCharactersCharacterIdCorporationhistoryKey(characterId, params)
        : null);
  const swrFn = () =>
    getCharactersCharacterIdCorporationhistory(
      characterId,
      params,
      axiosOptions,
    );

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(
    swrKey,
    swrFn,
    swrOptions,
  );

  return {
    swrKey,
    ...query,
  };
};

/**
 * Takes a source character ID in the url and a set of target character ID's in the body, returns a CSPA charge cost

---
Alternate route: `/dev/characters/{character_id}/cspa/`

Alternate route: `/v5/characters/{character_id}/cspa/`

 * @summary Calculate a CSPA charge cost
 */
export const postCharactersCharacterIdCspa = (
  characterId: number,
  postCharactersCharacterIdCspaBody: number[],
  params?: PostCharactersCharacterIdCspaParams,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<number>> => {
  return axios.post(
    `/characters/${characterId}/cspa/`,
    postCharactersCharacterIdCspaBody,
    {
      ...options,
      params: { ...params, ...options?.params },
    },
  );
};

/**
 * Return a character's jump activation and fatigue information

---
Alternate route: `/dev/characters/{character_id}/fatigue/`

Alternate route: `/v2/characters/{character_id}/fatigue/`

---
This route is cached for up to 300 seconds
 * @summary Get jump fatigue
 */
export const getCharactersCharacterIdFatigue = (
  characterId: number,
  params?: GetCharactersCharacterIdFatigueParams,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<GetCharactersCharacterIdFatigue200>> => {
  return axios.get(`/characters/${characterId}/fatigue/`, {
    ...options,
    params: { ...params, ...options?.params },
  });
};

export const getGetCharactersCharacterIdFatigueKey = (
  characterId: number,
  params?: GetCharactersCharacterIdFatigueParams,
) => [`/characters/${characterId}/fatigue/`, ...(params ? [params] : [])];

export type GetCharactersCharacterIdFatigueQueryResult = NonNullable<
  Awaited<ReturnType<typeof getCharactersCharacterIdFatigue>>
>;
export type GetCharactersCharacterIdFatigueQueryError = AxiosError<
  | void
  | BadRequest
  | Unauthorized
  | Forbidden
  | ErrorLimited
  | InternalServerError
  | ServiceUnavailable
  | GatewayTimeout
>;

export const useGetCharactersCharacterIdFatigue = <
  TError = AxiosError<
    | void
    | BadRequest
    | Unauthorized
    | Forbidden
    | ErrorLimited
    | InternalServerError
    | ServiceUnavailable
    | GatewayTimeout
  >,
>(
  characterId: number,
  params?: GetCharactersCharacterIdFatigueParams,
  options?: {
    swr?: SWRConfiguration<
      Awaited<ReturnType<typeof getCharactersCharacterIdFatigue>>,
      TError
    > & { swrKey?: Key; enabled?: boolean };
    axios?: AxiosRequestConfig;
  },
) => {
  const { swr: swrOptions, axios: axiosOptions } = options ?? {};

  const isEnabled = swrOptions?.enabled !== false && !!characterId;
  const swrKey =
    swrOptions?.swrKey ??
    (() =>
      isEnabled
        ? getGetCharactersCharacterIdFatigueKey(characterId, params)
        : null);
  const swrFn = () =>
    getCharactersCharacterIdFatigue(characterId, params, axiosOptions);

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(
    swrKey,
    swrFn,
    swrOptions,
  );

  return {
    swrKey,
    ...query,
  };
};

/**
 * Return a list of medals the character has

---
Alternate route: `/dev/characters/{character_id}/medals/`

Alternate route: `/v2/characters/{character_id}/medals/`

---
This route is cached for up to 3600 seconds
 * @summary Get medals
 */
export const getCharactersCharacterIdMedals = (
  characterId: number,
  params?: GetCharactersCharacterIdMedalsParams,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<GetCharactersCharacterIdMedals200Item[]>> => {
  return axios.get(`/characters/${characterId}/medals/`, {
    ...options,
    params: { ...params, ...options?.params },
  });
};

export const getGetCharactersCharacterIdMedalsKey = (
  characterId: number,
  params?: GetCharactersCharacterIdMedalsParams,
) => [`/characters/${characterId}/medals/`, ...(params ? [params] : [])];

export type GetCharactersCharacterIdMedalsQueryResult = NonNullable<
  Awaited<ReturnType<typeof getCharactersCharacterIdMedals>>
>;
export type GetCharactersCharacterIdMedalsQueryError = AxiosError<
  | void
  | BadRequest
  | Unauthorized
  | Forbidden
  | ErrorLimited
  | InternalServerError
  | ServiceUnavailable
  | GatewayTimeout
>;

export const useGetCharactersCharacterIdMedals = <
  TError = AxiosError<
    | void
    | BadRequest
    | Unauthorized
    | Forbidden
    | ErrorLimited
    | InternalServerError
    | ServiceUnavailable
    | GatewayTimeout
  >,
>(
  characterId: number,
  params?: GetCharactersCharacterIdMedalsParams,
  options?: {
    swr?: SWRConfiguration<
      Awaited<ReturnType<typeof getCharactersCharacterIdMedals>>,
      TError
    > & { swrKey?: Key; enabled?: boolean };
    axios?: AxiosRequestConfig;
  },
) => {
  const { swr: swrOptions, axios: axiosOptions } = options ?? {};

  const isEnabled = swrOptions?.enabled !== false && !!characterId;
  const swrKey =
    swrOptions?.swrKey ??
    (() =>
      isEnabled
        ? getGetCharactersCharacterIdMedalsKey(characterId, params)
        : null);
  const swrFn = () =>
    getCharactersCharacterIdMedals(characterId, params, axiosOptions);

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(
    swrKey,
    swrFn,
    swrOptions,
  );

  return {
    swrKey,
    ...query,
  };
};

/**
 * Return character notifications

---
Alternate route: `/dev/characters/{character_id}/notifications/`

Alternate route: `/v5/characters/{character_id}/notifications/`

Alternate route: `/v6/characters/{character_id}/notifications/`

---
This route is cached for up to 600 seconds
 * @summary Get character notifications
 */
export const getCharactersCharacterIdNotifications = (
  characterId: number,
  params?: GetCharactersCharacterIdNotificationsParams,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<GetCharactersCharacterIdNotifications200Item[]>> => {
  return axios.get(`/characters/${characterId}/notifications/`, {
    ...options,
    params: { ...params, ...options?.params },
  });
};

export const getGetCharactersCharacterIdNotificationsKey = (
  characterId: number,
  params?: GetCharactersCharacterIdNotificationsParams,
) => [`/characters/${characterId}/notifications/`, ...(params ? [params] : [])];

export type GetCharactersCharacterIdNotificationsQueryResult = NonNullable<
  Awaited<ReturnType<typeof getCharactersCharacterIdNotifications>>
>;
export type GetCharactersCharacterIdNotificationsQueryError = AxiosError<
  | void
  | BadRequest
  | Unauthorized
  | Forbidden
  | ErrorLimited
  | InternalServerError
  | ServiceUnavailable
  | GatewayTimeout
>;

export const useGetCharactersCharacterIdNotifications = <
  TError = AxiosError<
    | void
    | BadRequest
    | Unauthorized
    | Forbidden
    | ErrorLimited
    | InternalServerError
    | ServiceUnavailable
    | GatewayTimeout
  >,
>(
  characterId: number,
  params?: GetCharactersCharacterIdNotificationsParams,
  options?: {
    swr?: SWRConfiguration<
      Awaited<ReturnType<typeof getCharactersCharacterIdNotifications>>,
      TError
    > & { swrKey?: Key; enabled?: boolean };
    axios?: AxiosRequestConfig;
  },
) => {
  const { swr: swrOptions, axios: axiosOptions } = options ?? {};

  const isEnabled = swrOptions?.enabled !== false && !!characterId;
  const swrKey =
    swrOptions?.swrKey ??
    (() =>
      isEnabled
        ? getGetCharactersCharacterIdNotificationsKey(characterId, params)
        : null);
  const swrFn = () =>
    getCharactersCharacterIdNotifications(characterId, params, axiosOptions);

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(
    swrKey,
    swrFn,
    swrOptions,
  );

  return {
    swrKey,
    ...query,
  };
};

/**
 * Return notifications about having been added to someone's contact list

---
Alternate route: `/dev/characters/{character_id}/notifications/contacts/`

Alternate route: `/v2/characters/{character_id}/notifications/contacts/`

---
This route is cached for up to 600 seconds
 * @summary Get new contact notifications
 */
export const getCharactersCharacterIdNotificationsContacts = (
  characterId: number,
  params?: GetCharactersCharacterIdNotificationsContactsParams,
  options?: AxiosRequestConfig,
): Promise<
  AxiosResponse<GetCharactersCharacterIdNotificationsContacts200Item[]>
> => {
  return axios.get(`/characters/${characterId}/notifications/contacts/`, {
    ...options,
    params: { ...params, ...options?.params },
  });
};

export const getGetCharactersCharacterIdNotificationsContactsKey = (
  characterId: number,
  params?: GetCharactersCharacterIdNotificationsContactsParams,
) => [
  `/characters/${characterId}/notifications/contacts/`,
  ...(params ? [params] : []),
];

export type GetCharactersCharacterIdNotificationsContactsQueryResult =
  NonNullable<
    Awaited<ReturnType<typeof getCharactersCharacterIdNotificationsContacts>>
  >;
export type GetCharactersCharacterIdNotificationsContactsQueryError =
  AxiosError<
    | void
    | BadRequest
    | Unauthorized
    | Forbidden
    | ErrorLimited
    | InternalServerError
    | ServiceUnavailable
    | GatewayTimeout
  >;

export const useGetCharactersCharacterIdNotificationsContacts = <
  TError = AxiosError<
    | void
    | BadRequest
    | Unauthorized
    | Forbidden
    | ErrorLimited
    | InternalServerError
    | ServiceUnavailable
    | GatewayTimeout
  >,
>(
  characterId: number,
  params?: GetCharactersCharacterIdNotificationsContactsParams,
  options?: {
    swr?: SWRConfiguration<
      Awaited<ReturnType<typeof getCharactersCharacterIdNotificationsContacts>>,
      TError
    > & { swrKey?: Key; enabled?: boolean };
    axios?: AxiosRequestConfig;
  },
) => {
  const { swr: swrOptions, axios: axiosOptions } = options ?? {};

  const isEnabled = swrOptions?.enabled !== false && !!characterId;
  const swrKey =
    swrOptions?.swrKey ??
    (() =>
      isEnabled
        ? getGetCharactersCharacterIdNotificationsContactsKey(
            characterId,
            params,
          )
        : null);
  const swrFn = () =>
    getCharactersCharacterIdNotificationsContacts(
      characterId,
      params,
      axiosOptions,
    );

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(
    swrKey,
    swrFn,
    swrOptions,
  );

  return {
    swrKey,
    ...query,
  };
};

/**
 * Get portrait urls for a character

---
Alternate route: `/dev/characters/{character_id}/portrait/`

Alternate route: `/v2/characters/{character_id}/portrait/`

Alternate route: `/v3/characters/{character_id}/portrait/`

---
This route expires daily at 11:05
 * @summary Get character portraits
 */
export const getCharactersCharacterIdPortrait = (
  characterId: number,
  params?: GetCharactersCharacterIdPortraitParams,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<GetCharactersCharacterIdPortrait200>> => {
  return axios.get(`/characters/${characterId}/portrait/`, {
    ...options,
    params: { ...params, ...options?.params },
  });
};

export const getGetCharactersCharacterIdPortraitKey = (
  characterId: number,
  params?: GetCharactersCharacterIdPortraitParams,
) => [`/characters/${characterId}/portrait/`, ...(params ? [params] : [])];

export type GetCharactersCharacterIdPortraitQueryResult = NonNullable<
  Awaited<ReturnType<typeof getCharactersCharacterIdPortrait>>
>;
export type GetCharactersCharacterIdPortraitQueryError = AxiosError<
  | void
  | BadRequest
  | GetCharactersCharacterIdPortrait404
  | ErrorLimited
  | InternalServerError
  | ServiceUnavailable
  | GatewayTimeout
>;

export const useGetCharactersCharacterIdPortrait = <
  TError = AxiosError<
    | void
    | BadRequest
    | GetCharactersCharacterIdPortrait404
    | ErrorLimited
    | InternalServerError
    | ServiceUnavailable
    | GatewayTimeout
  >,
>(
  characterId: number,
  params?: GetCharactersCharacterIdPortraitParams,
  options?: {
    swr?: SWRConfiguration<
      Awaited<ReturnType<typeof getCharactersCharacterIdPortrait>>,
      TError
    > & { swrKey?: Key; enabled?: boolean };
    axios?: AxiosRequestConfig;
  },
) => {
  const { swr: swrOptions, axios: axiosOptions } = options ?? {};

  const isEnabled = swrOptions?.enabled !== false && !!characterId;
  const swrKey =
    swrOptions?.swrKey ??
    (() =>
      isEnabled
        ? getGetCharactersCharacterIdPortraitKey(characterId, params)
        : null);
  const swrFn = () =>
    getCharactersCharacterIdPortrait(characterId, params, axiosOptions);

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(
    swrKey,
    swrFn,
    swrOptions,
  );

  return {
    swrKey,
    ...query,
  };
};

/**
 * Returns a character's corporation roles

---
Alternate route: `/dev/characters/{character_id}/roles/`

Alternate route: `/v3/characters/{character_id}/roles/`

---
This route is cached for up to 3600 seconds
 * @summary Get character corporation roles
 */
export const getCharactersCharacterIdRoles = (
  characterId: number,
  params?: GetCharactersCharacterIdRolesParams,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<GetCharactersCharacterIdRoles200>> => {
  return axios.get(`/characters/${characterId}/roles/`, {
    ...options,
    params: { ...params, ...options?.params },
  });
};

export const getGetCharactersCharacterIdRolesKey = (
  characterId: number,
  params?: GetCharactersCharacterIdRolesParams,
) => [`/characters/${characterId}/roles/`, ...(params ? [params] : [])];

export type GetCharactersCharacterIdRolesQueryResult = NonNullable<
  Awaited<ReturnType<typeof getCharactersCharacterIdRoles>>
>;
export type GetCharactersCharacterIdRolesQueryError = AxiosError<
  | void
  | BadRequest
  | Unauthorized
  | Forbidden
  | ErrorLimited
  | InternalServerError
  | ServiceUnavailable
  | GatewayTimeout
>;

export const useGetCharactersCharacterIdRoles = <
  TError = AxiosError<
    | void
    | BadRequest
    | Unauthorized
    | Forbidden
    | ErrorLimited
    | InternalServerError
    | ServiceUnavailable
    | GatewayTimeout
  >,
>(
  characterId: number,
  params?: GetCharactersCharacterIdRolesParams,
  options?: {
    swr?: SWRConfiguration<
      Awaited<ReturnType<typeof getCharactersCharacterIdRoles>>,
      TError
    > & { swrKey?: Key; enabled?: boolean };
    axios?: AxiosRequestConfig;
  },
) => {
  const { swr: swrOptions, axios: axiosOptions } = options ?? {};

  const isEnabled = swrOptions?.enabled !== false && !!characterId;
  const swrKey =
    swrOptions?.swrKey ??
    (() =>
      isEnabled
        ? getGetCharactersCharacterIdRolesKey(characterId, params)
        : null);
  const swrFn = () =>
    getCharactersCharacterIdRoles(characterId, params, axiosOptions);

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(
    swrKey,
    swrFn,
    swrOptions,
  );

  return {
    swrKey,
    ...query,
  };
};

/**
 * Return character standings from agents, NPC corporations, and factions

---
Alternate route: `/dev/characters/{character_id}/standings/`

Alternate route: `/v2/characters/{character_id}/standings/`

---
This route is cached for up to 3600 seconds
 * @summary Get standings
 */
export const getCharactersCharacterIdStandings = (
  characterId: number,
  params?: GetCharactersCharacterIdStandingsParams,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<GetCharactersCharacterIdStandings200Item[]>> => {
  return axios.get(`/characters/${characterId}/standings/`, {
    ...options,
    params: { ...params, ...options?.params },
  });
};

export const getGetCharactersCharacterIdStandingsKey = (
  characterId: number,
  params?: GetCharactersCharacterIdStandingsParams,
) => [`/characters/${characterId}/standings/`, ...(params ? [params] : [])];

export type GetCharactersCharacterIdStandingsQueryResult = NonNullable<
  Awaited<ReturnType<typeof getCharactersCharacterIdStandings>>
>;
export type GetCharactersCharacterIdStandingsQueryError = AxiosError<
  | void
  | BadRequest
  | Unauthorized
  | Forbidden
  | ErrorLimited
  | InternalServerError
  | ServiceUnavailable
  | GatewayTimeout
>;

export const useGetCharactersCharacterIdStandings = <
  TError = AxiosError<
    | void
    | BadRequest
    | Unauthorized
    | Forbidden
    | ErrorLimited
    | InternalServerError
    | ServiceUnavailable
    | GatewayTimeout
  >,
>(
  characterId: number,
  params?: GetCharactersCharacterIdStandingsParams,
  options?: {
    swr?: SWRConfiguration<
      Awaited<ReturnType<typeof getCharactersCharacterIdStandings>>,
      TError
    > & { swrKey?: Key; enabled?: boolean };
    axios?: AxiosRequestConfig;
  },
) => {
  const { swr: swrOptions, axios: axiosOptions } = options ?? {};

  const isEnabled = swrOptions?.enabled !== false && !!characterId;
  const swrKey =
    swrOptions?.swrKey ??
    (() =>
      isEnabled
        ? getGetCharactersCharacterIdStandingsKey(characterId, params)
        : null);
  const swrFn = () =>
    getCharactersCharacterIdStandings(characterId, params, axiosOptions);

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(
    swrKey,
    swrFn,
    swrOptions,
  );

  return {
    swrKey,
    ...query,
  };
};

/**
 * Returns a character's titles

---
Alternate route: `/dev/characters/{character_id}/titles/`

Alternate route: `/v2/characters/{character_id}/titles/`

---
This route is cached for up to 3600 seconds
 * @summary Get character corporation titles
 */
export const getCharactersCharacterIdTitles = (
  characterId: number,
  params?: GetCharactersCharacterIdTitlesParams,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<GetCharactersCharacterIdTitles200Item[]>> => {
  return axios.get(`/characters/${characterId}/titles/`, {
    ...options,
    params: { ...params, ...options?.params },
  });
};

export const getGetCharactersCharacterIdTitlesKey = (
  characterId: number,
  params?: GetCharactersCharacterIdTitlesParams,
) => [`/characters/${characterId}/titles/`, ...(params ? [params] : [])];

export type GetCharactersCharacterIdTitlesQueryResult = NonNullable<
  Awaited<ReturnType<typeof getCharactersCharacterIdTitles>>
>;
export type GetCharactersCharacterIdTitlesQueryError = AxiosError<
  | void
  | BadRequest
  | Unauthorized
  | Forbidden
  | ErrorLimited
  | InternalServerError
  | ServiceUnavailable
  | GatewayTimeout
>;

export const useGetCharactersCharacterIdTitles = <
  TError = AxiosError<
    | void
    | BadRequest
    | Unauthorized
    | Forbidden
    | ErrorLimited
    | InternalServerError
    | ServiceUnavailable
    | GatewayTimeout
  >,
>(
  characterId: number,
  params?: GetCharactersCharacterIdTitlesParams,
  options?: {
    swr?: SWRConfiguration<
      Awaited<ReturnType<typeof getCharactersCharacterIdTitles>>,
      TError
    > & { swrKey?: Key; enabled?: boolean };
    axios?: AxiosRequestConfig;
  },
) => {
  const { swr: swrOptions, axios: axiosOptions } = options ?? {};

  const isEnabled = swrOptions?.enabled !== false && !!characterId;
  const swrKey =
    swrOptions?.swrKey ??
    (() =>
      isEnabled
        ? getGetCharactersCharacterIdTitlesKey(characterId, params)
        : null);
  const swrFn = () =>
    getCharactersCharacterIdTitles(characterId, params, axiosOptions);

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(
    swrKey,
    swrFn,
    swrOptions,
  );

  return {
    swrKey,
    ...query,
  };
};
