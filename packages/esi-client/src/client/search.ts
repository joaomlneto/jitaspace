/**
 * Generated by orval v6.11.1 üç∫
 * Do not edit manually.
 * EVE Swagger Interface
 * An OpenAPI for EVE Online
 * OpenAPI spec version: 1.17
 */
import axios from 'axios'
import type {
  AxiosRequestConfig,
  AxiosResponse,
  AxiosError
} from 'axios'
import useSwr from 'swr'
import type {
  SWRConfiguration,
  Key
} from 'swr'
import type {
  GetCharactersCharacterIdSearch200,
  BadRequest,
  Unauthorized,
  Forbidden,
  ErrorLimited,
  InternalServerError,
  ServiceUnavailable,
  GatewayTimeout,
  GetCharactersCharacterIdSearchParams
} from './model'



  
  /**
 * Search for entities that match a given sub-string.

---
Alternate route: `/dev/characters/{character_id}/search/`

Alternate route: `/legacy/characters/{character_id}/search/`

Alternate route: `/v3/characters/{character_id}/search/`

---
This route is cached for up to 3600 seconds
 * @summary Search on a string
 */
export const getCharactersCharacterIdSearch = (
    characterId: number,
    params: GetCharactersCharacterIdSearchParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<GetCharactersCharacterIdSearch200>> => {
    return axios.get(
      `/characters/${characterId}/search/`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }


export const getGetCharactersCharacterIdSearchKey = (characterId: number,
    params: GetCharactersCharacterIdSearchParams,) => [`/characters/${characterId}/search/`, ...(params ? [params]: [])];

    
export type GetCharactersCharacterIdSearchQueryResult = NonNullable<Awaited<ReturnType<typeof getCharactersCharacterIdSearch>>>
export type GetCharactersCharacterIdSearchQueryError = AxiosError<void | BadRequest | Unauthorized | Forbidden | ErrorLimited | InternalServerError | ServiceUnavailable | GatewayTimeout>

export const useGetCharactersCharacterIdSearch = <TError = AxiosError<void | BadRequest | Unauthorized | Forbidden | ErrorLimited | InternalServerError | ServiceUnavailable | GatewayTimeout>>(
 characterId: number,
    params: GetCharactersCharacterIdSearchParams, options?: { swr?:SWRConfiguration<Awaited<ReturnType<typeof getCharactersCharacterIdSearch>>, TError> & { swrKey?: Key, enabled?: boolean }, axios?: AxiosRequestConfig }

  ) => {

  const {swr: swrOptions, axios: axiosOptions} = options ?? {}

  const isEnabled = swrOptions?.enabled !== false && !!(characterId)
    const swrKey = swrOptions?.swrKey ?? (() => isEnabled ? getGetCharactersCharacterIdSearchKey(characterId,params) : null);
  const swrFn = () => getCharactersCharacterIdSearch(characterId,params, axiosOptions);

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

