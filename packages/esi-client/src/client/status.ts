/**
 * Generated by orval v6.11.1 üç∫
 * Do not edit manually.
 * EVE Swagger Interface
 * An OpenAPI for EVE Online
 * OpenAPI spec version: 1.17
 */
import type { AxiosError, AxiosRequestConfig, AxiosResponse } from "axios";
import axios from "axios";
import type { Key, SWRConfiguration } from "swr";
import useSwr from "swr";

import type {
  BadRequest,
  ErrorLimited,
  GatewayTimeout,
  GetStatus200,
  GetStatusParams,
  InternalServerError,
  ServiceUnavailable,
} from "./model";

/**
 * EVE Server status

---
Alternate route: `/dev/status/`

Alternate route: `/legacy/status/`

Alternate route: `/v1/status/`

Alternate route: `/v2/status/`

---
This route is cached for up to 30 seconds
 * @summary Retrieve the uptime and player counts
 */
export const getStatus = (
  params?: GetStatusParams,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<GetStatus200>> => {
  return axios.get(`/status/`, {
    ...options,
    params: { ...params, ...options?.params },
  });
};

export const getGetStatusKey = (params?: GetStatusParams) => [
  `/status/`,
  ...(params ? [params] : []),
];

export type GetStatusQueryResult = NonNullable<
  Awaited<ReturnType<typeof getStatus>>
>;
export type GetStatusQueryError = AxiosError<
  | void
  | BadRequest
  | ErrorLimited
  | InternalServerError
  | ServiceUnavailable
  | GatewayTimeout
>;

export const useGetStatus = <
  TError = AxiosError<
    | void
    | BadRequest
    | ErrorLimited
    | InternalServerError
    | ServiceUnavailable
    | GatewayTimeout
  >,
>(
  params?: GetStatusParams,
  options?: {
    swr?: SWRConfiguration<Awaited<ReturnType<typeof getStatus>>, TError> & {
      swrKey?: Key;
      enabled?: boolean;
    };
    axios?: AxiosRequestConfig;
  },
) => {
  const { swr: swrOptions, axios: axiosOptions } = options ?? {};

  const isEnabled = swrOptions?.enabled !== false;
  const swrKey =
    swrOptions?.swrKey ?? (() => (isEnabled ? getGetStatusKey(params) : null));
  const swrFn = () => getStatus(params, axiosOptions);

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(
    swrKey,
    swrFn,
    swrOptions,
  );

  return {
    swrKey,
    ...query,
  };
};
