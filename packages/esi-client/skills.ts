/**
 * Generated by orval v6.11.1 üç∫
 * Do not edit manually.
 * EVE Swagger Interface
 * An OpenAPI for EVE Online
 * OpenAPI spec version: 1.17
 */
import axios from 'axios'
import type {
  AxiosRequestConfig,
  AxiosResponse,
  AxiosError
} from 'axios'
import useSwr from 'swr'
import type {
  SWRConfiguration,
  Key
} from 'swr'
import type {
  GetCharactersCharacterIdAttributes200,
  BadRequest,
  Unauthorized,
  Forbidden,
  ErrorLimited,
  InternalServerError,
  ServiceUnavailable,
  GatewayTimeout,
  GetCharactersCharacterIdAttributesParams,
  GetCharactersCharacterIdSkillqueue200Item,
  GetCharactersCharacterIdSkillqueueParams,
  GetCharactersCharacterIdSkills200,
  GetCharactersCharacterIdSkillsParams
} from './model'



  
  /**
 * Return attributes of a character

---
Alternate route: `/dev/characters/{character_id}/attributes/`

Alternate route: `/legacy/characters/{character_id}/attributes/`

Alternate route: `/v1/characters/{character_id}/attributes/`

---
This route is cached for up to 120 seconds
 * @summary Get character attributes
 */
export const getCharactersCharacterIdAttributes = (
    characterId: number,
    params?: GetCharactersCharacterIdAttributesParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<GetCharactersCharacterIdAttributes200>> => {
    return axios.get(
      `/characters/${characterId}/attributes/`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }


export const getGetCharactersCharacterIdAttributesKey = (characterId: number,
    params?: GetCharactersCharacterIdAttributesParams,) => [`/characters/${characterId}/attributes/`, ...(params ? [params]: [])];

    
export type GetCharactersCharacterIdAttributesQueryResult = NonNullable<Awaited<ReturnType<typeof getCharactersCharacterIdAttributes>>>
export type GetCharactersCharacterIdAttributesQueryError = AxiosError<void | BadRequest | Unauthorized | Forbidden | ErrorLimited | InternalServerError | ServiceUnavailable | GatewayTimeout>

export const useGetCharactersCharacterIdAttributes = <TError = AxiosError<void | BadRequest | Unauthorized | Forbidden | ErrorLimited | InternalServerError | ServiceUnavailable | GatewayTimeout>>(
 characterId: number,
    params?: GetCharactersCharacterIdAttributesParams, options?: { swr?:SWRConfiguration<Awaited<ReturnType<typeof getCharactersCharacterIdAttributes>>, TError> & { swrKey?: Key, enabled?: boolean }, axios?: AxiosRequestConfig }

  ) => {

  const {swr: swrOptions, axios: axiosOptions} = options ?? {}

  const isEnabled = swrOptions?.enabled !== false && !!(characterId)
    const swrKey = swrOptions?.swrKey ?? (() => isEnabled ? getGetCharactersCharacterIdAttributesKey(characterId,params) : null);
  const swrFn = () => getCharactersCharacterIdAttributes(characterId,params, axiosOptions);

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * List the configured skill queue for the given character

---
Alternate route: `/dev/characters/{character_id}/skillqueue/`

Alternate route: `/legacy/characters/{character_id}/skillqueue/`

Alternate route: `/v2/characters/{character_id}/skillqueue/`

---
This route is cached for up to 120 seconds
 * @summary Get character's skill queue
 */
export const getCharactersCharacterIdSkillqueue = (
    characterId: number,
    params?: GetCharactersCharacterIdSkillqueueParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<GetCharactersCharacterIdSkillqueue200Item[]>> => {
    return axios.get(
      `/characters/${characterId}/skillqueue/`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }


export const getGetCharactersCharacterIdSkillqueueKey = (characterId: number,
    params?: GetCharactersCharacterIdSkillqueueParams,) => [`/characters/${characterId}/skillqueue/`, ...(params ? [params]: [])];

    
export type GetCharactersCharacterIdSkillqueueQueryResult = NonNullable<Awaited<ReturnType<typeof getCharactersCharacterIdSkillqueue>>>
export type GetCharactersCharacterIdSkillqueueQueryError = AxiosError<void | BadRequest | Unauthorized | Forbidden | ErrorLimited | InternalServerError | ServiceUnavailable | GatewayTimeout>

export const useGetCharactersCharacterIdSkillqueue = <TError = AxiosError<void | BadRequest | Unauthorized | Forbidden | ErrorLimited | InternalServerError | ServiceUnavailable | GatewayTimeout>>(
 characterId: number,
    params?: GetCharactersCharacterIdSkillqueueParams, options?: { swr?:SWRConfiguration<Awaited<ReturnType<typeof getCharactersCharacterIdSkillqueue>>, TError> & { swrKey?: Key, enabled?: boolean }, axios?: AxiosRequestConfig }

  ) => {

  const {swr: swrOptions, axios: axiosOptions} = options ?? {}

  const isEnabled = swrOptions?.enabled !== false && !!(characterId)
    const swrKey = swrOptions?.swrKey ?? (() => isEnabled ? getGetCharactersCharacterIdSkillqueueKey(characterId,params) : null);
  const swrFn = () => getCharactersCharacterIdSkillqueue(characterId,params, axiosOptions);

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * List all trained skills for the given character

---
Alternate route: `/dev/characters/{character_id}/skills/`

Alternate route: `/v4/characters/{character_id}/skills/`

---
This route is cached for up to 120 seconds
 * @summary Get character skills
 */
export const getCharactersCharacterIdSkills = (
    characterId: number,
    params?: GetCharactersCharacterIdSkillsParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<GetCharactersCharacterIdSkills200>> => {
    return axios.get(
      `/characters/${characterId}/skills/`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }


export const getGetCharactersCharacterIdSkillsKey = (characterId: number,
    params?: GetCharactersCharacterIdSkillsParams,) => [`/characters/${characterId}/skills/`, ...(params ? [params]: [])];

    
export type GetCharactersCharacterIdSkillsQueryResult = NonNullable<Awaited<ReturnType<typeof getCharactersCharacterIdSkills>>>
export type GetCharactersCharacterIdSkillsQueryError = AxiosError<void | BadRequest | Unauthorized | Forbidden | ErrorLimited | InternalServerError | ServiceUnavailable | GatewayTimeout>

export const useGetCharactersCharacterIdSkills = <TError = AxiosError<void | BadRequest | Unauthorized | Forbidden | ErrorLimited | InternalServerError | ServiceUnavailable | GatewayTimeout>>(
 characterId: number,
    params?: GetCharactersCharacterIdSkillsParams, options?: { swr?:SWRConfiguration<Awaited<ReturnType<typeof getCharactersCharacterIdSkills>>, TError> & { swrKey?: Key, enabled?: boolean }, axios?: AxiosRequestConfig }

  ) => {

  const {swr: swrOptions, axios: axiosOptions} = options ?? {}

  const isEnabled = swrOptions?.enabled !== false && !!(characterId)
    const swrKey = swrOptions?.swrKey ?? (() => isEnabled ? getGetCharactersCharacterIdSkillsKey(characterId,params) : null);
  const swrFn = () => getCharactersCharacterIdSkills(characterId,params, axiosOptions);

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

