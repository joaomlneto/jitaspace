/**
 * Generated by orval v6.11.1 üç∫
 * Do not edit manually.
 * EVE Swagger Interface
 * An OpenAPI for EVE Online
 * OpenAPI spec version: 1.17
 */
import axios from 'axios'
import type {
  AxiosRequestConfig,
  AxiosResponse,
  AxiosError
} from 'axios'
import useSwr from 'swr'
import type {
  SWRConfiguration,
  Key
} from 'swr'
import type {
  GetCharactersCharacterIdFleet200,
  BadRequest,
  Unauthorized,
  Forbidden,
  GetCharactersCharacterIdFleet404,
  ErrorLimited,
  InternalServerError,
  ServiceUnavailable,
  GatewayTimeout,
  GetCharactersCharacterIdFleetParams,
  GetFleetsFleetId200,
  GetFleetsFleetId404,
  GetFleetsFleetIdParams,
  PutFleetsFleetIdBody,
  PutFleetsFleetIdParams,
  GetFleetsFleetIdMembers200Item,
  GetFleetsFleetIdMembers404,
  GetFleetsFleetIdMembersParams,
  PostFleetsFleetIdMembersBody,
  PostFleetsFleetIdMembersParams,
  DeleteFleetsFleetIdMembersMemberIdParams,
  PutFleetsFleetIdMembersMemberIdBody,
  PutFleetsFleetIdMembersMemberIdParams,
  DeleteFleetsFleetIdSquadsSquadIdParams,
  PutFleetsFleetIdSquadsSquadIdBody,
  PutFleetsFleetIdSquadsSquadIdParams,
  GetFleetsFleetIdWings200Item,
  GetFleetsFleetIdWings404,
  GetFleetsFleetIdWingsParams,
  PostFleetsFleetIdWings201,
  PostFleetsFleetIdWingsParams,
  DeleteFleetsFleetIdWingsWingIdParams,
  PutFleetsFleetIdWingsWingIdBody,
  PutFleetsFleetIdWingsWingIdParams,
  PostFleetsFleetIdWingsWingIdSquads201,
  PostFleetsFleetIdWingsWingIdSquadsParams
} from './model'



  
  /**
 * Return the fleet ID the character is in, if any.

---
Alternate route: `/legacy/characters/{character_id}/fleet/`

Alternate route: `/v1/characters/{character_id}/fleet/`

---
This route is cached for up to 60 seconds

---
Warning: This route has an upgrade available

---
[Diff of the upcoming changes](https://esi.evetech.net/diff/latest/dev/#GET-/characters/{character_id}/fleet/)
 * @summary Get character fleet info
 */
export const getCharactersCharacterIdFleet = (
    characterId: number,
    params?: GetCharactersCharacterIdFleetParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<GetCharactersCharacterIdFleet200>> => {
    return axios.get(
      `/characters/${characterId}/fleet/`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }


export const getGetCharactersCharacterIdFleetKey = (characterId: number,
    params?: GetCharactersCharacterIdFleetParams,) => [`/characters/${characterId}/fleet/`, ...(params ? [params]: [])];

    
export type GetCharactersCharacterIdFleetQueryResult = NonNullable<Awaited<ReturnType<typeof getCharactersCharacterIdFleet>>>
export type GetCharactersCharacterIdFleetQueryError = AxiosError<void | BadRequest | Unauthorized | Forbidden | GetCharactersCharacterIdFleet404 | ErrorLimited | InternalServerError | ServiceUnavailable | GatewayTimeout>

export const useGetCharactersCharacterIdFleet = <TError = AxiosError<void | BadRequest | Unauthorized | Forbidden | GetCharactersCharacterIdFleet404 | ErrorLimited | InternalServerError | ServiceUnavailable | GatewayTimeout>>(
 characterId: number,
    params?: GetCharactersCharacterIdFleetParams, options?: { swr?:SWRConfiguration<Awaited<ReturnType<typeof getCharactersCharacterIdFleet>>, TError> & { swrKey?: Key, enabled?: boolean }, axios?: AxiosRequestConfig }

  ) => {

  const {swr: swrOptions, axios: axiosOptions} = options ?? {}

  const isEnabled = swrOptions?.enabled !== false && !!(characterId)
    const swrKey = swrOptions?.swrKey ?? (() => isEnabled ? getGetCharactersCharacterIdFleetKey(characterId,params) : null);
  const swrFn = () => getCharactersCharacterIdFleet(characterId,params, axiosOptions);

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * Return details about a fleet

---
Alternate route: `/dev/fleets/{fleet_id}/`

Alternate route: `/legacy/fleets/{fleet_id}/`

Alternate route: `/v1/fleets/{fleet_id}/`

---
This route is cached for up to 5 seconds
 * @summary Get fleet information
 */
export const getFleetsFleetId = (
    fleetId: number,
    params?: GetFleetsFleetIdParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<GetFleetsFleetId200>> => {
    return axios.get(
      `/fleets/${fleetId}/`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }


export const getGetFleetsFleetIdKey = (fleetId: number,
    params?: GetFleetsFleetIdParams,) => [`/fleets/${fleetId}/`, ...(params ? [params]: [])];

    
export type GetFleetsFleetIdQueryResult = NonNullable<Awaited<ReturnType<typeof getFleetsFleetId>>>
export type GetFleetsFleetIdQueryError = AxiosError<void | BadRequest | Unauthorized | Forbidden | GetFleetsFleetId404 | ErrorLimited | InternalServerError | ServiceUnavailable | GatewayTimeout>

export const useGetFleetsFleetId = <TError = AxiosError<void | BadRequest | Unauthorized | Forbidden | GetFleetsFleetId404 | ErrorLimited | InternalServerError | ServiceUnavailable | GatewayTimeout>>(
 fleetId: number,
    params?: GetFleetsFleetIdParams, options?: { swr?:SWRConfiguration<Awaited<ReturnType<typeof getFleetsFleetId>>, TError> & { swrKey?: Key, enabled?: boolean }, axios?: AxiosRequestConfig }

  ) => {

  const {swr: swrOptions, axios: axiosOptions} = options ?? {}

  const isEnabled = swrOptions?.enabled !== false && !!(fleetId)
    const swrKey = swrOptions?.swrKey ?? (() => isEnabled ? getGetFleetsFleetIdKey(fleetId,params) : null);
  const swrFn = () => getFleetsFleetId(fleetId,params, axiosOptions);

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * Update settings about a fleet

---
Alternate route: `/dev/fleets/{fleet_id}/`

Alternate route: `/legacy/fleets/{fleet_id}/`

Alternate route: `/v1/fleets/{fleet_id}/`

 * @summary Update fleet
 */
export const putFleetsFleetId = (
    fleetId: number,
    putFleetsFleetIdBody: PutFleetsFleetIdBody,
    params?: PutFleetsFleetIdParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<void>> => {
    return axios.put(
      `/fleets/${fleetId}/`,
      putFleetsFleetIdBody,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }


/**
 * Return information about fleet members

---
Alternate route: `/dev/fleets/{fleet_id}/members/`

Alternate route: `/legacy/fleets/{fleet_id}/members/`

Alternate route: `/v1/fleets/{fleet_id}/members/`

---
This route is cached for up to 5 seconds
 * @summary Get fleet members
 */
export const getFleetsFleetIdMembers = (
    fleetId: number,
    params?: GetFleetsFleetIdMembersParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<GetFleetsFleetIdMembers200Item[]>> => {
    return axios.get(
      `/fleets/${fleetId}/members/`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }


export const getGetFleetsFleetIdMembersKey = (fleetId: number,
    params?: GetFleetsFleetIdMembersParams,) => [`/fleets/${fleetId}/members/`, ...(params ? [params]: [])];

    
export type GetFleetsFleetIdMembersQueryResult = NonNullable<Awaited<ReturnType<typeof getFleetsFleetIdMembers>>>
export type GetFleetsFleetIdMembersQueryError = AxiosError<void | BadRequest | Unauthorized | Forbidden | GetFleetsFleetIdMembers404 | ErrorLimited | InternalServerError | ServiceUnavailable | GatewayTimeout>

export const useGetFleetsFleetIdMembers = <TError = AxiosError<void | BadRequest | Unauthorized | Forbidden | GetFleetsFleetIdMembers404 | ErrorLimited | InternalServerError | ServiceUnavailable | GatewayTimeout>>(
 fleetId: number,
    params?: GetFleetsFleetIdMembersParams, options?: { swr?:SWRConfiguration<Awaited<ReturnType<typeof getFleetsFleetIdMembers>>, TError> & { swrKey?: Key, enabled?: boolean }, axios?: AxiosRequestConfig }

  ) => {

  const {swr: swrOptions, axios: axiosOptions} = options ?? {}

  const isEnabled = swrOptions?.enabled !== false && !!(fleetId)
    const swrKey = swrOptions?.swrKey ?? (() => isEnabled ? getGetFleetsFleetIdMembersKey(fleetId,params) : null);
  const swrFn = () => getFleetsFleetIdMembers(fleetId,params, axiosOptions);

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * Invite a character into the fleet. If a character has a CSPA charge set it is not possible to invite them to the fleet using ESI

---
Alternate route: `/dev/fleets/{fleet_id}/members/`

Alternate route: `/legacy/fleets/{fleet_id}/members/`

Alternate route: `/v1/fleets/{fleet_id}/members/`

 * @summary Create fleet invitation
 */
export const postFleetsFleetIdMembers = (
    fleetId: number,
    postFleetsFleetIdMembersBody: PostFleetsFleetIdMembersBody,
    params?: PostFleetsFleetIdMembersParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<void>> => {
    return axios.post(
      `/fleets/${fleetId}/members/`,
      postFleetsFleetIdMembersBody,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }


/**
 * Kick a fleet member

---
Alternate route: `/dev/fleets/{fleet_id}/members/{member_id}/`

Alternate route: `/legacy/fleets/{fleet_id}/members/{member_id}/`

Alternate route: `/v1/fleets/{fleet_id}/members/{member_id}/`

 * @summary Kick fleet member
 */
export const deleteFleetsFleetIdMembersMemberId = (
    fleetId: number,
    memberId: number,
    params?: DeleteFleetsFleetIdMembersMemberIdParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<void>> => {
    return axios.delete(
      `/fleets/${fleetId}/members/${memberId}/`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }


/**
 * Move a fleet member around

---
Alternate route: `/dev/fleets/{fleet_id}/members/{member_id}/`

Alternate route: `/legacy/fleets/{fleet_id}/members/{member_id}/`

Alternate route: `/v1/fleets/{fleet_id}/members/{member_id}/`

 * @summary Move fleet member
 */
export const putFleetsFleetIdMembersMemberId = (
    fleetId: number,
    memberId: number,
    putFleetsFleetIdMembersMemberIdBody: PutFleetsFleetIdMembersMemberIdBody,
    params?: PutFleetsFleetIdMembersMemberIdParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<void>> => {
    return axios.put(
      `/fleets/${fleetId}/members/${memberId}/`,
      putFleetsFleetIdMembersMemberIdBody,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }


/**
 * Delete a fleet squad, only empty squads can be deleted

---
Alternate route: `/dev/fleets/{fleet_id}/squads/{squad_id}/`

Alternate route: `/legacy/fleets/{fleet_id}/squads/{squad_id}/`

Alternate route: `/v1/fleets/{fleet_id}/squads/{squad_id}/`

 * @summary Delete fleet squad
 */
export const deleteFleetsFleetIdSquadsSquadId = (
    fleetId: number,
    squadId: number,
    params?: DeleteFleetsFleetIdSquadsSquadIdParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<void>> => {
    return axios.delete(
      `/fleets/${fleetId}/squads/${squadId}/`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }


/**
 * Rename a fleet squad

---
Alternate route: `/dev/fleets/{fleet_id}/squads/{squad_id}/`

Alternate route: `/legacy/fleets/{fleet_id}/squads/{squad_id}/`

Alternate route: `/v1/fleets/{fleet_id}/squads/{squad_id}/`

 * @summary Rename fleet squad
 */
export const putFleetsFleetIdSquadsSquadId = (
    fleetId: number,
    squadId: number,
    putFleetsFleetIdSquadsSquadIdBody: PutFleetsFleetIdSquadsSquadIdBody,
    params?: PutFleetsFleetIdSquadsSquadIdParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<void>> => {
    return axios.put(
      `/fleets/${fleetId}/squads/${squadId}/`,
      putFleetsFleetIdSquadsSquadIdBody,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }


/**
 * Return information about wings in a fleet

---
Alternate route: `/dev/fleets/{fleet_id}/wings/`

Alternate route: `/legacy/fleets/{fleet_id}/wings/`

Alternate route: `/v1/fleets/{fleet_id}/wings/`

---
This route is cached for up to 5 seconds
 * @summary Get fleet wings
 */
export const getFleetsFleetIdWings = (
    fleetId: number,
    params?: GetFleetsFleetIdWingsParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<GetFleetsFleetIdWings200Item[]>> => {
    return axios.get(
      `/fleets/${fleetId}/wings/`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }


export const getGetFleetsFleetIdWingsKey = (fleetId: number,
    params?: GetFleetsFleetIdWingsParams,) => [`/fleets/${fleetId}/wings/`, ...(params ? [params]: [])];

    
export type GetFleetsFleetIdWingsQueryResult = NonNullable<Awaited<ReturnType<typeof getFleetsFleetIdWings>>>
export type GetFleetsFleetIdWingsQueryError = AxiosError<void | BadRequest | Unauthorized | Forbidden | GetFleetsFleetIdWings404 | ErrorLimited | InternalServerError | ServiceUnavailable | GatewayTimeout>

export const useGetFleetsFleetIdWings = <TError = AxiosError<void | BadRequest | Unauthorized | Forbidden | GetFleetsFleetIdWings404 | ErrorLimited | InternalServerError | ServiceUnavailable | GatewayTimeout>>(
 fleetId: number,
    params?: GetFleetsFleetIdWingsParams, options?: { swr?:SWRConfiguration<Awaited<ReturnType<typeof getFleetsFleetIdWings>>, TError> & { swrKey?: Key, enabled?: boolean }, axios?: AxiosRequestConfig }

  ) => {

  const {swr: swrOptions, axios: axiosOptions} = options ?? {}

  const isEnabled = swrOptions?.enabled !== false && !!(fleetId)
    const swrKey = swrOptions?.swrKey ?? (() => isEnabled ? getGetFleetsFleetIdWingsKey(fleetId,params) : null);
  const swrFn = () => getFleetsFleetIdWings(fleetId,params, axiosOptions);

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * Create a new wing in a fleet

---
Alternate route: `/dev/fleets/{fleet_id}/wings/`

Alternate route: `/legacy/fleets/{fleet_id}/wings/`

Alternate route: `/v1/fleets/{fleet_id}/wings/`

 * @summary Create fleet wing
 */
export const postFleetsFleetIdWings = (
    fleetId: number,
    params?: PostFleetsFleetIdWingsParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<PostFleetsFleetIdWings201>> => {
    return axios.post(
      `/fleets/${fleetId}/wings/`,undefined,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }


/**
 * Delete a fleet wing, only empty wings can be deleted. The wing may contain squads, but the squads must be empty

---
Alternate route: `/dev/fleets/{fleet_id}/wings/{wing_id}/`

Alternate route: `/legacy/fleets/{fleet_id}/wings/{wing_id}/`

Alternate route: `/v1/fleets/{fleet_id}/wings/{wing_id}/`

 * @summary Delete fleet wing
 */
export const deleteFleetsFleetIdWingsWingId = (
    fleetId: number,
    wingId: number,
    params?: DeleteFleetsFleetIdWingsWingIdParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<void>> => {
    return axios.delete(
      `/fleets/${fleetId}/wings/${wingId}/`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }


/**
 * Rename a fleet wing

---
Alternate route: `/dev/fleets/{fleet_id}/wings/{wing_id}/`

Alternate route: `/legacy/fleets/{fleet_id}/wings/{wing_id}/`

Alternate route: `/v1/fleets/{fleet_id}/wings/{wing_id}/`

 * @summary Rename fleet wing
 */
export const putFleetsFleetIdWingsWingId = (
    fleetId: number,
    wingId: number,
    putFleetsFleetIdWingsWingIdBody: PutFleetsFleetIdWingsWingIdBody,
    params?: PutFleetsFleetIdWingsWingIdParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<void>> => {
    return axios.put(
      `/fleets/${fleetId}/wings/${wingId}/`,
      putFleetsFleetIdWingsWingIdBody,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }


/**
 * Create a new squad in a fleet

---
Alternate route: `/dev/fleets/{fleet_id}/wings/{wing_id}/squads/`

Alternate route: `/legacy/fleets/{fleet_id}/wings/{wing_id}/squads/`

Alternate route: `/v1/fleets/{fleet_id}/wings/{wing_id}/squads/`

 * @summary Create fleet squad
 */
export const postFleetsFleetIdWingsWingIdSquads = (
    fleetId: number,
    wingId: number,
    params?: PostFleetsFleetIdWingsWingIdSquadsParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<PostFleetsFleetIdWingsWingIdSquads201>> => {
    return axios.post(
      `/fleets/${fleetId}/wings/${wingId}/squads/`,undefined,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }


