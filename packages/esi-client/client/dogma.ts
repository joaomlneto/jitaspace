/**
 * Generated by orval v6.11.1 üç∫
 * Do not edit manually.
 * EVE Swagger Interface
 * An OpenAPI for EVE Online
 * OpenAPI spec version: 1.17
 */
import type { AxiosError, AxiosRequestConfig, AxiosResponse } from "axios";
import axios from "axios";
import type { Key, SWRConfiguration } from "swr";
import useSwr from "swr";

import type {
  BadRequest,
  ErrorLimited,
  GatewayTimeout,
  GetDogmaAttributesAttributeId200,
  GetDogmaAttributesAttributeId404,
  GetDogmaAttributesAttributeIdParams,
  GetDogmaAttributesParams,
  GetDogmaDynamicItemsTypeIdItemId200,
  GetDogmaDynamicItemsTypeIdItemId404,
  GetDogmaDynamicItemsTypeIdItemIdParams,
  GetDogmaEffectsEffectId200,
  GetDogmaEffectsEffectId404,
  GetDogmaEffectsEffectIdParams,
  GetDogmaEffectsParams,
  InternalServerError,
  ServiceUnavailable,
} from "./model";

/**
 * Get a list of dogma attribute ids

---
Alternate route: `/dev/dogma/attributes/`

Alternate route: `/legacy/dogma/attributes/`

Alternate route: `/v1/dogma/attributes/`

---
This route expires daily at 11:05
 * @summary Get attributes
 */
export const getDogmaAttributes = (
  params?: GetDogmaAttributesParams,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<number[]>> => {
  return axios.get(`/dogma/attributes/`, {
    ...options,
    params: { ...params, ...options?.params },
  });
};

export const getGetDogmaAttributesKey = (params?: GetDogmaAttributesParams) => [
  `/dogma/attributes/`,
  ...(params ? [params] : []),
];

export type GetDogmaAttributesQueryResult = NonNullable<
  Awaited<ReturnType<typeof getDogmaAttributes>>
>;
export type GetDogmaAttributesQueryError = AxiosError<
  | void
  | BadRequest
  | ErrorLimited
  | InternalServerError
  | ServiceUnavailable
  | GatewayTimeout
>;

export const useGetDogmaAttributes = <
  TError = AxiosError<
    | void
    | BadRequest
    | ErrorLimited
    | InternalServerError
    | ServiceUnavailable
    | GatewayTimeout
  >,
>(
  params?: GetDogmaAttributesParams,
  options?: {
    swr?: SWRConfiguration<
      Awaited<ReturnType<typeof getDogmaAttributes>>,
      TError
    > & { swrKey?: Key; enabled?: boolean };
    axios?: AxiosRequestConfig;
  },
) => {
  const { swr: swrOptions, axios: axiosOptions } = options ?? {};

  const isEnabled = swrOptions?.enabled !== false;
  const swrKey =
    swrOptions?.swrKey ??
    (() => (isEnabled ? getGetDogmaAttributesKey(params) : null));
  const swrFn = () => getDogmaAttributes(params, axiosOptions);

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(
    swrKey,
    swrFn,
    swrOptions,
  );

  return {
    swrKey,
    ...query,
  };
};

/**
 * Get information on a dogma attribute

---
Alternate route: `/dev/dogma/attributes/{attribute_id}/`

Alternate route: `/legacy/dogma/attributes/{attribute_id}/`

Alternate route: `/v1/dogma/attributes/{attribute_id}/`

---
This route expires daily at 11:05
 * @summary Get attribute information
 */
export const getDogmaAttributesAttributeId = (
  attributeId: number,
  params?: GetDogmaAttributesAttributeIdParams,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<GetDogmaAttributesAttributeId200>> => {
  return axios.get(`/dogma/attributes/${attributeId}/`, {
    ...options,
    params: { ...params, ...options?.params },
  });
};

export const getGetDogmaAttributesAttributeIdKey = (
  attributeId: number,
  params?: GetDogmaAttributesAttributeIdParams,
) => [`/dogma/attributes/${attributeId}/`, ...(params ? [params] : [])];

export type GetDogmaAttributesAttributeIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof getDogmaAttributesAttributeId>>
>;
export type GetDogmaAttributesAttributeIdQueryError = AxiosError<
  | void
  | BadRequest
  | GetDogmaAttributesAttributeId404
  | ErrorLimited
  | InternalServerError
  | ServiceUnavailable
  | GatewayTimeout
>;

export const useGetDogmaAttributesAttributeId = <
  TError = AxiosError<
    | void
    | BadRequest
    | GetDogmaAttributesAttributeId404
    | ErrorLimited
    | InternalServerError
    | ServiceUnavailable
    | GatewayTimeout
  >,
>(
  attributeId: number,
  params?: GetDogmaAttributesAttributeIdParams,
  options?: {
    swr?: SWRConfiguration<
      Awaited<ReturnType<typeof getDogmaAttributesAttributeId>>,
      TError
    > & { swrKey?: Key; enabled?: boolean };
    axios?: AxiosRequestConfig;
  },
) => {
  const { swr: swrOptions, axios: axiosOptions } = options ?? {};

  const isEnabled = swrOptions?.enabled !== false && !!attributeId;
  const swrKey =
    swrOptions?.swrKey ??
    (() =>
      isEnabled
        ? getGetDogmaAttributesAttributeIdKey(attributeId, params)
        : null);
  const swrFn = () =>
    getDogmaAttributesAttributeId(attributeId, params, axiosOptions);

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(
    swrKey,
    swrFn,
    swrOptions,
  );

  return {
    swrKey,
    ...query,
  };
};

/**
 * Returns info about a dynamic item resulting from mutation with a mutaplasmid.

---
Alternate route: `/dev/dogma/dynamic/items/{type_id}/{item_id}/`

Alternate route: `/legacy/dogma/dynamic/items/{type_id}/{item_id}/`

Alternate route: `/v1/dogma/dynamic/items/{type_id}/{item_id}/`

---
This route expires daily at 11:05
 * @summary Get dynamic item information
 */
export const getDogmaDynamicItemsTypeIdItemId = (
  typeId: number,
  itemId: number,
  params?: GetDogmaDynamicItemsTypeIdItemIdParams,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<GetDogmaDynamicItemsTypeIdItemId200>> => {
  return axios.get(`/dogma/dynamic/items/${typeId}/${itemId}/`, {
    ...options,
    params: { ...params, ...options?.params },
  });
};

export const getGetDogmaDynamicItemsTypeIdItemIdKey = (
  typeId: number,
  itemId: number,
  params?: GetDogmaDynamicItemsTypeIdItemIdParams,
) => [`/dogma/dynamic/items/${typeId}/${itemId}/`, ...(params ? [params] : [])];

export type GetDogmaDynamicItemsTypeIdItemIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof getDogmaDynamicItemsTypeIdItemId>>
>;
export type GetDogmaDynamicItemsTypeIdItemIdQueryError = AxiosError<
  | void
  | BadRequest
  | GetDogmaDynamicItemsTypeIdItemId404
  | ErrorLimited
  | InternalServerError
  | ServiceUnavailable
  | GatewayTimeout
>;

export const useGetDogmaDynamicItemsTypeIdItemId = <
  TError = AxiosError<
    | void
    | BadRequest
    | GetDogmaDynamicItemsTypeIdItemId404
    | ErrorLimited
    | InternalServerError
    | ServiceUnavailable
    | GatewayTimeout
  >,
>(
  typeId: number,
  itemId: number,
  params?: GetDogmaDynamicItemsTypeIdItemIdParams,
  options?: {
    swr?: SWRConfiguration<
      Awaited<ReturnType<typeof getDogmaDynamicItemsTypeIdItemId>>,
      TError
    > & { swrKey?: Key; enabled?: boolean };
    axios?: AxiosRequestConfig;
  },
) => {
  const { swr: swrOptions, axios: axiosOptions } = options ?? {};

  const isEnabled = swrOptions?.enabled !== false && !!(typeId && itemId);
  const swrKey =
    swrOptions?.swrKey ??
    (() =>
      isEnabled
        ? getGetDogmaDynamicItemsTypeIdItemIdKey(typeId, itemId, params)
        : null);
  const swrFn = () =>
    getDogmaDynamicItemsTypeIdItemId(typeId, itemId, params, axiosOptions);

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(
    swrKey,
    swrFn,
    swrOptions,
  );

  return {
    swrKey,
    ...query,
  };
};

/**
 * Get a list of dogma effect ids

---
Alternate route: `/dev/dogma/effects/`

Alternate route: `/legacy/dogma/effects/`

Alternate route: `/v1/dogma/effects/`

---
This route expires daily at 11:05
 * @summary Get effects
 */
export const getDogmaEffects = (
  params?: GetDogmaEffectsParams,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<number[]>> => {
  return axios.get(`/dogma/effects/`, {
    ...options,
    params: { ...params, ...options?.params },
  });
};

export const getGetDogmaEffectsKey = (params?: GetDogmaEffectsParams) => [
  `/dogma/effects/`,
  ...(params ? [params] : []),
];

export type GetDogmaEffectsQueryResult = NonNullable<
  Awaited<ReturnType<typeof getDogmaEffects>>
>;
export type GetDogmaEffectsQueryError = AxiosError<
  | void
  | BadRequest
  | ErrorLimited
  | InternalServerError
  | ServiceUnavailable
  | GatewayTimeout
>;

export const useGetDogmaEffects = <
  TError = AxiosError<
    | void
    | BadRequest
    | ErrorLimited
    | InternalServerError
    | ServiceUnavailable
    | GatewayTimeout
  >,
>(
  params?: GetDogmaEffectsParams,
  options?: {
    swr?: SWRConfiguration<
      Awaited<ReturnType<typeof getDogmaEffects>>,
      TError
    > & { swrKey?: Key; enabled?: boolean };
    axios?: AxiosRequestConfig;
  },
) => {
  const { swr: swrOptions, axios: axiosOptions } = options ?? {};

  const isEnabled = swrOptions?.enabled !== false;
  const swrKey =
    swrOptions?.swrKey ??
    (() => (isEnabled ? getGetDogmaEffectsKey(params) : null));
  const swrFn = () => getDogmaEffects(params, axiosOptions);

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(
    swrKey,
    swrFn,
    swrOptions,
  );

  return {
    swrKey,
    ...query,
  };
};

/**
 * Get information on a dogma effect

---
Alternate route: `/dev/dogma/effects/{effect_id}/`

Alternate route: `/v2/dogma/effects/{effect_id}/`

---
This route expires daily at 11:05
 * @summary Get effect information
 */
export const getDogmaEffectsEffectId = (
  effectId: number,
  params?: GetDogmaEffectsEffectIdParams,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<GetDogmaEffectsEffectId200>> => {
  return axios.get(`/dogma/effects/${effectId}/`, {
    ...options,
    params: { ...params, ...options?.params },
  });
};

export const getGetDogmaEffectsEffectIdKey = (
  effectId: number,
  params?: GetDogmaEffectsEffectIdParams,
) => [`/dogma/effects/${effectId}/`, ...(params ? [params] : [])];

export type GetDogmaEffectsEffectIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof getDogmaEffectsEffectId>>
>;
export type GetDogmaEffectsEffectIdQueryError = AxiosError<
  | void
  | BadRequest
  | GetDogmaEffectsEffectId404
  | ErrorLimited
  | InternalServerError
  | ServiceUnavailable
  | GatewayTimeout
>;

export const useGetDogmaEffectsEffectId = <
  TError = AxiosError<
    | void
    | BadRequest
    | GetDogmaEffectsEffectId404
    | ErrorLimited
    | InternalServerError
    | ServiceUnavailable
    | GatewayTimeout
  >,
>(
  effectId: number,
  params?: GetDogmaEffectsEffectIdParams,
  options?: {
    swr?: SWRConfiguration<
      Awaited<ReturnType<typeof getDogmaEffectsEffectId>>,
      TError
    > & { swrKey?: Key; enabled?: boolean };
    axios?: AxiosRequestConfig;
  },
) => {
  const { swr: swrOptions, axios: axiosOptions } = options ?? {};

  const isEnabled = swrOptions?.enabled !== false && !!effectId;
  const swrKey =
    swrOptions?.swrKey ??
    (() =>
      isEnabled ? getGetDogmaEffectsEffectIdKey(effectId, params) : null);
  const swrFn = () => getDogmaEffectsEffectId(effectId, params, axiosOptions);

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(
    swrKey,
    swrFn,
    swrOptions,
  );

  return {
    swrKey,
    ...query,
  };
};
