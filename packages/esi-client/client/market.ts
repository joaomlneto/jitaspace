/**
 * Generated by orval v6.11.1 üç∫
 * Do not edit manually.
 * EVE Swagger Interface
 * An OpenAPI for EVE Online
 * OpenAPI spec version: 1.17
 */
import type { AxiosError, AxiosRequestConfig, AxiosResponse } from "axios";
import axios from "axios";
import type { Key, SWRConfiguration } from "swr";
import useSwr from "swr";

import type {
  BadRequest,
  ErrorLimited,
  Forbidden,
  GatewayTimeout,
  GetCharactersCharacterIdOrders200Item,
  GetCharactersCharacterIdOrdersHistory200Item,
  GetCharactersCharacterIdOrdersHistoryParams,
  GetCharactersCharacterIdOrdersParams,
  GetCorporationsCorporationIdOrders200Item,
  GetCorporationsCorporationIdOrdersHistory200Item,
  GetCorporationsCorporationIdOrdersHistoryParams,
  GetCorporationsCorporationIdOrdersParams,
  GetMarketsGroupsMarketGroupId200,
  GetMarketsGroupsMarketGroupId404,
  GetMarketsGroupsMarketGroupIdParams,
  GetMarketsGroupsParams,
  GetMarketsPrices200Item,
  GetMarketsPricesParams,
  GetMarketsRegionIdHistory200Item,
  GetMarketsRegionIdHistory404,
  GetMarketsRegionIdHistory422,
  GetMarketsRegionIdHistory520,
  GetMarketsRegionIdHistoryParams,
  GetMarketsRegionIdOrders200Item,
  GetMarketsRegionIdOrders404,
  GetMarketsRegionIdOrders422,
  GetMarketsRegionIdOrdersParams,
  GetMarketsRegionIdTypesParams,
  GetMarketsStructuresStructureId200Item,
  GetMarketsStructuresStructureIdParams,
  InternalServerError,
  ServiceUnavailable,
  Unauthorized,
} from "./model";

/**
 * List open market orders placed by a character

---
Alternate route: `/dev/characters/{character_id}/orders/`

Alternate route: `/v2/characters/{character_id}/orders/`

---
This route is cached for up to 1200 seconds
 * @summary List open orders from a character
 */
export const getCharactersCharacterIdOrders = (
  characterId: number,
  params?: GetCharactersCharacterIdOrdersParams,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<GetCharactersCharacterIdOrders200Item[]>> => {
  return axios.get(`/characters/${characterId}/orders/`, {
    ...options,
    params: { ...params, ...options?.params },
  });
};

export const getGetCharactersCharacterIdOrdersKey = (
  characterId: number,
  params?: GetCharactersCharacterIdOrdersParams,
) => [`/characters/${characterId}/orders/`, ...(params ? [params] : [])];

export type GetCharactersCharacterIdOrdersQueryResult = NonNullable<
  Awaited<ReturnType<typeof getCharactersCharacterIdOrders>>
>;
export type GetCharactersCharacterIdOrdersQueryError = AxiosError<
  | void
  | BadRequest
  | Unauthorized
  | Forbidden
  | ErrorLimited
  | InternalServerError
  | ServiceUnavailable
  | GatewayTimeout
>;

export const useGetCharactersCharacterIdOrders = <
  TError = AxiosError<
    | void
    | BadRequest
    | Unauthorized
    | Forbidden
    | ErrorLimited
    | InternalServerError
    | ServiceUnavailable
    | GatewayTimeout
  >,
>(
  characterId: number,
  params?: GetCharactersCharacterIdOrdersParams,
  options?: {
    swr?: SWRConfiguration<
      Awaited<ReturnType<typeof getCharactersCharacterIdOrders>>,
      TError
    > & { swrKey?: Key; enabled?: boolean };
    axios?: AxiosRequestConfig;
  },
) => {
  const { swr: swrOptions, axios: axiosOptions } = options ?? {};

  const isEnabled = swrOptions?.enabled !== false && !!characterId;
  const swrKey =
    swrOptions?.swrKey ??
    (() =>
      isEnabled
        ? getGetCharactersCharacterIdOrdersKey(characterId, params)
        : null);
  const swrFn = () =>
    getCharactersCharacterIdOrders(characterId, params, axiosOptions);

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(
    swrKey,
    swrFn,
    swrOptions,
  );

  return {
    swrKey,
    ...query,
  };
};

/**
 * List cancelled and expired market orders placed by a character up to 90 days in the past.

---
Alternate route: `/dev/characters/{character_id}/orders/history/`

Alternate route: `/legacy/characters/{character_id}/orders/history/`

Alternate route: `/v1/characters/{character_id}/orders/history/`

---
This route is cached for up to 3600 seconds
 * @summary List historical orders by a character
 */
export const getCharactersCharacterIdOrdersHistory = (
  characterId: number,
  params?: GetCharactersCharacterIdOrdersHistoryParams,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<GetCharactersCharacterIdOrdersHistory200Item[]>> => {
  return axios.get(`/characters/${characterId}/orders/history/`, {
    ...options,
    params: { ...params, ...options?.params },
  });
};

export const getGetCharactersCharacterIdOrdersHistoryKey = (
  characterId: number,
  params?: GetCharactersCharacterIdOrdersHistoryParams,
) => [
  `/characters/${characterId}/orders/history/`,
  ...(params ? [params] : []),
];

export type GetCharactersCharacterIdOrdersHistoryQueryResult = NonNullable<
  Awaited<ReturnType<typeof getCharactersCharacterIdOrdersHistory>>
>;
export type GetCharactersCharacterIdOrdersHistoryQueryError = AxiosError<
  | void
  | BadRequest
  | Unauthorized
  | Forbidden
  | ErrorLimited
  | InternalServerError
  | ServiceUnavailable
  | GatewayTimeout
>;

export const useGetCharactersCharacterIdOrdersHistory = <
  TError = AxiosError<
    | void
    | BadRequest
    | Unauthorized
    | Forbidden
    | ErrorLimited
    | InternalServerError
    | ServiceUnavailable
    | GatewayTimeout
  >,
>(
  characterId: number,
  params?: GetCharactersCharacterIdOrdersHistoryParams,
  options?: {
    swr?: SWRConfiguration<
      Awaited<ReturnType<typeof getCharactersCharacterIdOrdersHistory>>,
      TError
    > & { swrKey?: Key; enabled?: boolean };
    axios?: AxiosRequestConfig;
  },
) => {
  const { swr: swrOptions, axios: axiosOptions } = options ?? {};

  const isEnabled = swrOptions?.enabled !== false && !!characterId;
  const swrKey =
    swrOptions?.swrKey ??
    (() =>
      isEnabled
        ? getGetCharactersCharacterIdOrdersHistoryKey(characterId, params)
        : null);
  const swrFn = () =>
    getCharactersCharacterIdOrdersHistory(characterId, params, axiosOptions);

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(
    swrKey,
    swrFn,
    swrOptions,
  );

  return {
    swrKey,
    ...query,
  };
};

/**
 * List open market orders placed on behalf of a corporation

---
Alternate route: `/dev/corporations/{corporation_id}/orders/`

Alternate route: `/v3/corporations/{corporation_id}/orders/`

---
This route is cached for up to 1200 seconds

---
Requires one of the following EVE corporation role(s): Accountant, Trader

 * @summary List open orders from a corporation
 */
export const getCorporationsCorporationIdOrders = (
  corporationId: number,
  params?: GetCorporationsCorporationIdOrdersParams,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<GetCorporationsCorporationIdOrders200Item[]>> => {
  return axios.get(`/corporations/${corporationId}/orders/`, {
    ...options,
    params: { ...params, ...options?.params },
  });
};

export const getGetCorporationsCorporationIdOrdersKey = (
  corporationId: number,
  params?: GetCorporationsCorporationIdOrdersParams,
) => [`/corporations/${corporationId}/orders/`, ...(params ? [params] : [])];

export type GetCorporationsCorporationIdOrdersQueryResult = NonNullable<
  Awaited<ReturnType<typeof getCorporationsCorporationIdOrders>>
>;
export type GetCorporationsCorporationIdOrdersQueryError = AxiosError<
  | void
  | BadRequest
  | Unauthorized
  | Forbidden
  | ErrorLimited
  | InternalServerError
  | ServiceUnavailable
  | GatewayTimeout
>;

export const useGetCorporationsCorporationIdOrders = <
  TError = AxiosError<
    | void
    | BadRequest
    | Unauthorized
    | Forbidden
    | ErrorLimited
    | InternalServerError
    | ServiceUnavailable
    | GatewayTimeout
  >,
>(
  corporationId: number,
  params?: GetCorporationsCorporationIdOrdersParams,
  options?: {
    swr?: SWRConfiguration<
      Awaited<ReturnType<typeof getCorporationsCorporationIdOrders>>,
      TError
    > & { swrKey?: Key; enabled?: boolean };
    axios?: AxiosRequestConfig;
  },
) => {
  const { swr: swrOptions, axios: axiosOptions } = options ?? {};

  const isEnabled = swrOptions?.enabled !== false && !!corporationId;
  const swrKey =
    swrOptions?.swrKey ??
    (() =>
      isEnabled
        ? getGetCorporationsCorporationIdOrdersKey(corporationId, params)
        : null);
  const swrFn = () =>
    getCorporationsCorporationIdOrders(corporationId, params, axiosOptions);

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(
    swrKey,
    swrFn,
    swrOptions,
  );

  return {
    swrKey,
    ...query,
  };
};

/**
 * List cancelled and expired market orders placed on behalf of a corporation up to 90 days in the past.

---
Alternate route: `/dev/corporations/{corporation_id}/orders/history/`

Alternate route: `/v2/corporations/{corporation_id}/orders/history/`

---
This route is cached for up to 3600 seconds

---
Requires one of the following EVE corporation role(s): Accountant, Trader

 * @summary List historical orders from a corporation
 */
export const getCorporationsCorporationIdOrdersHistory = (
  corporationId: number,
  params?: GetCorporationsCorporationIdOrdersHistoryParams,
  options?: AxiosRequestConfig,
): Promise<
  AxiosResponse<GetCorporationsCorporationIdOrdersHistory200Item[]>
> => {
  return axios.get(`/corporations/${corporationId}/orders/history/`, {
    ...options,
    params: { ...params, ...options?.params },
  });
};

export const getGetCorporationsCorporationIdOrdersHistoryKey = (
  corporationId: number,
  params?: GetCorporationsCorporationIdOrdersHistoryParams,
) => [
  `/corporations/${corporationId}/orders/history/`,
  ...(params ? [params] : []),
];

export type GetCorporationsCorporationIdOrdersHistoryQueryResult = NonNullable<
  Awaited<ReturnType<typeof getCorporationsCorporationIdOrdersHistory>>
>;
export type GetCorporationsCorporationIdOrdersHistoryQueryError = AxiosError<
  | void
  | BadRequest
  | Unauthorized
  | Forbidden
  | ErrorLimited
  | InternalServerError
  | ServiceUnavailable
  | GatewayTimeout
>;

export const useGetCorporationsCorporationIdOrdersHistory = <
  TError = AxiosError<
    | void
    | BadRequest
    | Unauthorized
    | Forbidden
    | ErrorLimited
    | InternalServerError
    | ServiceUnavailable
    | GatewayTimeout
  >,
>(
  corporationId: number,
  params?: GetCorporationsCorporationIdOrdersHistoryParams,
  options?: {
    swr?: SWRConfiguration<
      Awaited<ReturnType<typeof getCorporationsCorporationIdOrdersHistory>>,
      TError
    > & { swrKey?: Key; enabled?: boolean };
    axios?: AxiosRequestConfig;
  },
) => {
  const { swr: swrOptions, axios: axiosOptions } = options ?? {};

  const isEnabled = swrOptions?.enabled !== false && !!corporationId;
  const swrKey =
    swrOptions?.swrKey ??
    (() =>
      isEnabled
        ? getGetCorporationsCorporationIdOrdersHistoryKey(corporationId, params)
        : null);
  const swrFn = () =>
    getCorporationsCorporationIdOrdersHistory(
      corporationId,
      params,
      axiosOptions,
    );

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(
    swrKey,
    swrFn,
    swrOptions,
  );

  return {
    swrKey,
    ...query,
  };
};

/**
 * Get a list of item groups

---
Alternate route: `/dev/markets/groups/`

Alternate route: `/legacy/markets/groups/`

Alternate route: `/v1/markets/groups/`

---
This route expires daily at 11:05
 * @summary Get item groups
 */
export const getMarketsGroups = (
  params?: GetMarketsGroupsParams,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<number[]>> => {
  return axios.get(`/markets/groups/`, {
    ...options,
    params: { ...params, ...options?.params },
  });
};

export const getGetMarketsGroupsKey = (params?: GetMarketsGroupsParams) => [
  `/markets/groups/`,
  ...(params ? [params] : []),
];

export type GetMarketsGroupsQueryResult = NonNullable<
  Awaited<ReturnType<typeof getMarketsGroups>>
>;
export type GetMarketsGroupsQueryError = AxiosError<
  | void
  | BadRequest
  | ErrorLimited
  | InternalServerError
  | ServiceUnavailable
  | GatewayTimeout
>;

export const useGetMarketsGroups = <
  TError = AxiosError<
    | void
    | BadRequest
    | ErrorLimited
    | InternalServerError
    | ServiceUnavailable
    | GatewayTimeout
  >,
>(
  params?: GetMarketsGroupsParams,
  options?: {
    swr?: SWRConfiguration<
      Awaited<ReturnType<typeof getMarketsGroups>>,
      TError
    > & { swrKey?: Key; enabled?: boolean };
    axios?: AxiosRequestConfig;
  },
) => {
  const { swr: swrOptions, axios: axiosOptions } = options ?? {};

  const isEnabled = swrOptions?.enabled !== false;
  const swrKey =
    swrOptions?.swrKey ??
    (() => (isEnabled ? getGetMarketsGroupsKey(params) : null));
  const swrFn = () => getMarketsGroups(params, axiosOptions);

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(
    swrKey,
    swrFn,
    swrOptions,
  );

  return {
    swrKey,
    ...query,
  };
};

/**
 * Get information on an item group

---
Alternate route: `/dev/markets/groups/{market_group_id}/`

Alternate route: `/legacy/markets/groups/{market_group_id}/`

Alternate route: `/v1/markets/groups/{market_group_id}/`

---
This route expires daily at 11:05
 * @summary Get item group information
 */
export const getMarketsGroupsMarketGroupId = (
  marketGroupId: number,
  params?: GetMarketsGroupsMarketGroupIdParams,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<GetMarketsGroupsMarketGroupId200>> => {
  return axios.get(`/markets/groups/${marketGroupId}/`, {
    ...options,
    params: { ...params, ...options?.params },
  });
};

export const getGetMarketsGroupsMarketGroupIdKey = (
  marketGroupId: number,
  params?: GetMarketsGroupsMarketGroupIdParams,
) => [`/markets/groups/${marketGroupId}/`, ...(params ? [params] : [])];

export type GetMarketsGroupsMarketGroupIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof getMarketsGroupsMarketGroupId>>
>;
export type GetMarketsGroupsMarketGroupIdQueryError = AxiosError<
  | void
  | BadRequest
  | GetMarketsGroupsMarketGroupId404
  | ErrorLimited
  | InternalServerError
  | ServiceUnavailable
  | GatewayTimeout
>;

export const useGetMarketsGroupsMarketGroupId = <
  TError = AxiosError<
    | void
    | BadRequest
    | GetMarketsGroupsMarketGroupId404
    | ErrorLimited
    | InternalServerError
    | ServiceUnavailable
    | GatewayTimeout
  >,
>(
  marketGroupId: number,
  params?: GetMarketsGroupsMarketGroupIdParams,
  options?: {
    swr?: SWRConfiguration<
      Awaited<ReturnType<typeof getMarketsGroupsMarketGroupId>>,
      TError
    > & { swrKey?: Key; enabled?: boolean };
    axios?: AxiosRequestConfig;
  },
) => {
  const { swr: swrOptions, axios: axiosOptions } = options ?? {};

  const isEnabled = swrOptions?.enabled !== false && !!marketGroupId;
  const swrKey =
    swrOptions?.swrKey ??
    (() =>
      isEnabled
        ? getGetMarketsGroupsMarketGroupIdKey(marketGroupId, params)
        : null);
  const swrFn = () =>
    getMarketsGroupsMarketGroupId(marketGroupId, params, axiosOptions);

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(
    swrKey,
    swrFn,
    swrOptions,
  );

  return {
    swrKey,
    ...query,
  };
};

/**
 * Return a list of prices

---
Alternate route: `/dev/markets/prices/`

Alternate route: `/legacy/markets/prices/`

Alternate route: `/v1/markets/prices/`

---
This route is cached for up to 3600 seconds
 * @summary List market prices
 */
export const getMarketsPrices = (
  params?: GetMarketsPricesParams,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<GetMarketsPrices200Item[]>> => {
  return axios.get(`/markets/prices/`, {
    ...options,
    params: { ...params, ...options?.params },
  });
};

export const getGetMarketsPricesKey = (params?: GetMarketsPricesParams) => [
  `/markets/prices/`,
  ...(params ? [params] : []),
];

export type GetMarketsPricesQueryResult = NonNullable<
  Awaited<ReturnType<typeof getMarketsPrices>>
>;
export type GetMarketsPricesQueryError = AxiosError<
  | void
  | BadRequest
  | ErrorLimited
  | InternalServerError
  | ServiceUnavailable
  | GatewayTimeout
>;

export const useGetMarketsPrices = <
  TError = AxiosError<
    | void
    | BadRequest
    | ErrorLimited
    | InternalServerError
    | ServiceUnavailable
    | GatewayTimeout
  >,
>(
  params?: GetMarketsPricesParams,
  options?: {
    swr?: SWRConfiguration<
      Awaited<ReturnType<typeof getMarketsPrices>>,
      TError
    > & { swrKey?: Key; enabled?: boolean };
    axios?: AxiosRequestConfig;
  },
) => {
  const { swr: swrOptions, axios: axiosOptions } = options ?? {};

  const isEnabled = swrOptions?.enabled !== false;
  const swrKey =
    swrOptions?.swrKey ??
    (() => (isEnabled ? getGetMarketsPricesKey(params) : null));
  const swrFn = () => getMarketsPrices(params, axiosOptions);

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(
    swrKey,
    swrFn,
    swrOptions,
  );

  return {
    swrKey,
    ...query,
  };
};

/**
 * Return all orders in a structure

---
Alternate route: `/dev/markets/structures/{structure_id}/`

Alternate route: `/legacy/markets/structures/{structure_id}/`

Alternate route: `/v1/markets/structures/{structure_id}/`

---
This route is cached for up to 300 seconds
 * @summary List orders in a structure
 */
export const getMarketsStructuresStructureId = (
  structureId: number,
  params?: GetMarketsStructuresStructureIdParams,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<GetMarketsStructuresStructureId200Item[]>> => {
  return axios.get(`/markets/structures/${structureId}/`, {
    ...options,
    params: { ...params, ...options?.params },
  });
};

export const getGetMarketsStructuresStructureIdKey = (
  structureId: number,
  params?: GetMarketsStructuresStructureIdParams,
) => [`/markets/structures/${structureId}/`, ...(params ? [params] : [])];

export type GetMarketsStructuresStructureIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof getMarketsStructuresStructureId>>
>;
export type GetMarketsStructuresStructureIdQueryError = AxiosError<
  | void
  | BadRequest
  | Unauthorized
  | Forbidden
  | ErrorLimited
  | InternalServerError
  | ServiceUnavailable
  | GatewayTimeout
>;

export const useGetMarketsStructuresStructureId = <
  TError = AxiosError<
    | void
    | BadRequest
    | Unauthorized
    | Forbidden
    | ErrorLimited
    | InternalServerError
    | ServiceUnavailable
    | GatewayTimeout
  >,
>(
  structureId: number,
  params?: GetMarketsStructuresStructureIdParams,
  options?: {
    swr?: SWRConfiguration<
      Awaited<ReturnType<typeof getMarketsStructuresStructureId>>,
      TError
    > & { swrKey?: Key; enabled?: boolean };
    axios?: AxiosRequestConfig;
  },
) => {
  const { swr: swrOptions, axios: axiosOptions } = options ?? {};

  const isEnabled = swrOptions?.enabled !== false && !!structureId;
  const swrKey =
    swrOptions?.swrKey ??
    (() =>
      isEnabled
        ? getGetMarketsStructuresStructureIdKey(structureId, params)
        : null);
  const swrFn = () =>
    getMarketsStructuresStructureId(structureId, params, axiosOptions);

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(
    swrKey,
    swrFn,
    swrOptions,
  );

  return {
    swrKey,
    ...query,
  };
};

/**
 * Return a list of historical market statistics for the specified type in a region

---
Alternate route: `/dev/markets/{region_id}/history/`

Alternate route: `/legacy/markets/{region_id}/history/`

Alternate route: `/v1/markets/{region_id}/history/`

---
This route expires daily at 11:05
 * @summary List historical market statistics in a region
 */
export const getMarketsRegionIdHistory = (
  regionId: number,
  params: GetMarketsRegionIdHistoryParams,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<GetMarketsRegionIdHistory200Item[]>> => {
  return axios.get(`/markets/${regionId}/history/`, {
    ...options,
    params: { ...params, ...options?.params },
  });
};

export const getGetMarketsRegionIdHistoryKey = (
  regionId: number,
  params: GetMarketsRegionIdHistoryParams,
) => [`/markets/${regionId}/history/`, ...(params ? [params] : [])];

export type GetMarketsRegionIdHistoryQueryResult = NonNullable<
  Awaited<ReturnType<typeof getMarketsRegionIdHistory>>
>;
export type GetMarketsRegionIdHistoryQueryError = AxiosError<
  | void
  | BadRequest
  | GetMarketsRegionIdHistory404
  | ErrorLimited
  | GetMarketsRegionIdHistory422
  | InternalServerError
  | ServiceUnavailable
  | GatewayTimeout
  | GetMarketsRegionIdHistory520
>;

export const useGetMarketsRegionIdHistory = <
  TError = AxiosError<
    | void
    | BadRequest
    | GetMarketsRegionIdHistory404
    | ErrorLimited
    | GetMarketsRegionIdHistory422
    | InternalServerError
    | ServiceUnavailable
    | GatewayTimeout
    | GetMarketsRegionIdHistory520
  >,
>(
  regionId: number,
  params: GetMarketsRegionIdHistoryParams,
  options?: {
    swr?: SWRConfiguration<
      Awaited<ReturnType<typeof getMarketsRegionIdHistory>>,
      TError
    > & { swrKey?: Key; enabled?: boolean };
    axios?: AxiosRequestConfig;
  },
) => {
  const { swr: swrOptions, axios: axiosOptions } = options ?? {};

  const isEnabled = swrOptions?.enabled !== false && !!regionId;
  const swrKey =
    swrOptions?.swrKey ??
    (() =>
      isEnabled ? getGetMarketsRegionIdHistoryKey(regionId, params) : null);
  const swrFn = () => getMarketsRegionIdHistory(regionId, params, axiosOptions);

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(
    swrKey,
    swrFn,
    swrOptions,
  );

  return {
    swrKey,
    ...query,
  };
};

/**
 * Return a list of orders in a region

---
Alternate route: `/dev/markets/{region_id}/orders/`

Alternate route: `/legacy/markets/{region_id}/orders/`

Alternate route: `/v1/markets/{region_id}/orders/`

---
This route is cached for up to 300 seconds
 * @summary List orders in a region
 */
export const getMarketsRegionIdOrders = (
  regionId: number,
  params: GetMarketsRegionIdOrdersParams,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<GetMarketsRegionIdOrders200Item[]>> => {
  return axios.get(`/markets/${regionId}/orders/`, {
    ...options,
    params: { ...params, ...options?.params },
  });
};

export const getGetMarketsRegionIdOrdersKey = (
  regionId: number,
  params: GetMarketsRegionIdOrdersParams,
) => [`/markets/${regionId}/orders/`, ...(params ? [params] : [])];

export type GetMarketsRegionIdOrdersQueryResult = NonNullable<
  Awaited<ReturnType<typeof getMarketsRegionIdOrders>>
>;
export type GetMarketsRegionIdOrdersQueryError = AxiosError<
  | void
  | BadRequest
  | GetMarketsRegionIdOrders404
  | ErrorLimited
  | GetMarketsRegionIdOrders422
  | InternalServerError
  | ServiceUnavailable
  | GatewayTimeout
>;

export const useGetMarketsRegionIdOrders = <
  TError = AxiosError<
    | void
    | BadRequest
    | GetMarketsRegionIdOrders404
    | ErrorLimited
    | GetMarketsRegionIdOrders422
    | InternalServerError
    | ServiceUnavailable
    | GatewayTimeout
  >,
>(
  regionId: number,
  params: GetMarketsRegionIdOrdersParams,
  options?: {
    swr?: SWRConfiguration<
      Awaited<ReturnType<typeof getMarketsRegionIdOrders>>,
      TError
    > & { swrKey?: Key; enabled?: boolean };
    axios?: AxiosRequestConfig;
  },
) => {
  const { swr: swrOptions, axios: axiosOptions } = options ?? {};

  const isEnabled = swrOptions?.enabled !== false && !!regionId;
  const swrKey =
    swrOptions?.swrKey ??
    (() =>
      isEnabled ? getGetMarketsRegionIdOrdersKey(regionId, params) : null);
  const swrFn = () => getMarketsRegionIdOrders(regionId, params, axiosOptions);

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(
    swrKey,
    swrFn,
    swrOptions,
  );

  return {
    swrKey,
    ...query,
  };
};

/**
 * Return a list of type IDs that have active orders in the region, for efficient market indexing.

---
Alternate route: `/dev/markets/{region_id}/types/`

Alternate route: `/legacy/markets/{region_id}/types/`

Alternate route: `/v1/markets/{region_id}/types/`

---
This route is cached for up to 600 seconds
 * @summary List type IDs relevant to a market
 */
export const getMarketsRegionIdTypes = (
  regionId: number,
  params?: GetMarketsRegionIdTypesParams,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<number[]>> => {
  return axios.get(`/markets/${regionId}/types/`, {
    ...options,
    params: { ...params, ...options?.params },
  });
};

export const getGetMarketsRegionIdTypesKey = (
  regionId: number,
  params?: GetMarketsRegionIdTypesParams,
) => [`/markets/${regionId}/types/`, ...(params ? [params] : [])];

export type GetMarketsRegionIdTypesQueryResult = NonNullable<
  Awaited<ReturnType<typeof getMarketsRegionIdTypes>>
>;
export type GetMarketsRegionIdTypesQueryError = AxiosError<
  | void
  | BadRequest
  | ErrorLimited
  | InternalServerError
  | ServiceUnavailable
  | GatewayTimeout
>;

export const useGetMarketsRegionIdTypes = <
  TError = AxiosError<
    | void
    | BadRequest
    | ErrorLimited
    | InternalServerError
    | ServiceUnavailable
    | GatewayTimeout
  >,
>(
  regionId: number,
  params?: GetMarketsRegionIdTypesParams,
  options?: {
    swr?: SWRConfiguration<
      Awaited<ReturnType<typeof getMarketsRegionIdTypes>>,
      TError
    > & { swrKey?: Key; enabled?: boolean };
    axios?: AxiosRequestConfig;
  },
) => {
  const { swr: swrOptions, axios: axiosOptions } = options ?? {};

  const isEnabled = swrOptions?.enabled !== false && !!regionId;
  const swrKey =
    swrOptions?.swrKey ??
    (() =>
      isEnabled ? getGetMarketsRegionIdTypesKey(regionId, params) : null);
  const swrFn = () => getMarketsRegionIdTypes(regionId, params, axiosOptions);

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(
    swrKey,
    swrFn,
    swrOptions,
  );

  return {
    swrKey,
    ...query,
  };
};
