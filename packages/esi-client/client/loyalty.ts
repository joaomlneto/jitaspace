/**
 * Generated by orval v6.11.1 üç∫
 * Do not edit manually.
 * EVE Swagger Interface
 * An OpenAPI for EVE Online
 * OpenAPI spec version: 1.17
 */
import type { AxiosError, AxiosRequestConfig, AxiosResponse } from "axios";
import axios from "axios";
import type { Key, SWRConfiguration } from "swr";
import useSwr from "swr";

import type {
  BadRequest,
  ErrorLimited,
  Forbidden,
  GatewayTimeout,
  GetCharactersCharacterIdLoyaltyPoints200Item,
  GetCharactersCharacterIdLoyaltyPointsParams,
  GetLoyaltyStoresCorporationIdOffers200Item,
  GetLoyaltyStoresCorporationIdOffers404,
  GetLoyaltyStoresCorporationIdOffersParams,
  InternalServerError,
  ServiceUnavailable,
  Unauthorized,
} from "./model";

/**
 * Return a list of loyalty points for all corporations the character has worked for

---
Alternate route: `/dev/characters/{character_id}/loyalty/points/`

Alternate route: `/legacy/characters/{character_id}/loyalty/points/`

Alternate route: `/v1/characters/{character_id}/loyalty/points/`

---
This route is cached for up to 3600 seconds
 * @summary Get loyalty points
 */
export const getCharactersCharacterIdLoyaltyPoints = (
  characterId: number,
  params?: GetCharactersCharacterIdLoyaltyPointsParams,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<GetCharactersCharacterIdLoyaltyPoints200Item[]>> => {
  return axios.get(`/characters/${characterId}/loyalty/points/`, {
    ...options,
    params: { ...params, ...options?.params },
  });
};

export const getGetCharactersCharacterIdLoyaltyPointsKey = (
  characterId: number,
  params?: GetCharactersCharacterIdLoyaltyPointsParams,
) => [
  `/characters/${characterId}/loyalty/points/`,
  ...(params ? [params] : []),
];

export type GetCharactersCharacterIdLoyaltyPointsQueryResult = NonNullable<
  Awaited<ReturnType<typeof getCharactersCharacterIdLoyaltyPoints>>
>;
export type GetCharactersCharacterIdLoyaltyPointsQueryError = AxiosError<
  | void
  | BadRequest
  | Unauthorized
  | Forbidden
  | ErrorLimited
  | InternalServerError
  | ServiceUnavailable
  | GatewayTimeout
>;

export const useGetCharactersCharacterIdLoyaltyPoints = <
  TError = AxiosError<
    | void
    | BadRequest
    | Unauthorized
    | Forbidden
    | ErrorLimited
    | InternalServerError
    | ServiceUnavailable
    | GatewayTimeout
  >,
>(
  characterId: number,
  params?: GetCharactersCharacterIdLoyaltyPointsParams,
  options?: {
    swr?: SWRConfiguration<
      Awaited<ReturnType<typeof getCharactersCharacterIdLoyaltyPoints>>,
      TError
    > & { swrKey?: Key; enabled?: boolean };
    axios?: AxiosRequestConfig;
  },
) => {
  const { swr: swrOptions, axios: axiosOptions } = options ?? {};

  const isEnabled = swrOptions?.enabled !== false && !!characterId;
  const swrKey =
    swrOptions?.swrKey ??
    (() =>
      isEnabled
        ? getGetCharactersCharacterIdLoyaltyPointsKey(characterId, params)
        : null);
  const swrFn = () =>
    getCharactersCharacterIdLoyaltyPoints(characterId, params, axiosOptions);

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(
    swrKey,
    swrFn,
    swrOptions,
  );

  return {
    swrKey,
    ...query,
  };
};

/**
 * Return a list of offers from a specific corporation's loyalty store

---
Alternate route: `/dev/loyalty/stores/{corporation_id}/offers/`

Alternate route: `/legacy/loyalty/stores/{corporation_id}/offers/`

Alternate route: `/v1/loyalty/stores/{corporation_id}/offers/`

---
This route expires daily at 11:05
 * @summary List loyalty store offers
 */
export const getLoyaltyStoresCorporationIdOffers = (
  corporationId: number,
  params?: GetLoyaltyStoresCorporationIdOffersParams,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<GetLoyaltyStoresCorporationIdOffers200Item[]>> => {
  return axios.get(`/loyalty/stores/${corporationId}/offers/`, {
    ...options,
    params: { ...params, ...options?.params },
  });
};

export const getGetLoyaltyStoresCorporationIdOffersKey = (
  corporationId: number,
  params?: GetLoyaltyStoresCorporationIdOffersParams,
) => [`/loyalty/stores/${corporationId}/offers/`, ...(params ? [params] : [])];

export type GetLoyaltyStoresCorporationIdOffersQueryResult = NonNullable<
  Awaited<ReturnType<typeof getLoyaltyStoresCorporationIdOffers>>
>;
export type GetLoyaltyStoresCorporationIdOffersQueryError = AxiosError<
  | void
  | BadRequest
  | GetLoyaltyStoresCorporationIdOffers404
  | ErrorLimited
  | InternalServerError
  | ServiceUnavailable
  | GatewayTimeout
>;

export const useGetLoyaltyStoresCorporationIdOffers = <
  TError = AxiosError<
    | void
    | BadRequest
    | GetLoyaltyStoresCorporationIdOffers404
    | ErrorLimited
    | InternalServerError
    | ServiceUnavailable
    | GatewayTimeout
  >,
>(
  corporationId: number,
  params?: GetLoyaltyStoresCorporationIdOffersParams,
  options?: {
    swr?: SWRConfiguration<
      Awaited<ReturnType<typeof getLoyaltyStoresCorporationIdOffers>>,
      TError
    > & { swrKey?: Key; enabled?: boolean };
    axios?: AxiosRequestConfig;
  },
) => {
  const { swr: swrOptions, axios: axiosOptions } = options ?? {};

  const isEnabled = swrOptions?.enabled !== false && !!corporationId;
  const swrKey =
    swrOptions?.swrKey ??
    (() =>
      isEnabled
        ? getGetLoyaltyStoresCorporationIdOffersKey(corporationId, params)
        : null);
  const swrFn = () =>
    getLoyaltyStoresCorporationIdOffers(corporationId, params, axiosOptions);

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(
    swrKey,
    swrFn,
    swrOptions,
  );

  return {
    swrKey,
    ...query,
  };
};
