/**
 * Generated by orval v6.11.1 üç∫
 * Do not edit manually.
 * EVE Swagger Interface
 * An OpenAPI for EVE Online
 * OpenAPI spec version: 1.17
 */
import type { AxiosError, AxiosRequestConfig, AxiosResponse } from "axios";
import axios from "axios";
import type { Key, SWRConfiguration } from "swr";
import useSwr from "swr";

import type {
  BadRequest,
  ErrorLimited,
  Forbidden,
  GatewayTimeout,
  GetCharactersCharacterIdLocation200,
  GetCharactersCharacterIdLocationParams,
  GetCharactersCharacterIdOnline200,
  GetCharactersCharacterIdOnlineParams,
  GetCharactersCharacterIdShip200,
  GetCharactersCharacterIdShipParams,
  InternalServerError,
  ServiceUnavailable,
  Unauthorized,
} from "./model";

/**
 * Information about the characters current location. Returns the current solar system id, and also the current station or structure ID if applicable

---
Alternate route: `/dev/characters/{character_id}/location/`

Alternate route: `/legacy/characters/{character_id}/location/`

Alternate route: `/v1/characters/{character_id}/location/`

Alternate route: `/v2/characters/{character_id}/location/`

---
This route is cached for up to 5 seconds
 * @summary Get character location
 */
export const getCharactersCharacterIdLocation = (
  characterId: number,
  params?: GetCharactersCharacterIdLocationParams,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<GetCharactersCharacterIdLocation200>> => {
  return axios.get(`/characters/${characterId}/location/`, {
    ...options,
    params: { ...params, ...options?.params },
  });
};

export const getGetCharactersCharacterIdLocationKey = (
  characterId: number,
  params?: GetCharactersCharacterIdLocationParams,
) => [`/characters/${characterId}/location/`, ...(params ? [params] : [])];

export type GetCharactersCharacterIdLocationQueryResult = NonNullable<
  Awaited<ReturnType<typeof getCharactersCharacterIdLocation>>
>;
export type GetCharactersCharacterIdLocationQueryError = AxiosError<
  | void
  | BadRequest
  | Unauthorized
  | Forbidden
  | ErrorLimited
  | InternalServerError
  | ServiceUnavailable
  | GatewayTimeout
>;

export const useGetCharactersCharacterIdLocation = <
  TError = AxiosError<
    | void
    | BadRequest
    | Unauthorized
    | Forbidden
    | ErrorLimited
    | InternalServerError
    | ServiceUnavailable
    | GatewayTimeout
  >,
>(
  characterId: number,
  params?: GetCharactersCharacterIdLocationParams,
  options?: {
    swr?: SWRConfiguration<
      Awaited<ReturnType<typeof getCharactersCharacterIdLocation>>,
      TError
    > & { swrKey?: Key; enabled?: boolean };
    axios?: AxiosRequestConfig;
  },
) => {
  const { swr: swrOptions, axios: axiosOptions } = options ?? {};

  const isEnabled = swrOptions?.enabled !== false && !!characterId;
  const swrKey =
    swrOptions?.swrKey ??
    (() =>
      isEnabled
        ? getGetCharactersCharacterIdLocationKey(characterId, params)
        : null);
  const swrFn = () =>
    getCharactersCharacterIdLocation(characterId, params, axiosOptions);

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(
    swrKey,
    swrFn,
    swrOptions,
  );

  return {
    swrKey,
    ...query,
  };
};

/**
 * Checks if the character is currently online

---
Alternate route: `/dev/characters/{character_id}/online/`

Alternate route: `/v2/characters/{character_id}/online/`

Alternate route: `/v3/characters/{character_id}/online/`

---
This route is cached for up to 60 seconds
 * @summary Get character online
 */
export const getCharactersCharacterIdOnline = (
  characterId: number,
  params?: GetCharactersCharacterIdOnlineParams,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<GetCharactersCharacterIdOnline200>> => {
  return axios.get(`/characters/${characterId}/online/`, {
    ...options,
    params: { ...params, ...options?.params },
  });
};

export const getGetCharactersCharacterIdOnlineKey = (
  characterId: number,
  params?: GetCharactersCharacterIdOnlineParams,
) => [`/characters/${characterId}/online/`, ...(params ? [params] : [])];

export type GetCharactersCharacterIdOnlineQueryResult = NonNullable<
  Awaited<ReturnType<typeof getCharactersCharacterIdOnline>>
>;
export type GetCharactersCharacterIdOnlineQueryError = AxiosError<
  | void
  | BadRequest
  | Unauthorized
  | Forbidden
  | ErrorLimited
  | InternalServerError
  | ServiceUnavailable
  | GatewayTimeout
>;

export const useGetCharactersCharacterIdOnline = <
  TError = AxiosError<
    | void
    | BadRequest
    | Unauthorized
    | Forbidden
    | ErrorLimited
    | InternalServerError
    | ServiceUnavailable
    | GatewayTimeout
  >,
>(
  characterId: number,
  params?: GetCharactersCharacterIdOnlineParams,
  options?: {
    swr?: SWRConfiguration<
      Awaited<ReturnType<typeof getCharactersCharacterIdOnline>>,
      TError
    > & { swrKey?: Key; enabled?: boolean };
    axios?: AxiosRequestConfig;
  },
) => {
  const { swr: swrOptions, axios: axiosOptions } = options ?? {};

  const isEnabled = swrOptions?.enabled !== false && !!characterId;
  const swrKey =
    swrOptions?.swrKey ??
    (() =>
      isEnabled
        ? getGetCharactersCharacterIdOnlineKey(characterId, params)
        : null);
  const swrFn = () =>
    getCharactersCharacterIdOnline(characterId, params, axiosOptions);

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(
    swrKey,
    swrFn,
    swrOptions,
  );

  return {
    swrKey,
    ...query,
  };
};

/**
 * Get the current ship type, name and id

---
Alternate route: `/dev/characters/{character_id}/ship/`

Alternate route: `/legacy/characters/{character_id}/ship/`

Alternate route: `/v1/characters/{character_id}/ship/`

Alternate route: `/v2/characters/{character_id}/ship/`

---
This route is cached for up to 5 seconds
 * @summary Get current ship
 */
export const getCharactersCharacterIdShip = (
  characterId: number,
  params?: GetCharactersCharacterIdShipParams,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<GetCharactersCharacterIdShip200>> => {
  return axios.get(`/characters/${characterId}/ship/`, {
    ...options,
    params: { ...params, ...options?.params },
  });
};

export const getGetCharactersCharacterIdShipKey = (
  characterId: number,
  params?: GetCharactersCharacterIdShipParams,
) => [`/characters/${characterId}/ship/`, ...(params ? [params] : [])];

export type GetCharactersCharacterIdShipQueryResult = NonNullable<
  Awaited<ReturnType<typeof getCharactersCharacterIdShip>>
>;
export type GetCharactersCharacterIdShipQueryError = AxiosError<
  | void
  | BadRequest
  | Unauthorized
  | Forbidden
  | ErrorLimited
  | InternalServerError
  | ServiceUnavailable
  | GatewayTimeout
>;

export const useGetCharactersCharacterIdShip = <
  TError = AxiosError<
    | void
    | BadRequest
    | Unauthorized
    | Forbidden
    | ErrorLimited
    | InternalServerError
    | ServiceUnavailable
    | GatewayTimeout
  >,
>(
  characterId: number,
  params?: GetCharactersCharacterIdShipParams,
  options?: {
    swr?: SWRConfiguration<
      Awaited<ReturnType<typeof getCharactersCharacterIdShip>>,
      TError
    > & { swrKey?: Key; enabled?: boolean };
    axios?: AxiosRequestConfig;
  },
) => {
  const { swr: swrOptions, axios: axiosOptions } = options ?? {};

  const isEnabled = swrOptions?.enabled !== false && !!characterId;
  const swrKey =
    swrOptions?.swrKey ??
    (() =>
      isEnabled
        ? getGetCharactersCharacterIdShipKey(characterId, params)
        : null);
  const swrFn = () =>
    getCharactersCharacterIdShip(characterId, params, axiosOptions);

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(
    swrKey,
    swrFn,
    swrOptions,
  );

  return {
    swrKey,
    ...query,
  };
};
