/**
 * Generated by orval v6.11.1 üç∫
 * Do not edit manually.
 * EVE Swagger Interface
 * An OpenAPI for EVE Online
 * OpenAPI spec version: 1.17
 */
import type { AxiosError, AxiosRequestConfig, AxiosResponse } from "axios";
import axios from "axios";
import type { Key, SWRConfiguration } from "swr";
import useSwr from "swr";

import type {
  BadRequest,
  ErrorLimited,
  Forbidden,
  GatewayTimeout,
  GetCharactersCharacterIdCalendar200Item,
  GetCharactersCharacterIdCalendarEventId200,
  GetCharactersCharacterIdCalendarEventId404,
  GetCharactersCharacterIdCalendarEventIdAttendees200Item,
  GetCharactersCharacterIdCalendarEventIdAttendees404,
  GetCharactersCharacterIdCalendarEventIdAttendeesParams,
  GetCharactersCharacterIdCalendarEventIdParams,
  GetCharactersCharacterIdCalendarParams,
  InternalServerError,
  PutCharactersCharacterIdCalendarEventIdBody,
  PutCharactersCharacterIdCalendarEventIdParams,
  ServiceUnavailable,
  Unauthorized,
} from "./model";

/**
 * Get 50 event summaries from the calendar. If no from_event ID is given, the resource will return the next 50 chronological event summaries from now. If a from_event ID is specified, it will return the next 50 chronological event summaries from after that event

---
Alternate route: `/dev/characters/{character_id}/calendar/`

Alternate route: `/legacy/characters/{character_id}/calendar/`

Alternate route: `/v1/characters/{character_id}/calendar/`

Alternate route: `/v2/characters/{character_id}/calendar/`

---
This route is cached for up to 5 seconds
 * @summary List calendar event summaries
 */
export const getCharactersCharacterIdCalendar = (
  characterId: number,
  params?: GetCharactersCharacterIdCalendarParams,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<GetCharactersCharacterIdCalendar200Item[]>> => {
  return axios.get(`/characters/${characterId}/calendar/`, {
    ...options,
    params: { ...params, ...options?.params },
  });
};

export const getGetCharactersCharacterIdCalendarKey = (
  characterId: number,
  params?: GetCharactersCharacterIdCalendarParams,
) => [`/characters/${characterId}/calendar/`, ...(params ? [params] : [])];

export type GetCharactersCharacterIdCalendarQueryResult = NonNullable<
  Awaited<ReturnType<typeof getCharactersCharacterIdCalendar>>
>;
export type GetCharactersCharacterIdCalendarQueryError = AxiosError<
  | void
  | BadRequest
  | Unauthorized
  | Forbidden
  | ErrorLimited
  | InternalServerError
  | ServiceUnavailable
  | GatewayTimeout
>;

export const useGetCharactersCharacterIdCalendar = <
  TError = AxiosError<
    | void
    | BadRequest
    | Unauthorized
    | Forbidden
    | ErrorLimited
    | InternalServerError
    | ServiceUnavailable
    | GatewayTimeout
  >,
>(
  characterId: number,
  params?: GetCharactersCharacterIdCalendarParams,
  options?: {
    swr?: SWRConfiguration<
      Awaited<ReturnType<typeof getCharactersCharacterIdCalendar>>,
      TError
    > & { swrKey?: Key; enabled?: boolean };
    axios?: AxiosRequestConfig;
  },
) => {
  const { swr: swrOptions, axios: axiosOptions } = options ?? {};

  const isEnabled = swrOptions?.enabled !== false && !!characterId;
  const swrKey =
    swrOptions?.swrKey ??
    (() =>
      isEnabled
        ? getGetCharactersCharacterIdCalendarKey(characterId, params)
        : null);
  const swrFn = () =>
    getCharactersCharacterIdCalendar(characterId, params, axiosOptions);

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(
    swrKey,
    swrFn,
    swrOptions,
  );

  return {
    swrKey,
    ...query,
  };
};

/**
 * Get all the information for a specific event

---
Alternate route: `/dev/characters/{character_id}/calendar/{event_id}/`

Alternate route: `/legacy/characters/{character_id}/calendar/{event_id}/`

Alternate route: `/v3/characters/{character_id}/calendar/{event_id}/`

Alternate route: `/v4/characters/{character_id}/calendar/{event_id}/`

---
This route is cached for up to 5 seconds
 * @summary Get an event
 */
export const getCharactersCharacterIdCalendarEventId = (
  characterId: number,
  eventId: number,
  params?: GetCharactersCharacterIdCalendarEventIdParams,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<GetCharactersCharacterIdCalendarEventId200>> => {
  return axios.get(`/characters/${characterId}/calendar/${eventId}/`, {
    ...options,
    params: { ...params, ...options?.params },
  });
};

export const getGetCharactersCharacterIdCalendarEventIdKey = (
  characterId: number,
  eventId: number,
  params?: GetCharactersCharacterIdCalendarEventIdParams,
) => [
  `/characters/${characterId}/calendar/${eventId}/`,
  ...(params ? [params] : []),
];

export type GetCharactersCharacterIdCalendarEventIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof getCharactersCharacterIdCalendarEventId>>
>;
export type GetCharactersCharacterIdCalendarEventIdQueryError = AxiosError<
  | void
  | BadRequest
  | Unauthorized
  | Forbidden
  | GetCharactersCharacterIdCalendarEventId404
  | ErrorLimited
  | InternalServerError
  | ServiceUnavailable
  | GatewayTimeout
>;

export const useGetCharactersCharacterIdCalendarEventId = <
  TError = AxiosError<
    | void
    | BadRequest
    | Unauthorized
    | Forbidden
    | GetCharactersCharacterIdCalendarEventId404
    | ErrorLimited
    | InternalServerError
    | ServiceUnavailable
    | GatewayTimeout
  >,
>(
  characterId: number,
  eventId: number,
  params?: GetCharactersCharacterIdCalendarEventIdParams,
  options?: {
    swr?: SWRConfiguration<
      Awaited<ReturnType<typeof getCharactersCharacterIdCalendarEventId>>,
      TError
    > & { swrKey?: Key; enabled?: boolean };
    axios?: AxiosRequestConfig;
  },
) => {
  const { swr: swrOptions, axios: axiosOptions } = options ?? {};

  const isEnabled = swrOptions?.enabled !== false && !!(characterId && eventId);
  const swrKey =
    swrOptions?.swrKey ??
    (() =>
      isEnabled
        ? getGetCharactersCharacterIdCalendarEventIdKey(
            characterId,
            eventId,
            params,
          )
        : null);
  const swrFn = () =>
    getCharactersCharacterIdCalendarEventId(
      characterId,
      eventId,
      params,
      axiosOptions,
    );

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(
    swrKey,
    swrFn,
    swrOptions,
  );

  return {
    swrKey,
    ...query,
  };
};

/**
 * Set your response status to an event

---
Alternate route: `/dev/characters/{character_id}/calendar/{event_id}/`

Alternate route: `/legacy/characters/{character_id}/calendar/{event_id}/`

Alternate route: `/v3/characters/{character_id}/calendar/{event_id}/`

Alternate route: `/v4/characters/{character_id}/calendar/{event_id}/`

---
This route is cached for up to 5 seconds
 * @summary Respond to an event
 */
export const putCharactersCharacterIdCalendarEventId = (
  characterId: number,
  eventId: number,
  putCharactersCharacterIdCalendarEventIdBody: PutCharactersCharacterIdCalendarEventIdBody,
  params?: PutCharactersCharacterIdCalendarEventIdParams,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<void>> => {
  return axios.put(
    `/characters/${characterId}/calendar/${eventId}/`,
    putCharactersCharacterIdCalendarEventIdBody,
    {
      ...options,
      params: { ...params, ...options?.params },
    },
  );
};

/**
 * Get all invited attendees for a given event

---
Alternate route: `/dev/characters/{character_id}/calendar/{event_id}/attendees/`

Alternate route: `/legacy/characters/{character_id}/calendar/{event_id}/attendees/`

Alternate route: `/v1/characters/{character_id}/calendar/{event_id}/attendees/`

Alternate route: `/v2/characters/{character_id}/calendar/{event_id}/attendees/`

---
This route is cached for up to 600 seconds
 * @summary Get attendees
 */
export const getCharactersCharacterIdCalendarEventIdAttendees = (
  characterId: number,
  eventId: number,
  params?: GetCharactersCharacterIdCalendarEventIdAttendeesParams,
  options?: AxiosRequestConfig,
): Promise<
  AxiosResponse<GetCharactersCharacterIdCalendarEventIdAttendees200Item[]>
> => {
  return axios.get(
    `/characters/${characterId}/calendar/${eventId}/attendees/`,
    {
      ...options,
      params: { ...params, ...options?.params },
    },
  );
};

export const getGetCharactersCharacterIdCalendarEventIdAttendeesKey = (
  characterId: number,
  eventId: number,
  params?: GetCharactersCharacterIdCalendarEventIdAttendeesParams,
) => [
  `/characters/${characterId}/calendar/${eventId}/attendees/`,
  ...(params ? [params] : []),
];

export type GetCharactersCharacterIdCalendarEventIdAttendeesQueryResult =
  NonNullable<
    Awaited<ReturnType<typeof getCharactersCharacterIdCalendarEventIdAttendees>>
  >;
export type GetCharactersCharacterIdCalendarEventIdAttendeesQueryError =
  AxiosError<
    | void
    | BadRequest
    | Unauthorized
    | Forbidden
    | GetCharactersCharacterIdCalendarEventIdAttendees404
    | ErrorLimited
    | InternalServerError
    | ServiceUnavailable
    | GatewayTimeout
  >;

export const useGetCharactersCharacterIdCalendarEventIdAttendees = <
  TError = AxiosError<
    | void
    | BadRequest
    | Unauthorized
    | Forbidden
    | GetCharactersCharacterIdCalendarEventIdAttendees404
    | ErrorLimited
    | InternalServerError
    | ServiceUnavailable
    | GatewayTimeout
  >,
>(
  characterId: number,
  eventId: number,
  params?: GetCharactersCharacterIdCalendarEventIdAttendeesParams,
  options?: {
    swr?: SWRConfiguration<
      Awaited<
        ReturnType<typeof getCharactersCharacterIdCalendarEventIdAttendees>
      >,
      TError
    > & { swrKey?: Key; enabled?: boolean };
    axios?: AxiosRequestConfig;
  },
) => {
  const { swr: swrOptions, axios: axiosOptions } = options ?? {};

  const isEnabled = swrOptions?.enabled !== false && !!(characterId && eventId);
  const swrKey =
    swrOptions?.swrKey ??
    (() =>
      isEnabled
        ? getGetCharactersCharacterIdCalendarEventIdAttendeesKey(
            characterId,
            eventId,
            params,
          )
        : null);
  const swrFn = () =>
    getCharactersCharacterIdCalendarEventIdAttendees(
      characterId,
      eventId,
      params,
      axiosOptions,
    );

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(
    swrKey,
    swrFn,
    swrOptions,
  );

  return {
    swrKey,
    ...query,
  };
};
