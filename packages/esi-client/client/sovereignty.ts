/**
 * Generated by orval v6.11.1 üç∫
 * Do not edit manually.
 * EVE Swagger Interface
 * An OpenAPI for EVE Online
 * OpenAPI spec version: 1.17
 */
import type { AxiosError, AxiosRequestConfig, AxiosResponse } from "axios";
import axios from "axios";
import type { Key, SWRConfiguration } from "swr";
import useSwr from "swr";

import type {
  BadRequest,
  ErrorLimited,
  GatewayTimeout,
  GetSovereigntyCampaigns200Item,
  GetSovereigntyCampaignsParams,
  GetSovereigntyMap200Item,
  GetSovereigntyMapParams,
  GetSovereigntyStructures200Item,
  GetSovereigntyStructuresParams,
  InternalServerError,
  ServiceUnavailable,
} from "./model";

/**
 * Shows sovereignty data for campaigns.

---
Alternate route: `/dev/sovereignty/campaigns/`

Alternate route: `/legacy/sovereignty/campaigns/`

Alternate route: `/v1/sovereignty/campaigns/`

---
This route is cached for up to 5 seconds
 * @summary List sovereignty campaigns
 */
export const getSovereigntyCampaigns = (
  params?: GetSovereigntyCampaignsParams,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<GetSovereigntyCampaigns200Item[]>> => {
  return axios.get(`/sovereignty/campaigns/`, {
    ...options,
    params: { ...params, ...options?.params },
  });
};

export const getGetSovereigntyCampaignsKey = (
  params?: GetSovereigntyCampaignsParams,
) => [`/sovereignty/campaigns/`, ...(params ? [params] : [])];

export type GetSovereigntyCampaignsQueryResult = NonNullable<
  Awaited<ReturnType<typeof getSovereigntyCampaigns>>
>;
export type GetSovereigntyCampaignsQueryError = AxiosError<
  | void
  | BadRequest
  | ErrorLimited
  | InternalServerError
  | ServiceUnavailable
  | GatewayTimeout
>;

export const useGetSovereigntyCampaigns = <
  TError = AxiosError<
    | void
    | BadRequest
    | ErrorLimited
    | InternalServerError
    | ServiceUnavailable
    | GatewayTimeout
  >,
>(
  params?: GetSovereigntyCampaignsParams,
  options?: {
    swr?: SWRConfiguration<
      Awaited<ReturnType<typeof getSovereigntyCampaigns>>,
      TError
    > & { swrKey?: Key; enabled?: boolean };
    axios?: AxiosRequestConfig;
  },
) => {
  const { swr: swrOptions, axios: axiosOptions } = options ?? {};

  const isEnabled = swrOptions?.enabled !== false;
  const swrKey =
    swrOptions?.swrKey ??
    (() => (isEnabled ? getGetSovereigntyCampaignsKey(params) : null));
  const swrFn = () => getSovereigntyCampaigns(params, axiosOptions);

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(
    swrKey,
    swrFn,
    swrOptions,
  );

  return {
    swrKey,
    ...query,
  };
};

/**
 * Shows sovereignty information for solar systems

---
Alternate route: `/dev/sovereignty/map/`

Alternate route: `/legacy/sovereignty/map/`

Alternate route: `/v1/sovereignty/map/`

---
This route is cached for up to 3600 seconds
 * @summary List sovereignty of systems
 */
export const getSovereigntyMap = (
  params?: GetSovereigntyMapParams,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<GetSovereigntyMap200Item[]>> => {
  return axios.get(`/sovereignty/map/`, {
    ...options,
    params: { ...params, ...options?.params },
  });
};

export const getGetSovereigntyMapKey = (params?: GetSovereigntyMapParams) => [
  `/sovereignty/map/`,
  ...(params ? [params] : []),
];

export type GetSovereigntyMapQueryResult = NonNullable<
  Awaited<ReturnType<typeof getSovereigntyMap>>
>;
export type GetSovereigntyMapQueryError = AxiosError<
  | void
  | BadRequest
  | ErrorLimited
  | InternalServerError
  | ServiceUnavailable
  | GatewayTimeout
>;

export const useGetSovereigntyMap = <
  TError = AxiosError<
    | void
    | BadRequest
    | ErrorLimited
    | InternalServerError
    | ServiceUnavailable
    | GatewayTimeout
  >,
>(
  params?: GetSovereigntyMapParams,
  options?: {
    swr?: SWRConfiguration<
      Awaited<ReturnType<typeof getSovereigntyMap>>,
      TError
    > & { swrKey?: Key; enabled?: boolean };
    axios?: AxiosRequestConfig;
  },
) => {
  const { swr: swrOptions, axios: axiosOptions } = options ?? {};

  const isEnabled = swrOptions?.enabled !== false;
  const swrKey =
    swrOptions?.swrKey ??
    (() => (isEnabled ? getGetSovereigntyMapKey(params) : null));
  const swrFn = () => getSovereigntyMap(params, axiosOptions);

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(
    swrKey,
    swrFn,
    swrOptions,
  );

  return {
    swrKey,
    ...query,
  };
};

/**
 * Shows sovereignty data for structures.

---
Alternate route: `/dev/sovereignty/structures/`

Alternate route: `/legacy/sovereignty/structures/`

Alternate route: `/v1/sovereignty/structures/`

---
This route is cached for up to 120 seconds
 * @summary List sovereignty structures
 */
export const getSovereigntyStructures = (
  params?: GetSovereigntyStructuresParams,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<GetSovereigntyStructures200Item[]>> => {
  return axios.get(`/sovereignty/structures/`, {
    ...options,
    params: { ...params, ...options?.params },
  });
};

export const getGetSovereigntyStructuresKey = (
  params?: GetSovereigntyStructuresParams,
) => [`/sovereignty/structures/`, ...(params ? [params] : [])];

export type GetSovereigntyStructuresQueryResult = NonNullable<
  Awaited<ReturnType<typeof getSovereigntyStructures>>
>;
export type GetSovereigntyStructuresQueryError = AxiosError<
  | void
  | BadRequest
  | ErrorLimited
  | InternalServerError
  | ServiceUnavailable
  | GatewayTimeout
>;

export const useGetSovereigntyStructures = <
  TError = AxiosError<
    | void
    | BadRequest
    | ErrorLimited
    | InternalServerError
    | ServiceUnavailable
    | GatewayTimeout
  >,
>(
  params?: GetSovereigntyStructuresParams,
  options?: {
    swr?: SWRConfiguration<
      Awaited<ReturnType<typeof getSovereigntyStructures>>,
      TError
    > & { swrKey?: Key; enabled?: boolean };
    axios?: AxiosRequestConfig;
  },
) => {
  const { swr: swrOptions, axios: axiosOptions } = options ?? {};

  const isEnabled = swrOptions?.enabled !== false;
  const swrKey =
    swrOptions?.swrKey ??
    (() => (isEnabled ? getGetSovereigntyStructuresKey(params) : null));
  const swrFn = () => getSovereigntyStructures(params, axiosOptions);

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(
    swrKey,
    swrFn,
    swrOptions,
  );

  return {
    swrKey,
    ...query,
  };
};
