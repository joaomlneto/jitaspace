/**
 * Generated by orval v6.11.1 üç∫
 * Do not edit manually.
 * EVE Swagger Interface
 * An OpenAPI for EVE Online
 * OpenAPI spec version: 1.17
 */
import type { AxiosError, AxiosRequestConfig, AxiosResponse } from "axios";
import axios from "axios";
import type { Key, SWRConfiguration } from "swr";
import useSwr from "swr";

import type {
  BadRequest,
  ErrorLimited,
  Forbidden,
  GatewayTimeout,
  GetCorporationsCorporationId200,
  GetCorporationsCorporationId404,
  GetCorporationsCorporationIdAlliancehistory200Item,
  GetCorporationsCorporationIdAlliancehistoryParams,
  GetCorporationsCorporationIdBlueprints200Item,
  GetCorporationsCorporationIdBlueprintsParams,
  GetCorporationsCorporationIdContainersLogs200Item,
  GetCorporationsCorporationIdContainersLogsParams,
  GetCorporationsCorporationIdDivisions200,
  GetCorporationsCorporationIdDivisionsParams,
  GetCorporationsCorporationIdFacilities200Item,
  GetCorporationsCorporationIdFacilitiesParams,
  GetCorporationsCorporationIdIcons200,
  GetCorporationsCorporationIdIcons404,
  GetCorporationsCorporationIdIconsParams,
  GetCorporationsCorporationIdMedals200Item,
  GetCorporationsCorporationIdMedalsIssued200Item,
  GetCorporationsCorporationIdMedalsIssuedParams,
  GetCorporationsCorporationIdMedalsParams,
  GetCorporationsCorporationIdMembersLimitParams,
  GetCorporationsCorporationIdMembersParams,
  GetCorporationsCorporationIdMembersTitles200Item,
  GetCorporationsCorporationIdMembersTitlesParams,
  GetCorporationsCorporationIdMembertracking200Item,
  GetCorporationsCorporationIdMembertrackingParams,
  GetCorporationsCorporationIdParams,
  GetCorporationsCorporationIdRoles200Item,
  GetCorporationsCorporationIdRolesHistory200Item,
  GetCorporationsCorporationIdRolesHistoryParams,
  GetCorporationsCorporationIdRolesParams,
  GetCorporationsCorporationIdShareholders200Item,
  GetCorporationsCorporationIdShareholdersParams,
  GetCorporationsCorporationIdStandings200Item,
  GetCorporationsCorporationIdStandingsParams,
  GetCorporationsCorporationIdStarbases200Item,
  GetCorporationsCorporationIdStarbasesParams,
  GetCorporationsCorporationIdStarbasesStarbaseId200,
  GetCorporationsCorporationIdStarbasesStarbaseIdParams,
  GetCorporationsCorporationIdStructures200Item,
  GetCorporationsCorporationIdStructuresParams,
  GetCorporationsCorporationIdTitles200Item,
  GetCorporationsCorporationIdTitlesParams,
  GetCorporationsNpccorpsParams,
  InternalServerError,
  ServiceUnavailable,
  Unauthorized,
} from "./model";

/**
 * Get a list of npc corporations

---
Alternate route: `/dev/corporations/npccorps/`

Alternate route: `/v2/corporations/npccorps/`

---
This route expires daily at 11:05
 * @summary Get npc corporations
 */
export const getCorporationsNpccorps = (
  params?: GetCorporationsNpccorpsParams,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<number[]>> => {
  return axios.get(`/corporations/npccorps/`, {
    ...options,
    params: { ...params, ...options?.params },
  });
};

export const getGetCorporationsNpccorpsKey = (
  params?: GetCorporationsNpccorpsParams,
) => [`/corporations/npccorps/`, ...(params ? [params] : [])];

export type GetCorporationsNpccorpsQueryResult = NonNullable<
  Awaited<ReturnType<typeof getCorporationsNpccorps>>
>;
export type GetCorporationsNpccorpsQueryError = AxiosError<
  | void
  | BadRequest
  | ErrorLimited
  | InternalServerError
  | ServiceUnavailable
  | GatewayTimeout
>;

export const useGetCorporationsNpccorps = <
  TError = AxiosError<
    | void
    | BadRequest
    | ErrorLimited
    | InternalServerError
    | ServiceUnavailable
    | GatewayTimeout
  >,
>(
  params?: GetCorporationsNpccorpsParams,
  options?: {
    swr?: SWRConfiguration<
      Awaited<ReturnType<typeof getCorporationsNpccorps>>,
      TError
    > & { swrKey?: Key; enabled?: boolean };
    axios?: AxiosRequestConfig;
  },
) => {
  const { swr: swrOptions, axios: axiosOptions } = options ?? {};

  const isEnabled = swrOptions?.enabled !== false;
  const swrKey =
    swrOptions?.swrKey ??
    (() => (isEnabled ? getGetCorporationsNpccorpsKey(params) : null));
  const swrFn = () => getCorporationsNpccorps(params, axiosOptions);

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(
    swrKey,
    swrFn,
    swrOptions,
  );

  return {
    swrKey,
    ...query,
  };
};

/**
 * Public information about a corporation

---
Alternate route: `/dev/corporations/{corporation_id}/`

Alternate route: `/v5/corporations/{corporation_id}/`

---
This route is cached for up to 3600 seconds
 * @summary Get corporation information
 */
export const getCorporationsCorporationId = (
  corporationId: number,
  params?: GetCorporationsCorporationIdParams,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<GetCorporationsCorporationId200>> => {
  return axios.get(`/corporations/${corporationId}/`, {
    ...options,
    params: { ...params, ...options?.params },
  });
};

export const getGetCorporationsCorporationIdKey = (
  corporationId: number,
  params?: GetCorporationsCorporationIdParams,
) => [`/corporations/${corporationId}/`, ...(params ? [params] : [])];

export type GetCorporationsCorporationIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof getCorporationsCorporationId>>
>;
export type GetCorporationsCorporationIdQueryError = AxiosError<
  | void
  | BadRequest
  | GetCorporationsCorporationId404
  | ErrorLimited
  | InternalServerError
  | ServiceUnavailable
  | GatewayTimeout
>;

export const useGetCorporationsCorporationId = <
  TError = AxiosError<
    | void
    | BadRequest
    | GetCorporationsCorporationId404
    | ErrorLimited
    | InternalServerError
    | ServiceUnavailable
    | GatewayTimeout
  >,
>(
  corporationId: number,
  params?: GetCorporationsCorporationIdParams,
  options?: {
    swr?: SWRConfiguration<
      Awaited<ReturnType<typeof getCorporationsCorporationId>>,
      TError
    > & { swrKey?: Key; enabled?: boolean };
    axios?: AxiosRequestConfig;
  },
) => {
  const { swr: swrOptions, axios: axiosOptions } = options ?? {};

  const isEnabled = swrOptions?.enabled !== false && !!corporationId;
  const swrKey =
    swrOptions?.swrKey ??
    (() =>
      isEnabled
        ? getGetCorporationsCorporationIdKey(corporationId, params)
        : null);
  const swrFn = () =>
    getCorporationsCorporationId(corporationId, params, axiosOptions);

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(
    swrKey,
    swrFn,
    swrOptions,
  );

  return {
    swrKey,
    ...query,
  };
};

/**
 * Get a list of all the alliances a corporation has been a member of

---
Alternate route: `/dev/corporations/{corporation_id}/alliancehistory/`

Alternate route: `/v3/corporations/{corporation_id}/alliancehistory/`

---
This route is cached for up to 3600 seconds
 * @summary Get alliance history
 */
export const getCorporationsCorporationIdAlliancehistory = (
  corporationId: number,
  params?: GetCorporationsCorporationIdAlliancehistoryParams,
  options?: AxiosRequestConfig,
): Promise<
  AxiosResponse<GetCorporationsCorporationIdAlliancehistory200Item[]>
> => {
  return axios.get(`/corporations/${corporationId}/alliancehistory/`, {
    ...options,
    params: { ...params, ...options?.params },
  });
};

export const getGetCorporationsCorporationIdAlliancehistoryKey = (
  corporationId: number,
  params?: GetCorporationsCorporationIdAlliancehistoryParams,
) => [
  `/corporations/${corporationId}/alliancehistory/`,
  ...(params ? [params] : []),
];

export type GetCorporationsCorporationIdAlliancehistoryQueryResult =
  NonNullable<
    Awaited<ReturnType<typeof getCorporationsCorporationIdAlliancehistory>>
  >;
export type GetCorporationsCorporationIdAlliancehistoryQueryError = AxiosError<
  | void
  | BadRequest
  | ErrorLimited
  | InternalServerError
  | ServiceUnavailable
  | GatewayTimeout
>;

export const useGetCorporationsCorporationIdAlliancehistory = <
  TError = AxiosError<
    | void
    | BadRequest
    | ErrorLimited
    | InternalServerError
    | ServiceUnavailable
    | GatewayTimeout
  >,
>(
  corporationId: number,
  params?: GetCorporationsCorporationIdAlliancehistoryParams,
  options?: {
    swr?: SWRConfiguration<
      Awaited<ReturnType<typeof getCorporationsCorporationIdAlliancehistory>>,
      TError
    > & { swrKey?: Key; enabled?: boolean };
    axios?: AxiosRequestConfig;
  },
) => {
  const { swr: swrOptions, axios: axiosOptions } = options ?? {};

  const isEnabled = swrOptions?.enabled !== false && !!corporationId;
  const swrKey =
    swrOptions?.swrKey ??
    (() =>
      isEnabled
        ? getGetCorporationsCorporationIdAlliancehistoryKey(
            corporationId,
            params,
          )
        : null);
  const swrFn = () =>
    getCorporationsCorporationIdAlliancehistory(
      corporationId,
      params,
      axiosOptions,
    );

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(
    swrKey,
    swrFn,
    swrOptions,
  );

  return {
    swrKey,
    ...query,
  };
};

/**
 * Returns a list of blueprints the corporation owns

---
Alternate route: `/dev/corporations/{corporation_id}/blueprints/`

Alternate route: `/v3/corporations/{corporation_id}/blueprints/`

---
This route is cached for up to 3600 seconds

---
Requires one of the following EVE corporation role(s): Director

 * @summary Get corporation blueprints
 */
export const getCorporationsCorporationIdBlueprints = (
  corporationId: number,
  params?: GetCorporationsCorporationIdBlueprintsParams,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<GetCorporationsCorporationIdBlueprints200Item[]>> => {
  return axios.get(`/corporations/${corporationId}/blueprints/`, {
    ...options,
    params: { ...params, ...options?.params },
  });
};

export const getGetCorporationsCorporationIdBlueprintsKey = (
  corporationId: number,
  params?: GetCorporationsCorporationIdBlueprintsParams,
) => [
  `/corporations/${corporationId}/blueprints/`,
  ...(params ? [params] : []),
];

export type GetCorporationsCorporationIdBlueprintsQueryResult = NonNullable<
  Awaited<ReturnType<typeof getCorporationsCorporationIdBlueprints>>
>;
export type GetCorporationsCorporationIdBlueprintsQueryError = AxiosError<
  | void
  | BadRequest
  | Unauthorized
  | Forbidden
  | ErrorLimited
  | InternalServerError
  | ServiceUnavailable
  | GatewayTimeout
>;

export const useGetCorporationsCorporationIdBlueprints = <
  TError = AxiosError<
    | void
    | BadRequest
    | Unauthorized
    | Forbidden
    | ErrorLimited
    | InternalServerError
    | ServiceUnavailable
    | GatewayTimeout
  >,
>(
  corporationId: number,
  params?: GetCorporationsCorporationIdBlueprintsParams,
  options?: {
    swr?: SWRConfiguration<
      Awaited<ReturnType<typeof getCorporationsCorporationIdBlueprints>>,
      TError
    > & { swrKey?: Key; enabled?: boolean };
    axios?: AxiosRequestConfig;
  },
) => {
  const { swr: swrOptions, axios: axiosOptions } = options ?? {};

  const isEnabled = swrOptions?.enabled !== false && !!corporationId;
  const swrKey =
    swrOptions?.swrKey ??
    (() =>
      isEnabled
        ? getGetCorporationsCorporationIdBlueprintsKey(corporationId, params)
        : null);
  const swrFn = () =>
    getCorporationsCorporationIdBlueprints(corporationId, params, axiosOptions);

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(
    swrKey,
    swrFn,
    swrOptions,
  );

  return {
    swrKey,
    ...query,
  };
};

/**
 * Returns logs recorded in the past seven days from all audit log secure containers (ALSC) owned by a given corporation

---
Alternate route: `/dev/corporations/{corporation_id}/containers/logs/`

Alternate route: `/v3/corporations/{corporation_id}/containers/logs/`

---
This route is cached for up to 600 seconds

---
Requires one of the following EVE corporation role(s): Director

 * @summary Get all corporation ALSC logs
 */
export const getCorporationsCorporationIdContainersLogs = (
  corporationId: number,
  params?: GetCorporationsCorporationIdContainersLogsParams,
  options?: AxiosRequestConfig,
): Promise<
  AxiosResponse<GetCorporationsCorporationIdContainersLogs200Item[]>
> => {
  return axios.get(`/corporations/${corporationId}/containers/logs/`, {
    ...options,
    params: { ...params, ...options?.params },
  });
};

export const getGetCorporationsCorporationIdContainersLogsKey = (
  corporationId: number,
  params?: GetCorporationsCorporationIdContainersLogsParams,
) => [
  `/corporations/${corporationId}/containers/logs/`,
  ...(params ? [params] : []),
];

export type GetCorporationsCorporationIdContainersLogsQueryResult = NonNullable<
  Awaited<ReturnType<typeof getCorporationsCorporationIdContainersLogs>>
>;
export type GetCorporationsCorporationIdContainersLogsQueryError = AxiosError<
  | void
  | BadRequest
  | Unauthorized
  | Forbidden
  | ErrorLimited
  | InternalServerError
  | ServiceUnavailable
  | GatewayTimeout
>;

export const useGetCorporationsCorporationIdContainersLogs = <
  TError = AxiosError<
    | void
    | BadRequest
    | Unauthorized
    | Forbidden
    | ErrorLimited
    | InternalServerError
    | ServiceUnavailable
    | GatewayTimeout
  >,
>(
  corporationId: number,
  params?: GetCorporationsCorporationIdContainersLogsParams,
  options?: {
    swr?: SWRConfiguration<
      Awaited<ReturnType<typeof getCorporationsCorporationIdContainersLogs>>,
      TError
    > & { swrKey?: Key; enabled?: boolean };
    axios?: AxiosRequestConfig;
  },
) => {
  const { swr: swrOptions, axios: axiosOptions } = options ?? {};

  const isEnabled = swrOptions?.enabled !== false && !!corporationId;
  const swrKey =
    swrOptions?.swrKey ??
    (() =>
      isEnabled
        ? getGetCorporationsCorporationIdContainersLogsKey(
            corporationId,
            params,
          )
        : null);
  const swrFn = () =>
    getCorporationsCorporationIdContainersLogs(
      corporationId,
      params,
      axiosOptions,
    );

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(
    swrKey,
    swrFn,
    swrOptions,
  );

  return {
    swrKey,
    ...query,
  };
};

/**
 * Return corporation hangar and wallet division names, only show if a division is not using the default name

---
Alternate route: `/dev/corporations/{corporation_id}/divisions/`

Alternate route: `/v2/corporations/{corporation_id}/divisions/`

---
This route is cached for up to 3600 seconds

---
Requires one of the following EVE corporation role(s): Director

 * @summary Get corporation divisions
 */
export const getCorporationsCorporationIdDivisions = (
  corporationId: number,
  params?: GetCorporationsCorporationIdDivisionsParams,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<GetCorporationsCorporationIdDivisions200>> => {
  return axios.get(`/corporations/${corporationId}/divisions/`, {
    ...options,
    params: { ...params, ...options?.params },
  });
};

export const getGetCorporationsCorporationIdDivisionsKey = (
  corporationId: number,
  params?: GetCorporationsCorporationIdDivisionsParams,
) => [`/corporations/${corporationId}/divisions/`, ...(params ? [params] : [])];

export type GetCorporationsCorporationIdDivisionsQueryResult = NonNullable<
  Awaited<ReturnType<typeof getCorporationsCorporationIdDivisions>>
>;
export type GetCorporationsCorporationIdDivisionsQueryError = AxiosError<
  | void
  | BadRequest
  | Unauthorized
  | Forbidden
  | ErrorLimited
  | InternalServerError
  | ServiceUnavailable
  | GatewayTimeout
>;

export const useGetCorporationsCorporationIdDivisions = <
  TError = AxiosError<
    | void
    | BadRequest
    | Unauthorized
    | Forbidden
    | ErrorLimited
    | InternalServerError
    | ServiceUnavailable
    | GatewayTimeout
  >,
>(
  corporationId: number,
  params?: GetCorporationsCorporationIdDivisionsParams,
  options?: {
    swr?: SWRConfiguration<
      Awaited<ReturnType<typeof getCorporationsCorporationIdDivisions>>,
      TError
    > & { swrKey?: Key; enabled?: boolean };
    axios?: AxiosRequestConfig;
  },
) => {
  const { swr: swrOptions, axios: axiosOptions } = options ?? {};

  const isEnabled = swrOptions?.enabled !== false && !!corporationId;
  const swrKey =
    swrOptions?.swrKey ??
    (() =>
      isEnabled
        ? getGetCorporationsCorporationIdDivisionsKey(corporationId, params)
        : null);
  const swrFn = () =>
    getCorporationsCorporationIdDivisions(corporationId, params, axiosOptions);

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(
    swrKey,
    swrFn,
    swrOptions,
  );

  return {
    swrKey,
    ...query,
  };
};

/**
 * Return a corporation's facilities

---
Alternate route: `/dev/corporations/{corporation_id}/facilities/`

Alternate route: `/v2/corporations/{corporation_id}/facilities/`

---
This route is cached for up to 3600 seconds

---
Requires one of the following EVE corporation role(s): Factory_Manager

 * @summary Get corporation facilities
 */
export const getCorporationsCorporationIdFacilities = (
  corporationId: number,
  params?: GetCorporationsCorporationIdFacilitiesParams,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<GetCorporationsCorporationIdFacilities200Item[]>> => {
  return axios.get(`/corporations/${corporationId}/facilities/`, {
    ...options,
    params: { ...params, ...options?.params },
  });
};

export const getGetCorporationsCorporationIdFacilitiesKey = (
  corporationId: number,
  params?: GetCorporationsCorporationIdFacilitiesParams,
) => [
  `/corporations/${corporationId}/facilities/`,
  ...(params ? [params] : []),
];

export type GetCorporationsCorporationIdFacilitiesQueryResult = NonNullable<
  Awaited<ReturnType<typeof getCorporationsCorporationIdFacilities>>
>;
export type GetCorporationsCorporationIdFacilitiesQueryError = AxiosError<
  | void
  | BadRequest
  | Unauthorized
  | Forbidden
  | ErrorLimited
  | InternalServerError
  | ServiceUnavailable
  | GatewayTimeout
>;

export const useGetCorporationsCorporationIdFacilities = <
  TError = AxiosError<
    | void
    | BadRequest
    | Unauthorized
    | Forbidden
    | ErrorLimited
    | InternalServerError
    | ServiceUnavailable
    | GatewayTimeout
  >,
>(
  corporationId: number,
  params?: GetCorporationsCorporationIdFacilitiesParams,
  options?: {
    swr?: SWRConfiguration<
      Awaited<ReturnType<typeof getCorporationsCorporationIdFacilities>>,
      TError
    > & { swrKey?: Key; enabled?: boolean };
    axios?: AxiosRequestConfig;
  },
) => {
  const { swr: swrOptions, axios: axiosOptions } = options ?? {};

  const isEnabled = swrOptions?.enabled !== false && !!corporationId;
  const swrKey =
    swrOptions?.swrKey ??
    (() =>
      isEnabled
        ? getGetCorporationsCorporationIdFacilitiesKey(corporationId, params)
        : null);
  const swrFn = () =>
    getCorporationsCorporationIdFacilities(corporationId, params, axiosOptions);

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(
    swrKey,
    swrFn,
    swrOptions,
  );

  return {
    swrKey,
    ...query,
  };
};

/**
 * Get the icon urls for a corporation

---
Alternate route: `/dev/corporations/{corporation_id}/icons/`

Alternate route: `/v2/corporations/{corporation_id}/icons/`

---
This route is cached for up to 3600 seconds
 * @summary Get corporation icon
 */
export const getCorporationsCorporationIdIcons = (
  corporationId: number,
  params?: GetCorporationsCorporationIdIconsParams,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<GetCorporationsCorporationIdIcons200>> => {
  return axios.get(`/corporations/${corporationId}/icons/`, {
    ...options,
    params: { ...params, ...options?.params },
  });
};

export const getGetCorporationsCorporationIdIconsKey = (
  corporationId: number,
  params?: GetCorporationsCorporationIdIconsParams,
) => [`/corporations/${corporationId}/icons/`, ...(params ? [params] : [])];

export type GetCorporationsCorporationIdIconsQueryResult = NonNullable<
  Awaited<ReturnType<typeof getCorporationsCorporationIdIcons>>
>;
export type GetCorporationsCorporationIdIconsQueryError = AxiosError<
  | void
  | BadRequest
  | GetCorporationsCorporationIdIcons404
  | ErrorLimited
  | InternalServerError
  | ServiceUnavailable
  | GatewayTimeout
>;

export const useGetCorporationsCorporationIdIcons = <
  TError = AxiosError<
    | void
    | BadRequest
    | GetCorporationsCorporationIdIcons404
    | ErrorLimited
    | InternalServerError
    | ServiceUnavailable
    | GatewayTimeout
  >,
>(
  corporationId: number,
  params?: GetCorporationsCorporationIdIconsParams,
  options?: {
    swr?: SWRConfiguration<
      Awaited<ReturnType<typeof getCorporationsCorporationIdIcons>>,
      TError
    > & { swrKey?: Key; enabled?: boolean };
    axios?: AxiosRequestConfig;
  },
) => {
  const { swr: swrOptions, axios: axiosOptions } = options ?? {};

  const isEnabled = swrOptions?.enabled !== false && !!corporationId;
  const swrKey =
    swrOptions?.swrKey ??
    (() =>
      isEnabled
        ? getGetCorporationsCorporationIdIconsKey(corporationId, params)
        : null);
  const swrFn = () =>
    getCorporationsCorporationIdIcons(corporationId, params, axiosOptions);

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(
    swrKey,
    swrFn,
    swrOptions,
  );

  return {
    swrKey,
    ...query,
  };
};

/**
 * Returns a corporation's medals

---
Alternate route: `/dev/corporations/{corporation_id}/medals/`

Alternate route: `/v2/corporations/{corporation_id}/medals/`

---
This route is cached for up to 3600 seconds
 * @summary Get corporation medals
 */
export const getCorporationsCorporationIdMedals = (
  corporationId: number,
  params?: GetCorporationsCorporationIdMedalsParams,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<GetCorporationsCorporationIdMedals200Item[]>> => {
  return axios.get(`/corporations/${corporationId}/medals/`, {
    ...options,
    params: { ...params, ...options?.params },
  });
};

export const getGetCorporationsCorporationIdMedalsKey = (
  corporationId: number,
  params?: GetCorporationsCorporationIdMedalsParams,
) => [`/corporations/${corporationId}/medals/`, ...(params ? [params] : [])];

export type GetCorporationsCorporationIdMedalsQueryResult = NonNullable<
  Awaited<ReturnType<typeof getCorporationsCorporationIdMedals>>
>;
export type GetCorporationsCorporationIdMedalsQueryError = AxiosError<
  | void
  | BadRequest
  | Unauthorized
  | Forbidden
  | ErrorLimited
  | InternalServerError
  | ServiceUnavailable
  | GatewayTimeout
>;

export const useGetCorporationsCorporationIdMedals = <
  TError = AxiosError<
    | void
    | BadRequest
    | Unauthorized
    | Forbidden
    | ErrorLimited
    | InternalServerError
    | ServiceUnavailable
    | GatewayTimeout
  >,
>(
  corporationId: number,
  params?: GetCorporationsCorporationIdMedalsParams,
  options?: {
    swr?: SWRConfiguration<
      Awaited<ReturnType<typeof getCorporationsCorporationIdMedals>>,
      TError
    > & { swrKey?: Key; enabled?: boolean };
    axios?: AxiosRequestConfig;
  },
) => {
  const { swr: swrOptions, axios: axiosOptions } = options ?? {};

  const isEnabled = swrOptions?.enabled !== false && !!corporationId;
  const swrKey =
    swrOptions?.swrKey ??
    (() =>
      isEnabled
        ? getGetCorporationsCorporationIdMedalsKey(corporationId, params)
        : null);
  const swrFn = () =>
    getCorporationsCorporationIdMedals(corporationId, params, axiosOptions);

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(
    swrKey,
    swrFn,
    swrOptions,
  );

  return {
    swrKey,
    ...query,
  };
};

/**
 * Returns medals issued by a corporation

---
Alternate route: `/dev/corporations/{corporation_id}/medals/issued/`

Alternate route: `/v2/corporations/{corporation_id}/medals/issued/`

---
This route is cached for up to 3600 seconds

---
Requires one of the following EVE corporation role(s): Director

 * @summary Get corporation issued medals
 */
export const getCorporationsCorporationIdMedalsIssued = (
  corporationId: number,
  params?: GetCorporationsCorporationIdMedalsIssuedParams,
  options?: AxiosRequestConfig,
): Promise<
  AxiosResponse<GetCorporationsCorporationIdMedalsIssued200Item[]>
> => {
  return axios.get(`/corporations/${corporationId}/medals/issued/`, {
    ...options,
    params: { ...params, ...options?.params },
  });
};

export const getGetCorporationsCorporationIdMedalsIssuedKey = (
  corporationId: number,
  params?: GetCorporationsCorporationIdMedalsIssuedParams,
) => [
  `/corporations/${corporationId}/medals/issued/`,
  ...(params ? [params] : []),
];

export type GetCorporationsCorporationIdMedalsIssuedQueryResult = NonNullable<
  Awaited<ReturnType<typeof getCorporationsCorporationIdMedalsIssued>>
>;
export type GetCorporationsCorporationIdMedalsIssuedQueryError = AxiosError<
  | void
  | BadRequest
  | Unauthorized
  | Forbidden
  | ErrorLimited
  | InternalServerError
  | ServiceUnavailable
  | GatewayTimeout
>;

export const useGetCorporationsCorporationIdMedalsIssued = <
  TError = AxiosError<
    | void
    | BadRequest
    | Unauthorized
    | Forbidden
    | ErrorLimited
    | InternalServerError
    | ServiceUnavailable
    | GatewayTimeout
  >,
>(
  corporationId: number,
  params?: GetCorporationsCorporationIdMedalsIssuedParams,
  options?: {
    swr?: SWRConfiguration<
      Awaited<ReturnType<typeof getCorporationsCorporationIdMedalsIssued>>,
      TError
    > & { swrKey?: Key; enabled?: boolean };
    axios?: AxiosRequestConfig;
  },
) => {
  const { swr: swrOptions, axios: axiosOptions } = options ?? {};

  const isEnabled = swrOptions?.enabled !== false && !!corporationId;
  const swrKey =
    swrOptions?.swrKey ??
    (() =>
      isEnabled
        ? getGetCorporationsCorporationIdMedalsIssuedKey(corporationId, params)
        : null);
  const swrFn = () =>
    getCorporationsCorporationIdMedalsIssued(
      corporationId,
      params,
      axiosOptions,
    );

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(
    swrKey,
    swrFn,
    swrOptions,
  );

  return {
    swrKey,
    ...query,
  };
};

/**
 * Return the current member list of a corporation, the token's character need to be a member of the corporation.

---
Alternate route: `/dev/corporations/{corporation_id}/members/`

Alternate route: `/v4/corporations/{corporation_id}/members/`

---
This route is cached for up to 3600 seconds
 * @summary Get corporation members
 */
export const getCorporationsCorporationIdMembers = (
  corporationId: number,
  params?: GetCorporationsCorporationIdMembersParams,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<number[]>> => {
  return axios.get(`/corporations/${corporationId}/members/`, {
    ...options,
    params: { ...params, ...options?.params },
  });
};

export const getGetCorporationsCorporationIdMembersKey = (
  corporationId: number,
  params?: GetCorporationsCorporationIdMembersParams,
) => [`/corporations/${corporationId}/members/`, ...(params ? [params] : [])];

export type GetCorporationsCorporationIdMembersQueryResult = NonNullable<
  Awaited<ReturnType<typeof getCorporationsCorporationIdMembers>>
>;
export type GetCorporationsCorporationIdMembersQueryError = AxiosError<
  | void
  | BadRequest
  | Unauthorized
  | Forbidden
  | ErrorLimited
  | InternalServerError
  | ServiceUnavailable
  | GatewayTimeout
>;

export const useGetCorporationsCorporationIdMembers = <
  TError = AxiosError<
    | void
    | BadRequest
    | Unauthorized
    | Forbidden
    | ErrorLimited
    | InternalServerError
    | ServiceUnavailable
    | GatewayTimeout
  >,
>(
  corporationId: number,
  params?: GetCorporationsCorporationIdMembersParams,
  options?: {
    swr?: SWRConfiguration<
      Awaited<ReturnType<typeof getCorporationsCorporationIdMembers>>,
      TError
    > & { swrKey?: Key; enabled?: boolean };
    axios?: AxiosRequestConfig;
  },
) => {
  const { swr: swrOptions, axios: axiosOptions } = options ?? {};

  const isEnabled = swrOptions?.enabled !== false && !!corporationId;
  const swrKey =
    swrOptions?.swrKey ??
    (() =>
      isEnabled
        ? getGetCorporationsCorporationIdMembersKey(corporationId, params)
        : null);
  const swrFn = () =>
    getCorporationsCorporationIdMembers(corporationId, params, axiosOptions);

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(
    swrKey,
    swrFn,
    swrOptions,
  );

  return {
    swrKey,
    ...query,
  };
};

/**
 * Return a corporation's member limit, not including CEO himself

---
Alternate route: `/dev/corporations/{corporation_id}/members/limit/`

Alternate route: `/v2/corporations/{corporation_id}/members/limit/`

---
This route is cached for up to 3600 seconds

---
Requires one of the following EVE corporation role(s): Director

 * @summary Get corporation member limit
 */
export const getCorporationsCorporationIdMembersLimit = (
  corporationId: number,
  params?: GetCorporationsCorporationIdMembersLimitParams,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<number>> => {
  return axios.get(`/corporations/${corporationId}/members/limit/`, {
    ...options,
    params: { ...params, ...options?.params },
  });
};

export const getGetCorporationsCorporationIdMembersLimitKey = (
  corporationId: number,
  params?: GetCorporationsCorporationIdMembersLimitParams,
) => [
  `/corporations/${corporationId}/members/limit/`,
  ...(params ? [params] : []),
];

export type GetCorporationsCorporationIdMembersLimitQueryResult = NonNullable<
  Awaited<ReturnType<typeof getCorporationsCorporationIdMembersLimit>>
>;
export type GetCorporationsCorporationIdMembersLimitQueryError = AxiosError<
  | void
  | BadRequest
  | Unauthorized
  | Forbidden
  | ErrorLimited
  | InternalServerError
  | ServiceUnavailable
  | GatewayTimeout
>;

export const useGetCorporationsCorporationIdMembersLimit = <
  TError = AxiosError<
    | void
    | BadRequest
    | Unauthorized
    | Forbidden
    | ErrorLimited
    | InternalServerError
    | ServiceUnavailable
    | GatewayTimeout
  >,
>(
  corporationId: number,
  params?: GetCorporationsCorporationIdMembersLimitParams,
  options?: {
    swr?: SWRConfiguration<
      Awaited<ReturnType<typeof getCorporationsCorporationIdMembersLimit>>,
      TError
    > & { swrKey?: Key; enabled?: boolean };
    axios?: AxiosRequestConfig;
  },
) => {
  const { swr: swrOptions, axios: axiosOptions } = options ?? {};

  const isEnabled = swrOptions?.enabled !== false && !!corporationId;
  const swrKey =
    swrOptions?.swrKey ??
    (() =>
      isEnabled
        ? getGetCorporationsCorporationIdMembersLimitKey(corporationId, params)
        : null);
  const swrFn = () =>
    getCorporationsCorporationIdMembersLimit(
      corporationId,
      params,
      axiosOptions,
    );

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(
    swrKey,
    swrFn,
    swrOptions,
  );

  return {
    swrKey,
    ...query,
  };
};

/**
 * Returns a corporation's members' titles

---
Alternate route: `/dev/corporations/{corporation_id}/members/titles/`

Alternate route: `/v2/corporations/{corporation_id}/members/titles/`

---
This route is cached for up to 3600 seconds

---
Requires one of the following EVE corporation role(s): Director

 * @summary Get corporation's members' titles
 */
export const getCorporationsCorporationIdMembersTitles = (
  corporationId: number,
  params?: GetCorporationsCorporationIdMembersTitlesParams,
  options?: AxiosRequestConfig,
): Promise<
  AxiosResponse<GetCorporationsCorporationIdMembersTitles200Item[]>
> => {
  return axios.get(`/corporations/${corporationId}/members/titles/`, {
    ...options,
    params: { ...params, ...options?.params },
  });
};

export const getGetCorporationsCorporationIdMembersTitlesKey = (
  corporationId: number,
  params?: GetCorporationsCorporationIdMembersTitlesParams,
) => [
  `/corporations/${corporationId}/members/titles/`,
  ...(params ? [params] : []),
];

export type GetCorporationsCorporationIdMembersTitlesQueryResult = NonNullable<
  Awaited<ReturnType<typeof getCorporationsCorporationIdMembersTitles>>
>;
export type GetCorporationsCorporationIdMembersTitlesQueryError = AxiosError<
  | void
  | BadRequest
  | Unauthorized
  | Forbidden
  | ErrorLimited
  | InternalServerError
  | ServiceUnavailable
  | GatewayTimeout
>;

export const useGetCorporationsCorporationIdMembersTitles = <
  TError = AxiosError<
    | void
    | BadRequest
    | Unauthorized
    | Forbidden
    | ErrorLimited
    | InternalServerError
    | ServiceUnavailable
    | GatewayTimeout
  >,
>(
  corporationId: number,
  params?: GetCorporationsCorporationIdMembersTitlesParams,
  options?: {
    swr?: SWRConfiguration<
      Awaited<ReturnType<typeof getCorporationsCorporationIdMembersTitles>>,
      TError
    > & { swrKey?: Key; enabled?: boolean };
    axios?: AxiosRequestConfig;
  },
) => {
  const { swr: swrOptions, axios: axiosOptions } = options ?? {};

  const isEnabled = swrOptions?.enabled !== false && !!corporationId;
  const swrKey =
    swrOptions?.swrKey ??
    (() =>
      isEnabled
        ? getGetCorporationsCorporationIdMembersTitlesKey(corporationId, params)
        : null);
  const swrFn = () =>
    getCorporationsCorporationIdMembersTitles(
      corporationId,
      params,
      axiosOptions,
    );

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(
    swrKey,
    swrFn,
    swrOptions,
  );

  return {
    swrKey,
    ...query,
  };
};

/**
 * Returns additional information about a corporation's members which helps tracking their activities

---
Alternate route: `/dev/corporations/{corporation_id}/membertracking/`

Alternate route: `/v2/corporations/{corporation_id}/membertracking/`

---
This route is cached for up to 3600 seconds

---
Requires one of the following EVE corporation role(s): Director

 * @summary Track corporation members
 */
export const getCorporationsCorporationIdMembertracking = (
  corporationId: number,
  params?: GetCorporationsCorporationIdMembertrackingParams,
  options?: AxiosRequestConfig,
): Promise<
  AxiosResponse<GetCorporationsCorporationIdMembertracking200Item[]>
> => {
  return axios.get(`/corporations/${corporationId}/membertracking/`, {
    ...options,
    params: { ...params, ...options?.params },
  });
};

export const getGetCorporationsCorporationIdMembertrackingKey = (
  corporationId: number,
  params?: GetCorporationsCorporationIdMembertrackingParams,
) => [
  `/corporations/${corporationId}/membertracking/`,
  ...(params ? [params] : []),
];

export type GetCorporationsCorporationIdMembertrackingQueryResult = NonNullable<
  Awaited<ReturnType<typeof getCorporationsCorporationIdMembertracking>>
>;
export type GetCorporationsCorporationIdMembertrackingQueryError = AxiosError<
  | void
  | BadRequest
  | Unauthorized
  | Forbidden
  | ErrorLimited
  | InternalServerError
  | ServiceUnavailable
  | GatewayTimeout
>;

export const useGetCorporationsCorporationIdMembertracking = <
  TError = AxiosError<
    | void
    | BadRequest
    | Unauthorized
    | Forbidden
    | ErrorLimited
    | InternalServerError
    | ServiceUnavailable
    | GatewayTimeout
  >,
>(
  corporationId: number,
  params?: GetCorporationsCorporationIdMembertrackingParams,
  options?: {
    swr?: SWRConfiguration<
      Awaited<ReturnType<typeof getCorporationsCorporationIdMembertracking>>,
      TError
    > & { swrKey?: Key; enabled?: boolean };
    axios?: AxiosRequestConfig;
  },
) => {
  const { swr: swrOptions, axios: axiosOptions } = options ?? {};

  const isEnabled = swrOptions?.enabled !== false && !!corporationId;
  const swrKey =
    swrOptions?.swrKey ??
    (() =>
      isEnabled
        ? getGetCorporationsCorporationIdMembertrackingKey(
            corporationId,
            params,
          )
        : null);
  const swrFn = () =>
    getCorporationsCorporationIdMembertracking(
      corporationId,
      params,
      axiosOptions,
    );

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(
    swrKey,
    swrFn,
    swrOptions,
  );

  return {
    swrKey,
    ...query,
  };
};

/**
 * Return the roles of all members if the character has the personnel manager role or any grantable role.

---
Alternate route: `/dev/corporations/{corporation_id}/roles/`

Alternate route: `/v2/corporations/{corporation_id}/roles/`

---
This route is cached for up to 3600 seconds
 * @summary Get corporation member roles
 */
export const getCorporationsCorporationIdRoles = (
  corporationId: number,
  params?: GetCorporationsCorporationIdRolesParams,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<GetCorporationsCorporationIdRoles200Item[]>> => {
  return axios.get(`/corporations/${corporationId}/roles/`, {
    ...options,
    params: { ...params, ...options?.params },
  });
};

export const getGetCorporationsCorporationIdRolesKey = (
  corporationId: number,
  params?: GetCorporationsCorporationIdRolesParams,
) => [`/corporations/${corporationId}/roles/`, ...(params ? [params] : [])];

export type GetCorporationsCorporationIdRolesQueryResult = NonNullable<
  Awaited<ReturnType<typeof getCorporationsCorporationIdRoles>>
>;
export type GetCorporationsCorporationIdRolesQueryError = AxiosError<
  | void
  | BadRequest
  | Unauthorized
  | Forbidden
  | ErrorLimited
  | InternalServerError
  | ServiceUnavailable
  | GatewayTimeout
>;

export const useGetCorporationsCorporationIdRoles = <
  TError = AxiosError<
    | void
    | BadRequest
    | Unauthorized
    | Forbidden
    | ErrorLimited
    | InternalServerError
    | ServiceUnavailable
    | GatewayTimeout
  >,
>(
  corporationId: number,
  params?: GetCorporationsCorporationIdRolesParams,
  options?: {
    swr?: SWRConfiguration<
      Awaited<ReturnType<typeof getCorporationsCorporationIdRoles>>,
      TError
    > & { swrKey?: Key; enabled?: boolean };
    axios?: AxiosRequestConfig;
  },
) => {
  const { swr: swrOptions, axios: axiosOptions } = options ?? {};

  const isEnabled = swrOptions?.enabled !== false && !!corporationId;
  const swrKey =
    swrOptions?.swrKey ??
    (() =>
      isEnabled
        ? getGetCorporationsCorporationIdRolesKey(corporationId, params)
        : null);
  const swrFn = () =>
    getCorporationsCorporationIdRoles(corporationId, params, axiosOptions);

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(
    swrKey,
    swrFn,
    swrOptions,
  );

  return {
    swrKey,
    ...query,
  };
};

/**
 * Return how roles have changed for a coporation's members, up to a month

---
Alternate route: `/dev/corporations/{corporation_id}/roles/history/`

Alternate route: `/v2/corporations/{corporation_id}/roles/history/`

---
This route is cached for up to 3600 seconds

---
Requires one of the following EVE corporation role(s): Director

 * @summary Get corporation member roles history
 */
export const getCorporationsCorporationIdRolesHistory = (
  corporationId: number,
  params?: GetCorporationsCorporationIdRolesHistoryParams,
  options?: AxiosRequestConfig,
): Promise<
  AxiosResponse<GetCorporationsCorporationIdRolesHistory200Item[]>
> => {
  return axios.get(`/corporations/${corporationId}/roles/history/`, {
    ...options,
    params: { ...params, ...options?.params },
  });
};

export const getGetCorporationsCorporationIdRolesHistoryKey = (
  corporationId: number,
  params?: GetCorporationsCorporationIdRolesHistoryParams,
) => [
  `/corporations/${corporationId}/roles/history/`,
  ...(params ? [params] : []),
];

export type GetCorporationsCorporationIdRolesHistoryQueryResult = NonNullable<
  Awaited<ReturnType<typeof getCorporationsCorporationIdRolesHistory>>
>;
export type GetCorporationsCorporationIdRolesHistoryQueryError = AxiosError<
  | void
  | BadRequest
  | Unauthorized
  | Forbidden
  | ErrorLimited
  | InternalServerError
  | ServiceUnavailable
  | GatewayTimeout
>;

export const useGetCorporationsCorporationIdRolesHistory = <
  TError = AxiosError<
    | void
    | BadRequest
    | Unauthorized
    | Forbidden
    | ErrorLimited
    | InternalServerError
    | ServiceUnavailable
    | GatewayTimeout
  >,
>(
  corporationId: number,
  params?: GetCorporationsCorporationIdRolesHistoryParams,
  options?: {
    swr?: SWRConfiguration<
      Awaited<ReturnType<typeof getCorporationsCorporationIdRolesHistory>>,
      TError
    > & { swrKey?: Key; enabled?: boolean };
    axios?: AxiosRequestConfig;
  },
) => {
  const { swr: swrOptions, axios: axiosOptions } = options ?? {};

  const isEnabled = swrOptions?.enabled !== false && !!corporationId;
  const swrKey =
    swrOptions?.swrKey ??
    (() =>
      isEnabled
        ? getGetCorporationsCorporationIdRolesHistoryKey(corporationId, params)
        : null);
  const swrFn = () =>
    getCorporationsCorporationIdRolesHistory(
      corporationId,
      params,
      axiosOptions,
    );

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(
    swrKey,
    swrFn,
    swrOptions,
  );

  return {
    swrKey,
    ...query,
  };
};

/**
 * Return the current shareholders of a corporation.

---
Alternate route: `/dev/corporations/{corporation_id}/shareholders/`

Alternate route: `/legacy/corporations/{corporation_id}/shareholders/`

Alternate route: `/v1/corporations/{corporation_id}/shareholders/`

---
This route is cached for up to 3600 seconds

---
Requires one of the following EVE corporation role(s): Director

 * @summary Get corporation shareholders
 */
export const getCorporationsCorporationIdShareholders = (
  corporationId: number,
  params?: GetCorporationsCorporationIdShareholdersParams,
  options?: AxiosRequestConfig,
): Promise<
  AxiosResponse<GetCorporationsCorporationIdShareholders200Item[]>
> => {
  return axios.get(`/corporations/${corporationId}/shareholders/`, {
    ...options,
    params: { ...params, ...options?.params },
  });
};

export const getGetCorporationsCorporationIdShareholdersKey = (
  corporationId: number,
  params?: GetCorporationsCorporationIdShareholdersParams,
) => [
  `/corporations/${corporationId}/shareholders/`,
  ...(params ? [params] : []),
];

export type GetCorporationsCorporationIdShareholdersQueryResult = NonNullable<
  Awaited<ReturnType<typeof getCorporationsCorporationIdShareholders>>
>;
export type GetCorporationsCorporationIdShareholdersQueryError = AxiosError<
  | void
  | BadRequest
  | Unauthorized
  | Forbidden
  | ErrorLimited
  | InternalServerError
  | ServiceUnavailable
  | GatewayTimeout
>;

export const useGetCorporationsCorporationIdShareholders = <
  TError = AxiosError<
    | void
    | BadRequest
    | Unauthorized
    | Forbidden
    | ErrorLimited
    | InternalServerError
    | ServiceUnavailable
    | GatewayTimeout
  >,
>(
  corporationId: number,
  params?: GetCorporationsCorporationIdShareholdersParams,
  options?: {
    swr?: SWRConfiguration<
      Awaited<ReturnType<typeof getCorporationsCorporationIdShareholders>>,
      TError
    > & { swrKey?: Key; enabled?: boolean };
    axios?: AxiosRequestConfig;
  },
) => {
  const { swr: swrOptions, axios: axiosOptions } = options ?? {};

  const isEnabled = swrOptions?.enabled !== false && !!corporationId;
  const swrKey =
    swrOptions?.swrKey ??
    (() =>
      isEnabled
        ? getGetCorporationsCorporationIdShareholdersKey(corporationId, params)
        : null);
  const swrFn = () =>
    getCorporationsCorporationIdShareholders(
      corporationId,
      params,
      axiosOptions,
    );

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(
    swrKey,
    swrFn,
    swrOptions,
  );

  return {
    swrKey,
    ...query,
  };
};

/**
 * Return corporation standings from agents, NPC corporations, and factions

---
Alternate route: `/dev/corporations/{corporation_id}/standings/`

Alternate route: `/v2/corporations/{corporation_id}/standings/`

---
This route is cached for up to 3600 seconds
 * @summary Get corporation standings
 */
export const getCorporationsCorporationIdStandings = (
  corporationId: number,
  params?: GetCorporationsCorporationIdStandingsParams,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<GetCorporationsCorporationIdStandings200Item[]>> => {
  return axios.get(`/corporations/${corporationId}/standings/`, {
    ...options,
    params: { ...params, ...options?.params },
  });
};

export const getGetCorporationsCorporationIdStandingsKey = (
  corporationId: number,
  params?: GetCorporationsCorporationIdStandingsParams,
) => [`/corporations/${corporationId}/standings/`, ...(params ? [params] : [])];

export type GetCorporationsCorporationIdStandingsQueryResult = NonNullable<
  Awaited<ReturnType<typeof getCorporationsCorporationIdStandings>>
>;
export type GetCorporationsCorporationIdStandingsQueryError = AxiosError<
  | void
  | BadRequest
  | Unauthorized
  | Forbidden
  | ErrorLimited
  | InternalServerError
  | ServiceUnavailable
  | GatewayTimeout
>;

export const useGetCorporationsCorporationIdStandings = <
  TError = AxiosError<
    | void
    | BadRequest
    | Unauthorized
    | Forbidden
    | ErrorLimited
    | InternalServerError
    | ServiceUnavailable
    | GatewayTimeout
  >,
>(
  corporationId: number,
  params?: GetCorporationsCorporationIdStandingsParams,
  options?: {
    swr?: SWRConfiguration<
      Awaited<ReturnType<typeof getCorporationsCorporationIdStandings>>,
      TError
    > & { swrKey?: Key; enabled?: boolean };
    axios?: AxiosRequestConfig;
  },
) => {
  const { swr: swrOptions, axios: axiosOptions } = options ?? {};

  const isEnabled = swrOptions?.enabled !== false && !!corporationId;
  const swrKey =
    swrOptions?.swrKey ??
    (() =>
      isEnabled
        ? getGetCorporationsCorporationIdStandingsKey(corporationId, params)
        : null);
  const swrFn = () =>
    getCorporationsCorporationIdStandings(corporationId, params, axiosOptions);

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(
    swrKey,
    swrFn,
    swrOptions,
  );

  return {
    swrKey,
    ...query,
  };
};

/**
 * Returns list of corporation starbases (POSes)

---
Alternate route: `/dev/corporations/{corporation_id}/starbases/`

Alternate route: `/v2/corporations/{corporation_id}/starbases/`

---
This route is cached for up to 3600 seconds

---
Requires one of the following EVE corporation role(s): Director

 * @summary Get corporation starbases (POSes)
 */
export const getCorporationsCorporationIdStarbases = (
  corporationId: number,
  params?: GetCorporationsCorporationIdStarbasesParams,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<GetCorporationsCorporationIdStarbases200Item[]>> => {
  return axios.get(`/corporations/${corporationId}/starbases/`, {
    ...options,
    params: { ...params, ...options?.params },
  });
};

export const getGetCorporationsCorporationIdStarbasesKey = (
  corporationId: number,
  params?: GetCorporationsCorporationIdStarbasesParams,
) => [`/corporations/${corporationId}/starbases/`, ...(params ? [params] : [])];

export type GetCorporationsCorporationIdStarbasesQueryResult = NonNullable<
  Awaited<ReturnType<typeof getCorporationsCorporationIdStarbases>>
>;
export type GetCorporationsCorporationIdStarbasesQueryError = AxiosError<
  | void
  | BadRequest
  | Unauthorized
  | Forbidden
  | ErrorLimited
  | InternalServerError
  | ServiceUnavailable
  | GatewayTimeout
>;

export const useGetCorporationsCorporationIdStarbases = <
  TError = AxiosError<
    | void
    | BadRequest
    | Unauthorized
    | Forbidden
    | ErrorLimited
    | InternalServerError
    | ServiceUnavailable
    | GatewayTimeout
  >,
>(
  corporationId: number,
  params?: GetCorporationsCorporationIdStarbasesParams,
  options?: {
    swr?: SWRConfiguration<
      Awaited<ReturnType<typeof getCorporationsCorporationIdStarbases>>,
      TError
    > & { swrKey?: Key; enabled?: boolean };
    axios?: AxiosRequestConfig;
  },
) => {
  const { swr: swrOptions, axios: axiosOptions } = options ?? {};

  const isEnabled = swrOptions?.enabled !== false && !!corporationId;
  const swrKey =
    swrOptions?.swrKey ??
    (() =>
      isEnabled
        ? getGetCorporationsCorporationIdStarbasesKey(corporationId, params)
        : null);
  const swrFn = () =>
    getCorporationsCorporationIdStarbases(corporationId, params, axiosOptions);

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(
    swrKey,
    swrFn,
    swrOptions,
  );

  return {
    swrKey,
    ...query,
  };
};

/**
 * Returns various settings and fuels of a starbase (POS)

---
Alternate route: `/dev/corporations/{corporation_id}/starbases/{starbase_id}/`

Alternate route: `/v2/corporations/{corporation_id}/starbases/{starbase_id}/`

---
This route is cached for up to 3600 seconds

---
Requires one of the following EVE corporation role(s): Director

 * @summary Get starbase (POS) detail
 */
export const getCorporationsCorporationIdStarbasesStarbaseId = (
  corporationId: number,
  starbaseId: number,
  params: GetCorporationsCorporationIdStarbasesStarbaseIdParams,
  options?: AxiosRequestConfig,
): Promise<
  AxiosResponse<GetCorporationsCorporationIdStarbasesStarbaseId200>
> => {
  return axios.get(`/corporations/${corporationId}/starbases/${starbaseId}/`, {
    ...options,
    params: { ...params, ...options?.params },
  });
};

export const getGetCorporationsCorporationIdStarbasesStarbaseIdKey = (
  corporationId: number,
  starbaseId: number,
  params: GetCorporationsCorporationIdStarbasesStarbaseIdParams,
) => [
  `/corporations/${corporationId}/starbases/${starbaseId}/`,
  ...(params ? [params] : []),
];

export type GetCorporationsCorporationIdStarbasesStarbaseIdQueryResult =
  NonNullable<
    Awaited<ReturnType<typeof getCorporationsCorporationIdStarbasesStarbaseId>>
  >;
export type GetCorporationsCorporationIdStarbasesStarbaseIdQueryError =
  AxiosError<
    | void
    | BadRequest
    | Unauthorized
    | Forbidden
    | ErrorLimited
    | InternalServerError
    | ServiceUnavailable
    | GatewayTimeout
  >;

export const useGetCorporationsCorporationIdStarbasesStarbaseId = <
  TError = AxiosError<
    | void
    | BadRequest
    | Unauthorized
    | Forbidden
    | ErrorLimited
    | InternalServerError
    | ServiceUnavailable
    | GatewayTimeout
  >,
>(
  corporationId: number,
  starbaseId: number,
  params: GetCorporationsCorporationIdStarbasesStarbaseIdParams,
  options?: {
    swr?: SWRConfiguration<
      Awaited<
        ReturnType<typeof getCorporationsCorporationIdStarbasesStarbaseId>
      >,
      TError
    > & { swrKey?: Key; enabled?: boolean };
    axios?: AxiosRequestConfig;
  },
) => {
  const { swr: swrOptions, axios: axiosOptions } = options ?? {};

  const isEnabled =
    swrOptions?.enabled !== false && !!(corporationId && starbaseId);
  const swrKey =
    swrOptions?.swrKey ??
    (() =>
      isEnabled
        ? getGetCorporationsCorporationIdStarbasesStarbaseIdKey(
            corporationId,
            starbaseId,
            params,
          )
        : null);
  const swrFn = () =>
    getCorporationsCorporationIdStarbasesStarbaseId(
      corporationId,
      starbaseId,
      params,
      axiosOptions,
    );

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(
    swrKey,
    swrFn,
    swrOptions,
  );

  return {
    swrKey,
    ...query,
  };
};

/**
 * Get a list of corporation structures. This route's version includes the changes to structures detailed in this blog: https://www.eveonline.com/article/upwell-2.0-structures-changes-coming-on-february-13th

---
Alternate route: `/dev/corporations/{corporation_id}/structures/`

Alternate route: `/v4/corporations/{corporation_id}/structures/`

---
This route is cached for up to 3600 seconds

---
Requires one of the following EVE corporation role(s): Station_Manager

 * @summary Get corporation structures
 */
export const getCorporationsCorporationIdStructures = (
  corporationId: number,
  params?: GetCorporationsCorporationIdStructuresParams,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<GetCorporationsCorporationIdStructures200Item[]>> => {
  return axios.get(`/corporations/${corporationId}/structures/`, {
    ...options,
    params: { ...params, ...options?.params },
  });
};

export const getGetCorporationsCorporationIdStructuresKey = (
  corporationId: number,
  params?: GetCorporationsCorporationIdStructuresParams,
) => [
  `/corporations/${corporationId}/structures/`,
  ...(params ? [params] : []),
];

export type GetCorporationsCorporationIdStructuresQueryResult = NonNullable<
  Awaited<ReturnType<typeof getCorporationsCorporationIdStructures>>
>;
export type GetCorporationsCorporationIdStructuresQueryError = AxiosError<
  | void
  | BadRequest
  | Unauthorized
  | Forbidden
  | ErrorLimited
  | InternalServerError
  | ServiceUnavailable
  | GatewayTimeout
>;

export const useGetCorporationsCorporationIdStructures = <
  TError = AxiosError<
    | void
    | BadRequest
    | Unauthorized
    | Forbidden
    | ErrorLimited
    | InternalServerError
    | ServiceUnavailable
    | GatewayTimeout
  >,
>(
  corporationId: number,
  params?: GetCorporationsCorporationIdStructuresParams,
  options?: {
    swr?: SWRConfiguration<
      Awaited<ReturnType<typeof getCorporationsCorporationIdStructures>>,
      TError
    > & { swrKey?: Key; enabled?: boolean };
    axios?: AxiosRequestConfig;
  },
) => {
  const { swr: swrOptions, axios: axiosOptions } = options ?? {};

  const isEnabled = swrOptions?.enabled !== false && !!corporationId;
  const swrKey =
    swrOptions?.swrKey ??
    (() =>
      isEnabled
        ? getGetCorporationsCorporationIdStructuresKey(corporationId, params)
        : null);
  const swrFn = () =>
    getCorporationsCorporationIdStructures(corporationId, params, axiosOptions);

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(
    swrKey,
    swrFn,
    swrOptions,
  );

  return {
    swrKey,
    ...query,
  };
};

/**
 * Returns a corporation's titles

---
Alternate route: `/dev/corporations/{corporation_id}/titles/`

Alternate route: `/v2/corporations/{corporation_id}/titles/`

---
This route is cached for up to 3600 seconds

---
Requires one of the following EVE corporation role(s): Director

 * @summary Get corporation titles
 */
export const getCorporationsCorporationIdTitles = (
  corporationId: number,
  params?: GetCorporationsCorporationIdTitlesParams,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<GetCorporationsCorporationIdTitles200Item[]>> => {
  return axios.get(`/corporations/${corporationId}/titles/`, {
    ...options,
    params: { ...params, ...options?.params },
  });
};

export const getGetCorporationsCorporationIdTitlesKey = (
  corporationId: number,
  params?: GetCorporationsCorporationIdTitlesParams,
) => [`/corporations/${corporationId}/titles/`, ...(params ? [params] : [])];

export type GetCorporationsCorporationIdTitlesQueryResult = NonNullable<
  Awaited<ReturnType<typeof getCorporationsCorporationIdTitles>>
>;
export type GetCorporationsCorporationIdTitlesQueryError = AxiosError<
  | void
  | BadRequest
  | Unauthorized
  | Forbidden
  | ErrorLimited
  | InternalServerError
  | ServiceUnavailable
  | GatewayTimeout
>;

export const useGetCorporationsCorporationIdTitles = <
  TError = AxiosError<
    | void
    | BadRequest
    | Unauthorized
    | Forbidden
    | ErrorLimited
    | InternalServerError
    | ServiceUnavailable
    | GatewayTimeout
  >,
>(
  corporationId: number,
  params?: GetCorporationsCorporationIdTitlesParams,
  options?: {
    swr?: SWRConfiguration<
      Awaited<ReturnType<typeof getCorporationsCorporationIdTitles>>,
      TError
    > & { swrKey?: Key; enabled?: boolean };
    axios?: AxiosRequestConfig;
  },
) => {
  const { swr: swrOptions, axios: axiosOptions } = options ?? {};

  const isEnabled = swrOptions?.enabled !== false && !!corporationId;
  const swrKey =
    swrOptions?.swrKey ??
    (() =>
      isEnabled
        ? getGetCorporationsCorporationIdTitlesKey(corporationId, params)
        : null);
  const swrFn = () =>
    getCorporationsCorporationIdTitles(corporationId, params, axiosOptions);

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(
    swrKey,
    swrFn,
    swrOptions,
  );

  return {
    swrKey,
    ...query,
  };
};
