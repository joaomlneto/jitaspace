/**
 * Generated by orval v6.11.1 üç∫
 * Do not edit manually.
 * EVE Swagger Interface
 * An OpenAPI for EVE Online
 * OpenAPI spec version: 1.17
 */
import type { AxiosError, AxiosRequestConfig, AxiosResponse } from "axios";
import axios from "axios";
import type { Key, SWRConfiguration } from "swr";
import useSwr from "swr";

import type {
  BadRequest,
  ErrorLimited,
  Forbidden,
  GatewayTimeout,
  GetCharactersCharacterIdContracts200Item,
  GetCharactersCharacterIdContractsContractIdBids200Item,
  GetCharactersCharacterIdContractsContractIdBids404,
  GetCharactersCharacterIdContractsContractIdBidsParams,
  GetCharactersCharacterIdContractsContractIdItems200Item,
  GetCharactersCharacterIdContractsContractIdItems404,
  GetCharactersCharacterIdContractsContractIdItemsParams,
  GetCharactersCharacterIdContractsParams,
  GetContractsPublicBidsContractId200Item,
  GetContractsPublicBidsContractId403,
  GetContractsPublicBidsContractId404,
  GetContractsPublicBidsContractIdParams,
  GetContractsPublicItemsContractId200Item,
  GetContractsPublicItemsContractId403,
  GetContractsPublicItemsContractId404,
  GetContractsPublicItemsContractIdParams,
  GetContractsPublicRegionId200Item,
  GetContractsPublicRegionId404,
  GetContractsPublicRegionIdParams,
  GetCorporationsCorporationIdContracts200Item,
  GetCorporationsCorporationIdContractsContractIdBids200Item,
  GetCorporationsCorporationIdContractsContractIdBids404,
  GetCorporationsCorporationIdContractsContractIdBidsParams,
  GetCorporationsCorporationIdContractsContractIdItems200Item,
  GetCorporationsCorporationIdContractsContractIdItems404,
  GetCorporationsCorporationIdContractsContractIdItems520,
  GetCorporationsCorporationIdContractsContractIdItemsParams,
  GetCorporationsCorporationIdContractsParams,
  InternalServerError,
  ServiceUnavailable,
  Unauthorized,
} from "./model";

/**
 * Returns contracts available to a character, only if the character is issuer, acceptor or assignee. Only returns contracts no older than 30 days, or if the status is "in_progress".

---
Alternate route: `/dev/characters/{character_id}/contracts/`

Alternate route: `/legacy/characters/{character_id}/contracts/`

Alternate route: `/v1/characters/{character_id}/contracts/`

---
This route is cached for up to 300 seconds
 * @summary Get contracts
 */
export const getCharactersCharacterIdContracts = (
  characterId: number,
  params?: GetCharactersCharacterIdContractsParams,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<GetCharactersCharacterIdContracts200Item[]>> => {
  return axios.get(`/characters/${characterId}/contracts/`, {
    ...options,
    params: { ...params, ...options?.params },
  });
};

export const getGetCharactersCharacterIdContractsKey = (
  characterId: number,
  params?: GetCharactersCharacterIdContractsParams,
) => [`/characters/${characterId}/contracts/`, ...(params ? [params] : [])];

export type GetCharactersCharacterIdContractsQueryResult = NonNullable<
  Awaited<ReturnType<typeof getCharactersCharacterIdContracts>>
>;
export type GetCharactersCharacterIdContractsQueryError = AxiosError<
  | void
  | BadRequest
  | Unauthorized
  | Forbidden
  | ErrorLimited
  | InternalServerError
  | ServiceUnavailable
  | GatewayTimeout
>;

export const useGetCharactersCharacterIdContracts = <
  TError = AxiosError<
    | void
    | BadRequest
    | Unauthorized
    | Forbidden
    | ErrorLimited
    | InternalServerError
    | ServiceUnavailable
    | GatewayTimeout
  >,
>(
  characterId: number,
  params?: GetCharactersCharacterIdContractsParams,
  options?: {
    swr?: SWRConfiguration<
      Awaited<ReturnType<typeof getCharactersCharacterIdContracts>>,
      TError
    > & { swrKey?: Key; enabled?: boolean };
    axios?: AxiosRequestConfig;
  },
) => {
  const { swr: swrOptions, axios: axiosOptions } = options ?? {};

  const isEnabled = swrOptions?.enabled !== false && !!characterId;
  const swrKey =
    swrOptions?.swrKey ??
    (() =>
      isEnabled
        ? getGetCharactersCharacterIdContractsKey(characterId, params)
        : null);
  const swrFn = () =>
    getCharactersCharacterIdContracts(characterId, params, axiosOptions);

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(
    swrKey,
    swrFn,
    swrOptions,
  );

  return {
    swrKey,
    ...query,
  };
};

/**
 * Lists bids on a particular auction contract

---
Alternate route: `/dev/characters/{character_id}/contracts/{contract_id}/bids/`

Alternate route: `/legacy/characters/{character_id}/contracts/{contract_id}/bids/`

Alternate route: `/v1/characters/{character_id}/contracts/{contract_id}/bids/`

---
This route is cached for up to 300 seconds
 * @summary Get contract bids
 */
export const getCharactersCharacterIdContractsContractIdBids = (
  characterId: number,
  contractId: number,
  params?: GetCharactersCharacterIdContractsContractIdBidsParams,
  options?: AxiosRequestConfig,
): Promise<
  AxiosResponse<GetCharactersCharacterIdContractsContractIdBids200Item[]>
> => {
  return axios.get(`/characters/${characterId}/contracts/${contractId}/bids/`, {
    ...options,
    params: { ...params, ...options?.params },
  });
};

export const getGetCharactersCharacterIdContractsContractIdBidsKey = (
  characterId: number,
  contractId: number,
  params?: GetCharactersCharacterIdContractsContractIdBidsParams,
) => [
  `/characters/${characterId}/contracts/${contractId}/bids/`,
  ...(params ? [params] : []),
];

export type GetCharactersCharacterIdContractsContractIdBidsQueryResult =
  NonNullable<
    Awaited<ReturnType<typeof getCharactersCharacterIdContractsContractIdBids>>
  >;
export type GetCharactersCharacterIdContractsContractIdBidsQueryError =
  AxiosError<
    | void
    | BadRequest
    | Unauthorized
    | Forbidden
    | GetCharactersCharacterIdContractsContractIdBids404
    | ErrorLimited
    | InternalServerError
    | ServiceUnavailable
    | GatewayTimeout
  >;

export const useGetCharactersCharacterIdContractsContractIdBids = <
  TError = AxiosError<
    | void
    | BadRequest
    | Unauthorized
    | Forbidden
    | GetCharactersCharacterIdContractsContractIdBids404
    | ErrorLimited
    | InternalServerError
    | ServiceUnavailable
    | GatewayTimeout
  >,
>(
  characterId: number,
  contractId: number,
  params?: GetCharactersCharacterIdContractsContractIdBidsParams,
  options?: {
    swr?: SWRConfiguration<
      Awaited<
        ReturnType<typeof getCharactersCharacterIdContractsContractIdBids>
      >,
      TError
    > & { swrKey?: Key; enabled?: boolean };
    axios?: AxiosRequestConfig;
  },
) => {
  const { swr: swrOptions, axios: axiosOptions } = options ?? {};

  const isEnabled =
    swrOptions?.enabled !== false && !!(characterId && contractId);
  const swrKey =
    swrOptions?.swrKey ??
    (() =>
      isEnabled
        ? getGetCharactersCharacterIdContractsContractIdBidsKey(
            characterId,
            contractId,
            params,
          )
        : null);
  const swrFn = () =>
    getCharactersCharacterIdContractsContractIdBids(
      characterId,
      contractId,
      params,
      axiosOptions,
    );

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(
    swrKey,
    swrFn,
    swrOptions,
  );

  return {
    swrKey,
    ...query,
  };
};

/**
 * Lists items of a particular contract

---
Alternate route: `/dev/characters/{character_id}/contracts/{contract_id}/items/`

Alternate route: `/legacy/characters/{character_id}/contracts/{contract_id}/items/`

Alternate route: `/v1/characters/{character_id}/contracts/{contract_id}/items/`

---
This route is cached for up to 3600 seconds
 * @summary Get contract items
 */
export const getCharactersCharacterIdContractsContractIdItems = (
  characterId: number,
  contractId: number,
  params?: GetCharactersCharacterIdContractsContractIdItemsParams,
  options?: AxiosRequestConfig,
): Promise<
  AxiosResponse<GetCharactersCharacterIdContractsContractIdItems200Item[]>
> => {
  return axios.get(
    `/characters/${characterId}/contracts/${contractId}/items/`,
    {
      ...options,
      params: { ...params, ...options?.params },
    },
  );
};

export const getGetCharactersCharacterIdContractsContractIdItemsKey = (
  characterId: number,
  contractId: number,
  params?: GetCharactersCharacterIdContractsContractIdItemsParams,
) => [
  `/characters/${characterId}/contracts/${contractId}/items/`,
  ...(params ? [params] : []),
];

export type GetCharactersCharacterIdContractsContractIdItemsQueryResult =
  NonNullable<
    Awaited<ReturnType<typeof getCharactersCharacterIdContractsContractIdItems>>
  >;
export type GetCharactersCharacterIdContractsContractIdItemsQueryError =
  AxiosError<
    | void
    | BadRequest
    | Unauthorized
    | Forbidden
    | GetCharactersCharacterIdContractsContractIdItems404
    | ErrorLimited
    | InternalServerError
    | ServiceUnavailable
    | GatewayTimeout
  >;

export const useGetCharactersCharacterIdContractsContractIdItems = <
  TError = AxiosError<
    | void
    | BadRequest
    | Unauthorized
    | Forbidden
    | GetCharactersCharacterIdContractsContractIdItems404
    | ErrorLimited
    | InternalServerError
    | ServiceUnavailable
    | GatewayTimeout
  >,
>(
  characterId: number,
  contractId: number,
  params?: GetCharactersCharacterIdContractsContractIdItemsParams,
  options?: {
    swr?: SWRConfiguration<
      Awaited<
        ReturnType<typeof getCharactersCharacterIdContractsContractIdItems>
      >,
      TError
    > & { swrKey?: Key; enabled?: boolean };
    axios?: AxiosRequestConfig;
  },
) => {
  const { swr: swrOptions, axios: axiosOptions } = options ?? {};

  const isEnabled =
    swrOptions?.enabled !== false && !!(characterId && contractId);
  const swrKey =
    swrOptions?.swrKey ??
    (() =>
      isEnabled
        ? getGetCharactersCharacterIdContractsContractIdItemsKey(
            characterId,
            contractId,
            params,
          )
        : null);
  const swrFn = () =>
    getCharactersCharacterIdContractsContractIdItems(
      characterId,
      contractId,
      params,
      axiosOptions,
    );

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(
    swrKey,
    swrFn,
    swrOptions,
  );

  return {
    swrKey,
    ...query,
  };
};

/**
 * Lists bids on a public auction contract

---
Alternate route: `/dev/contracts/public/bids/{contract_id}/`

Alternate route: `/legacy/contracts/public/bids/{contract_id}/`

Alternate route: `/v1/contracts/public/bids/{contract_id}/`

---
This route is cached for up to 300 seconds
 * @summary Get public contract bids
 */
export const getContractsPublicBidsContractId = (
  contractId: number,
  params?: GetContractsPublicBidsContractIdParams,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<GetContractsPublicBidsContractId200Item[] | void>> => {
  return axios.get(`/contracts/public/bids/${contractId}/`, {
    ...options,
    params: { ...params, ...options?.params },
  });
};

export const getGetContractsPublicBidsContractIdKey = (
  contractId: number,
  params?: GetContractsPublicBidsContractIdParams,
) => [`/contracts/public/bids/${contractId}/`, ...(params ? [params] : [])];

export type GetContractsPublicBidsContractIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof getContractsPublicBidsContractId>>
>;
export type GetContractsPublicBidsContractIdQueryError = AxiosError<
  | BadRequest
  | GetContractsPublicBidsContractId403
  | GetContractsPublicBidsContractId404
  | ErrorLimited
  | InternalServerError
  | ServiceUnavailable
  | GatewayTimeout
>;

export const useGetContractsPublicBidsContractId = <
  TError = AxiosError<
    | BadRequest
    | GetContractsPublicBidsContractId403
    | GetContractsPublicBidsContractId404
    | ErrorLimited
    | InternalServerError
    | ServiceUnavailable
    | GatewayTimeout
  >,
>(
  contractId: number,
  params?: GetContractsPublicBidsContractIdParams,
  options?: {
    swr?: SWRConfiguration<
      Awaited<ReturnType<typeof getContractsPublicBidsContractId>>,
      TError
    > & { swrKey?: Key; enabled?: boolean };
    axios?: AxiosRequestConfig;
  },
) => {
  const { swr: swrOptions, axios: axiosOptions } = options ?? {};

  const isEnabled = swrOptions?.enabled !== false && !!contractId;
  const swrKey =
    swrOptions?.swrKey ??
    (() =>
      isEnabled
        ? getGetContractsPublicBidsContractIdKey(contractId, params)
        : null);
  const swrFn = () =>
    getContractsPublicBidsContractId(contractId, params, axiosOptions);

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(
    swrKey,
    swrFn,
    swrOptions,
  );

  return {
    swrKey,
    ...query,
  };
};

/**
 * Lists items of a public contract

---
Alternate route: `/dev/contracts/public/items/{contract_id}/`

Alternate route: `/legacy/contracts/public/items/{contract_id}/`

Alternate route: `/v1/contracts/public/items/{contract_id}/`

---
This route is cached for up to 3600 seconds
 * @summary Get public contract items
 */
export const getContractsPublicItemsContractId = (
  contractId: number,
  params?: GetContractsPublicItemsContractIdParams,
  options?: AxiosRequestConfig,
): Promise<
  AxiosResponse<GetContractsPublicItemsContractId200Item[] | void>
> => {
  return axios.get(`/contracts/public/items/${contractId}/`, {
    ...options,
    params: { ...params, ...options?.params },
  });
};

export const getGetContractsPublicItemsContractIdKey = (
  contractId: number,
  params?: GetContractsPublicItemsContractIdParams,
) => [`/contracts/public/items/${contractId}/`, ...(params ? [params] : [])];

export type GetContractsPublicItemsContractIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof getContractsPublicItemsContractId>>
>;
export type GetContractsPublicItemsContractIdQueryError = AxiosError<
  | BadRequest
  | GetContractsPublicItemsContractId403
  | GetContractsPublicItemsContractId404
  | ErrorLimited
  | InternalServerError
  | ServiceUnavailable
  | GatewayTimeout
>;

export const useGetContractsPublicItemsContractId = <
  TError = AxiosError<
    | BadRequest
    | GetContractsPublicItemsContractId403
    | GetContractsPublicItemsContractId404
    | ErrorLimited
    | InternalServerError
    | ServiceUnavailable
    | GatewayTimeout
  >,
>(
  contractId: number,
  params?: GetContractsPublicItemsContractIdParams,
  options?: {
    swr?: SWRConfiguration<
      Awaited<ReturnType<typeof getContractsPublicItemsContractId>>,
      TError
    > & { swrKey?: Key; enabled?: boolean };
    axios?: AxiosRequestConfig;
  },
) => {
  const { swr: swrOptions, axios: axiosOptions } = options ?? {};

  const isEnabled = swrOptions?.enabled !== false && !!contractId;
  const swrKey =
    swrOptions?.swrKey ??
    (() =>
      isEnabled
        ? getGetContractsPublicItemsContractIdKey(contractId, params)
        : null);
  const swrFn = () =>
    getContractsPublicItemsContractId(contractId, params, axiosOptions);

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(
    swrKey,
    swrFn,
    swrOptions,
  );

  return {
    swrKey,
    ...query,
  };
};

/**
 * Returns a paginated list of all public contracts in the given region

---
Alternate route: `/dev/contracts/public/{region_id}/`

Alternate route: `/legacy/contracts/public/{region_id}/`

Alternate route: `/v1/contracts/public/{region_id}/`

---
This route is cached for up to 1800 seconds
 * @summary Get public contracts
 */
export const getContractsPublicRegionId = (
  regionId: number,
  params?: GetContractsPublicRegionIdParams,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<GetContractsPublicRegionId200Item[]>> => {
  return axios.get(`/contracts/public/${regionId}/`, {
    ...options,
    params: { ...params, ...options?.params },
  });
};

export const getGetContractsPublicRegionIdKey = (
  regionId: number,
  params?: GetContractsPublicRegionIdParams,
) => [`/contracts/public/${regionId}/`, ...(params ? [params] : [])];

export type GetContractsPublicRegionIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof getContractsPublicRegionId>>
>;
export type GetContractsPublicRegionIdQueryError = AxiosError<
  | void
  | BadRequest
  | GetContractsPublicRegionId404
  | ErrorLimited
  | InternalServerError
  | ServiceUnavailable
  | GatewayTimeout
>;

export const useGetContractsPublicRegionId = <
  TError = AxiosError<
    | void
    | BadRequest
    | GetContractsPublicRegionId404
    | ErrorLimited
    | InternalServerError
    | ServiceUnavailable
    | GatewayTimeout
  >,
>(
  regionId: number,
  params?: GetContractsPublicRegionIdParams,
  options?: {
    swr?: SWRConfiguration<
      Awaited<ReturnType<typeof getContractsPublicRegionId>>,
      TError
    > & { swrKey?: Key; enabled?: boolean };
    axios?: AxiosRequestConfig;
  },
) => {
  const { swr: swrOptions, axios: axiosOptions } = options ?? {};

  const isEnabled = swrOptions?.enabled !== false && !!regionId;
  const swrKey =
    swrOptions?.swrKey ??
    (() =>
      isEnabled ? getGetContractsPublicRegionIdKey(regionId, params) : null);
  const swrFn = () =>
    getContractsPublicRegionId(regionId, params, axiosOptions);

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(
    swrKey,
    swrFn,
    swrOptions,
  );

  return {
    swrKey,
    ...query,
  };
};

/**
 * Returns contracts available to a corporation, only if the corporation is issuer, acceptor or assignee. Only returns contracts no older than 30 days, or if the status is "in_progress".

---
Alternate route: `/dev/corporations/{corporation_id}/contracts/`

Alternate route: `/legacy/corporations/{corporation_id}/contracts/`

Alternate route: `/v1/corporations/{corporation_id}/contracts/`

---
This route is cached for up to 300 seconds
 * @summary Get corporation contracts
 */
export const getCorporationsCorporationIdContracts = (
  corporationId: number,
  params?: GetCorporationsCorporationIdContractsParams,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<GetCorporationsCorporationIdContracts200Item[]>> => {
  return axios.get(`/corporations/${corporationId}/contracts/`, {
    ...options,
    params: { ...params, ...options?.params },
  });
};

export const getGetCorporationsCorporationIdContractsKey = (
  corporationId: number,
  params?: GetCorporationsCorporationIdContractsParams,
) => [`/corporations/${corporationId}/contracts/`, ...(params ? [params] : [])];

export type GetCorporationsCorporationIdContractsQueryResult = NonNullable<
  Awaited<ReturnType<typeof getCorporationsCorporationIdContracts>>
>;
export type GetCorporationsCorporationIdContractsQueryError = AxiosError<
  | void
  | BadRequest
  | Unauthorized
  | Forbidden
  | ErrorLimited
  | InternalServerError
  | ServiceUnavailable
  | GatewayTimeout
>;

export const useGetCorporationsCorporationIdContracts = <
  TError = AxiosError<
    | void
    | BadRequest
    | Unauthorized
    | Forbidden
    | ErrorLimited
    | InternalServerError
    | ServiceUnavailable
    | GatewayTimeout
  >,
>(
  corporationId: number,
  params?: GetCorporationsCorporationIdContractsParams,
  options?: {
    swr?: SWRConfiguration<
      Awaited<ReturnType<typeof getCorporationsCorporationIdContracts>>,
      TError
    > & { swrKey?: Key; enabled?: boolean };
    axios?: AxiosRequestConfig;
  },
) => {
  const { swr: swrOptions, axios: axiosOptions } = options ?? {};

  const isEnabled = swrOptions?.enabled !== false && !!corporationId;
  const swrKey =
    swrOptions?.swrKey ??
    (() =>
      isEnabled
        ? getGetCorporationsCorporationIdContractsKey(corporationId, params)
        : null);
  const swrFn = () =>
    getCorporationsCorporationIdContracts(corporationId, params, axiosOptions);

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(
    swrKey,
    swrFn,
    swrOptions,
  );

  return {
    swrKey,
    ...query,
  };
};

/**
 * Lists bids on a particular auction contract

---
Alternate route: `/dev/corporations/{corporation_id}/contracts/{contract_id}/bids/`

Alternate route: `/legacy/corporations/{corporation_id}/contracts/{contract_id}/bids/`

Alternate route: `/v1/corporations/{corporation_id}/contracts/{contract_id}/bids/`

---
This route is cached for up to 3600 seconds
 * @summary Get corporation contract bids
 */
export const getCorporationsCorporationIdContractsContractIdBids = (
  corporationId: number,
  contractId: number,
  params?: GetCorporationsCorporationIdContractsContractIdBidsParams,
  options?: AxiosRequestConfig,
): Promise<
  AxiosResponse<GetCorporationsCorporationIdContractsContractIdBids200Item[]>
> => {
  return axios.get(
    `/corporations/${corporationId}/contracts/${contractId}/bids/`,
    {
      ...options,
      params: { ...params, ...options?.params },
    },
  );
};

export const getGetCorporationsCorporationIdContractsContractIdBidsKey = (
  corporationId: number,
  contractId: number,
  params?: GetCorporationsCorporationIdContractsContractIdBidsParams,
) => [
  `/corporations/${corporationId}/contracts/${contractId}/bids/`,
  ...(params ? [params] : []),
];

export type GetCorporationsCorporationIdContractsContractIdBidsQueryResult =
  NonNullable<
    Awaited<
      ReturnType<typeof getCorporationsCorporationIdContractsContractIdBids>
    >
  >;
export type GetCorporationsCorporationIdContractsContractIdBidsQueryError =
  AxiosError<
    | void
    | BadRequest
    | Unauthorized
    | Forbidden
    | GetCorporationsCorporationIdContractsContractIdBids404
    | ErrorLimited
    | InternalServerError
    | ServiceUnavailable
    | GatewayTimeout
  >;

export const useGetCorporationsCorporationIdContractsContractIdBids = <
  TError = AxiosError<
    | void
    | BadRequest
    | Unauthorized
    | Forbidden
    | GetCorporationsCorporationIdContractsContractIdBids404
    | ErrorLimited
    | InternalServerError
    | ServiceUnavailable
    | GatewayTimeout
  >,
>(
  corporationId: number,
  contractId: number,
  params?: GetCorporationsCorporationIdContractsContractIdBidsParams,
  options?: {
    swr?: SWRConfiguration<
      Awaited<
        ReturnType<typeof getCorporationsCorporationIdContractsContractIdBids>
      >,
      TError
    > & { swrKey?: Key; enabled?: boolean };
    axios?: AxiosRequestConfig;
  },
) => {
  const { swr: swrOptions, axios: axiosOptions } = options ?? {};

  const isEnabled =
    swrOptions?.enabled !== false && !!(corporationId && contractId);
  const swrKey =
    swrOptions?.swrKey ??
    (() =>
      isEnabled
        ? getGetCorporationsCorporationIdContractsContractIdBidsKey(
            corporationId,
            contractId,
            params,
          )
        : null);
  const swrFn = () =>
    getCorporationsCorporationIdContractsContractIdBids(
      corporationId,
      contractId,
      params,
      axiosOptions,
    );

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(
    swrKey,
    swrFn,
    swrOptions,
  );

  return {
    swrKey,
    ...query,
  };
};

/**
 * Lists items of a particular contract

---
Alternate route: `/dev/corporations/{corporation_id}/contracts/{contract_id}/items/`

Alternate route: `/legacy/corporations/{corporation_id}/contracts/{contract_id}/items/`

Alternate route: `/v1/corporations/{corporation_id}/contracts/{contract_id}/items/`

---
This route is cached for up to 3600 seconds
 * @summary Get corporation contract items
 */
export const getCorporationsCorporationIdContractsContractIdItems = (
  corporationId: number,
  contractId: number,
  params?: GetCorporationsCorporationIdContractsContractIdItemsParams,
  options?: AxiosRequestConfig,
): Promise<
  AxiosResponse<GetCorporationsCorporationIdContractsContractIdItems200Item[]>
> => {
  return axios.get(
    `/corporations/${corporationId}/contracts/${contractId}/items/`,
    {
      ...options,
      params: { ...params, ...options?.params },
    },
  );
};

export const getGetCorporationsCorporationIdContractsContractIdItemsKey = (
  corporationId: number,
  contractId: number,
  params?: GetCorporationsCorporationIdContractsContractIdItemsParams,
) => [
  `/corporations/${corporationId}/contracts/${contractId}/items/`,
  ...(params ? [params] : []),
];

export type GetCorporationsCorporationIdContractsContractIdItemsQueryResult =
  NonNullable<
    Awaited<
      ReturnType<typeof getCorporationsCorporationIdContractsContractIdItems>
    >
  >;
export type GetCorporationsCorporationIdContractsContractIdItemsQueryError =
  AxiosError<
    | void
    | BadRequest
    | Unauthorized
    | Forbidden
    | GetCorporationsCorporationIdContractsContractIdItems404
    | ErrorLimited
    | InternalServerError
    | ServiceUnavailable
    | GatewayTimeout
    | GetCorporationsCorporationIdContractsContractIdItems520
  >;

export const useGetCorporationsCorporationIdContractsContractIdItems = <
  TError = AxiosError<
    | void
    | BadRequest
    | Unauthorized
    | Forbidden
    | GetCorporationsCorporationIdContractsContractIdItems404
    | ErrorLimited
    | InternalServerError
    | ServiceUnavailable
    | GatewayTimeout
    | GetCorporationsCorporationIdContractsContractIdItems520
  >,
>(
  corporationId: number,
  contractId: number,
  params?: GetCorporationsCorporationIdContractsContractIdItemsParams,
  options?: {
    swr?: SWRConfiguration<
      Awaited<
        ReturnType<typeof getCorporationsCorporationIdContractsContractIdItems>
      >,
      TError
    > & { swrKey?: Key; enabled?: boolean };
    axios?: AxiosRequestConfig;
  },
) => {
  const { swr: swrOptions, axios: axiosOptions } = options ?? {};

  const isEnabled =
    swrOptions?.enabled !== false && !!(corporationId && contractId);
  const swrKey =
    swrOptions?.swrKey ??
    (() =>
      isEnabled
        ? getGetCorporationsCorporationIdContractsContractIdItemsKey(
            corporationId,
            contractId,
            params,
          )
        : null);
  const swrFn = () =>
    getCorporationsCorporationIdContractsContractIdItems(
      corporationId,
      contractId,
      params,
      axiosOptions,
    );

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(
    swrKey,
    swrFn,
    swrOptions,
  );

  return {
    swrKey,
    ...query,
  };
};
