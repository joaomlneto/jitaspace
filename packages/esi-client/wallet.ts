/**
 * Generated by orval v6.11.1 üç∫
 * Do not edit manually.
 * EVE Swagger Interface
 * An OpenAPI for EVE Online
 * OpenAPI spec version: 1.17
 */
import axios from 'axios'
import type {
  AxiosRequestConfig,
  AxiosResponse,
  AxiosError
} from 'axios'
import useSwr from 'swr'
import type {
  SWRConfiguration,
  Key
} from 'swr'
import type {
  BadRequest,
  Unauthorized,
  Forbidden,
  ErrorLimited,
  InternalServerError,
  ServiceUnavailable,
  GatewayTimeout,
  GetCharactersCharacterIdWalletParams,
  GetCharactersCharacterIdWalletJournal200Item,
  GetCharactersCharacterIdWalletJournalParams,
  GetCharactersCharacterIdWalletTransactions200Item,
  GetCharactersCharacterIdWalletTransactionsParams,
  GetCorporationsCorporationIdWallets200Item,
  GetCorporationsCorporationIdWalletsParams,
  GetCorporationsCorporationIdWalletsDivisionJournal200Item,
  GetCorporationsCorporationIdWalletsDivisionJournalParams,
  GetCorporationsCorporationIdWalletsDivisionTransactions200Item,
  GetCorporationsCorporationIdWalletsDivisionTransactionsParams
} from './model'



  
  /**
 * Returns a character's wallet balance

---
Alternate route: `/legacy/characters/{character_id}/wallet/`

Alternate route: `/v1/characters/{character_id}/wallet/`

---
This route is cached for up to 120 seconds

---
[Diff of the upcoming changes](https://esi.evetech.net/diff/latest/dev/#GET-/characters/{character_id}/wallet/)
 * @summary Get a character's wallet balance
 */
export const getCharactersCharacterIdWallet = (
    characterId: number,
    params?: GetCharactersCharacterIdWalletParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<number>> => {
    return axios.get(
      `/characters/${characterId}/wallet/`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }


export const getGetCharactersCharacterIdWalletKey = (characterId: number,
    params?: GetCharactersCharacterIdWalletParams,) => [`/characters/${characterId}/wallet/`, ...(params ? [params]: [])];

    
export type GetCharactersCharacterIdWalletQueryResult = NonNullable<Awaited<ReturnType<typeof getCharactersCharacterIdWallet>>>
export type GetCharactersCharacterIdWalletQueryError = AxiosError<void | BadRequest | Unauthorized | Forbidden | ErrorLimited | InternalServerError | ServiceUnavailable | GatewayTimeout>

export const useGetCharactersCharacterIdWallet = <TError = AxiosError<void | BadRequest | Unauthorized | Forbidden | ErrorLimited | InternalServerError | ServiceUnavailable | GatewayTimeout>>(
 characterId: number,
    params?: GetCharactersCharacterIdWalletParams, options?: { swr?:SWRConfiguration<Awaited<ReturnType<typeof getCharactersCharacterIdWallet>>, TError> & { swrKey?: Key, enabled?: boolean }, axios?: AxiosRequestConfig }

  ) => {

  const {swr: swrOptions, axios: axiosOptions} = options ?? {}

  const isEnabled = swrOptions?.enabled !== false && !!(characterId)
    const swrKey = swrOptions?.swrKey ?? (() => isEnabled ? getGetCharactersCharacterIdWalletKey(characterId,params) : null);
  const swrFn = () => getCharactersCharacterIdWallet(characterId,params, axiosOptions);

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * Retrieve the given character's wallet journal going 30 days back

---
Alternate route: `/dev/characters/{character_id}/wallet/journal/`

Alternate route: `/v6/characters/{character_id}/wallet/journal/`

---
This route is cached for up to 3600 seconds
 * @summary Get character wallet journal
 */
export const getCharactersCharacterIdWalletJournal = (
    characterId: number,
    params?: GetCharactersCharacterIdWalletJournalParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<GetCharactersCharacterIdWalletJournal200Item[]>> => {
    return axios.get(
      `/characters/${characterId}/wallet/journal/`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }


export const getGetCharactersCharacterIdWalletJournalKey = (characterId: number,
    params?: GetCharactersCharacterIdWalletJournalParams,) => [`/characters/${characterId}/wallet/journal/`, ...(params ? [params]: [])];

    
export type GetCharactersCharacterIdWalletJournalQueryResult = NonNullable<Awaited<ReturnType<typeof getCharactersCharacterIdWalletJournal>>>
export type GetCharactersCharacterIdWalletJournalQueryError = AxiosError<void | BadRequest | Unauthorized | Forbidden | ErrorLimited | InternalServerError | ServiceUnavailable | GatewayTimeout>

export const useGetCharactersCharacterIdWalletJournal = <TError = AxiosError<void | BadRequest | Unauthorized | Forbidden | ErrorLimited | InternalServerError | ServiceUnavailable | GatewayTimeout>>(
 characterId: number,
    params?: GetCharactersCharacterIdWalletJournalParams, options?: { swr?:SWRConfiguration<Awaited<ReturnType<typeof getCharactersCharacterIdWalletJournal>>, TError> & { swrKey?: Key, enabled?: boolean }, axios?: AxiosRequestConfig }

  ) => {

  const {swr: swrOptions, axios: axiosOptions} = options ?? {}

  const isEnabled = swrOptions?.enabled !== false && !!(characterId)
    const swrKey = swrOptions?.swrKey ?? (() => isEnabled ? getGetCharactersCharacterIdWalletJournalKey(characterId,params) : null);
  const swrFn = () => getCharactersCharacterIdWalletJournal(characterId,params, axiosOptions);

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * Get wallet transactions of a character

---
Alternate route: `/dev/characters/{character_id}/wallet/transactions/`

Alternate route: `/legacy/characters/{character_id}/wallet/transactions/`

Alternate route: `/v1/characters/{character_id}/wallet/transactions/`

---
This route is cached for up to 3600 seconds
 * @summary Get wallet transactions
 */
export const getCharactersCharacterIdWalletTransactions = (
    characterId: number,
    params?: GetCharactersCharacterIdWalletTransactionsParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<GetCharactersCharacterIdWalletTransactions200Item[]>> => {
    return axios.get(
      `/characters/${characterId}/wallet/transactions/`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }


export const getGetCharactersCharacterIdWalletTransactionsKey = (characterId: number,
    params?: GetCharactersCharacterIdWalletTransactionsParams,) => [`/characters/${characterId}/wallet/transactions/`, ...(params ? [params]: [])];

    
export type GetCharactersCharacterIdWalletTransactionsQueryResult = NonNullable<Awaited<ReturnType<typeof getCharactersCharacterIdWalletTransactions>>>
export type GetCharactersCharacterIdWalletTransactionsQueryError = AxiosError<void | BadRequest | Unauthorized | Forbidden | ErrorLimited | InternalServerError | ServiceUnavailable | GatewayTimeout>

export const useGetCharactersCharacterIdWalletTransactions = <TError = AxiosError<void | BadRequest | Unauthorized | Forbidden | ErrorLimited | InternalServerError | ServiceUnavailable | GatewayTimeout>>(
 characterId: number,
    params?: GetCharactersCharacterIdWalletTransactionsParams, options?: { swr?:SWRConfiguration<Awaited<ReturnType<typeof getCharactersCharacterIdWalletTransactions>>, TError> & { swrKey?: Key, enabled?: boolean }, axios?: AxiosRequestConfig }

  ) => {

  const {swr: swrOptions, axios: axiosOptions} = options ?? {}

  const isEnabled = swrOptions?.enabled !== false && !!(characterId)
    const swrKey = swrOptions?.swrKey ?? (() => isEnabled ? getGetCharactersCharacterIdWalletTransactionsKey(characterId,params) : null);
  const swrFn = () => getCharactersCharacterIdWalletTransactions(characterId,params, axiosOptions);

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * Get a corporation's wallets

---
Alternate route: `/dev/corporations/{corporation_id}/wallets/`

Alternate route: `/legacy/corporations/{corporation_id}/wallets/`

Alternate route: `/v1/corporations/{corporation_id}/wallets/`

---
This route is cached for up to 300 seconds

---
Requires one of the following EVE corporation role(s): Accountant, Junior_Accountant

 * @summary Returns a corporation's wallet balance
 */
export const getCorporationsCorporationIdWallets = (
    corporationId: number,
    params?: GetCorporationsCorporationIdWalletsParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<GetCorporationsCorporationIdWallets200Item[]>> => {
    return axios.get(
      `/corporations/${corporationId}/wallets/`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }


export const getGetCorporationsCorporationIdWalletsKey = (corporationId: number,
    params?: GetCorporationsCorporationIdWalletsParams,) => [`/corporations/${corporationId}/wallets/`, ...(params ? [params]: [])];

    
export type GetCorporationsCorporationIdWalletsQueryResult = NonNullable<Awaited<ReturnType<typeof getCorporationsCorporationIdWallets>>>
export type GetCorporationsCorporationIdWalletsQueryError = AxiosError<void | BadRequest | Unauthorized | Forbidden | ErrorLimited | InternalServerError | ServiceUnavailable | GatewayTimeout>

export const useGetCorporationsCorporationIdWallets = <TError = AxiosError<void | BadRequest | Unauthorized | Forbidden | ErrorLimited | InternalServerError | ServiceUnavailable | GatewayTimeout>>(
 corporationId: number,
    params?: GetCorporationsCorporationIdWalletsParams, options?: { swr?:SWRConfiguration<Awaited<ReturnType<typeof getCorporationsCorporationIdWallets>>, TError> & { swrKey?: Key, enabled?: boolean }, axios?: AxiosRequestConfig }

  ) => {

  const {swr: swrOptions, axios: axiosOptions} = options ?? {}

  const isEnabled = swrOptions?.enabled !== false && !!(corporationId)
    const swrKey = swrOptions?.swrKey ?? (() => isEnabled ? getGetCorporationsCorporationIdWalletsKey(corporationId,params) : null);
  const swrFn = () => getCorporationsCorporationIdWallets(corporationId,params, axiosOptions);

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * Retrieve the given corporation's wallet journal for the given division going 30 days back

---
Alternate route: `/dev/corporations/{corporation_id}/wallets/{division}/journal/`

Alternate route: `/v4/corporations/{corporation_id}/wallets/{division}/journal/`

---
This route is cached for up to 3600 seconds

---
Requires one of the following EVE corporation role(s): Accountant, Junior_Accountant

 * @summary Get corporation wallet journal
 */
export const getCorporationsCorporationIdWalletsDivisionJournal = (
    corporationId: number,
    division: number,
    params?: GetCorporationsCorporationIdWalletsDivisionJournalParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<GetCorporationsCorporationIdWalletsDivisionJournal200Item[]>> => {
    return axios.get(
      `/corporations/${corporationId}/wallets/${division}/journal/`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }


export const getGetCorporationsCorporationIdWalletsDivisionJournalKey = (corporationId: number,
    division: number,
    params?: GetCorporationsCorporationIdWalletsDivisionJournalParams,) => [`/corporations/${corporationId}/wallets/${division}/journal/`, ...(params ? [params]: [])];

    
export type GetCorporationsCorporationIdWalletsDivisionJournalQueryResult = NonNullable<Awaited<ReturnType<typeof getCorporationsCorporationIdWalletsDivisionJournal>>>
export type GetCorporationsCorporationIdWalletsDivisionJournalQueryError = AxiosError<void | BadRequest | Unauthorized | Forbidden | ErrorLimited | InternalServerError | ServiceUnavailable | GatewayTimeout>

export const useGetCorporationsCorporationIdWalletsDivisionJournal = <TError = AxiosError<void | BadRequest | Unauthorized | Forbidden | ErrorLimited | InternalServerError | ServiceUnavailable | GatewayTimeout>>(
 corporationId: number,
    division: number,
    params?: GetCorporationsCorporationIdWalletsDivisionJournalParams, options?: { swr?:SWRConfiguration<Awaited<ReturnType<typeof getCorporationsCorporationIdWalletsDivisionJournal>>, TError> & { swrKey?: Key, enabled?: boolean }, axios?: AxiosRequestConfig }

  ) => {

  const {swr: swrOptions, axios: axiosOptions} = options ?? {}

  const isEnabled = swrOptions?.enabled !== false && !!(corporationId && division)
    const swrKey = swrOptions?.swrKey ?? (() => isEnabled ? getGetCorporationsCorporationIdWalletsDivisionJournalKey(corporationId,division,params) : null);
  const swrFn = () => getCorporationsCorporationIdWalletsDivisionJournal(corporationId,division,params, axiosOptions);

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * Get wallet transactions of a corporation

---
Alternate route: `/dev/corporations/{corporation_id}/wallets/{division}/transactions/`

Alternate route: `/legacy/corporations/{corporation_id}/wallets/{division}/transactions/`

Alternate route: `/v1/corporations/{corporation_id}/wallets/{division}/transactions/`

---
This route is cached for up to 3600 seconds

---
Requires one of the following EVE corporation role(s): Accountant, Junior_Accountant

 * @summary Get corporation wallet transactions
 */
export const getCorporationsCorporationIdWalletsDivisionTransactions = (
    corporationId: number,
    division: number,
    params?: GetCorporationsCorporationIdWalletsDivisionTransactionsParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<GetCorporationsCorporationIdWalletsDivisionTransactions200Item[]>> => {
    return axios.get(
      `/corporations/${corporationId}/wallets/${division}/transactions/`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }


export const getGetCorporationsCorporationIdWalletsDivisionTransactionsKey = (corporationId: number,
    division: number,
    params?: GetCorporationsCorporationIdWalletsDivisionTransactionsParams,) => [`/corporations/${corporationId}/wallets/${division}/transactions/`, ...(params ? [params]: [])];

    
export type GetCorporationsCorporationIdWalletsDivisionTransactionsQueryResult = NonNullable<Awaited<ReturnType<typeof getCorporationsCorporationIdWalletsDivisionTransactions>>>
export type GetCorporationsCorporationIdWalletsDivisionTransactionsQueryError = AxiosError<void | BadRequest | Unauthorized | Forbidden | ErrorLimited | InternalServerError | ServiceUnavailable | GatewayTimeout>

export const useGetCorporationsCorporationIdWalletsDivisionTransactions = <TError = AxiosError<void | BadRequest | Unauthorized | Forbidden | ErrorLimited | InternalServerError | ServiceUnavailable | GatewayTimeout>>(
 corporationId: number,
    division: number,
    params?: GetCorporationsCorporationIdWalletsDivisionTransactionsParams, options?: { swr?:SWRConfiguration<Awaited<ReturnType<typeof getCorporationsCorporationIdWalletsDivisionTransactions>>, TError> & { swrKey?: Key, enabled?: boolean }, axios?: AxiosRequestConfig }

  ) => {

  const {swr: swrOptions, axios: axiosOptions} = options ?? {}

  const isEnabled = swrOptions?.enabled !== false && !!(corporationId && division)
    const swrKey = swrOptions?.swrKey ?? (() => isEnabled ? getGetCorporationsCorporationIdWalletsDivisionTransactionsKey(corporationId,division,params) : null);
  const swrFn = () => getCorporationsCorporationIdWalletsDivisionTransactions(corporationId,division,params, axiosOptions);

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

