/**
 * Generated by orval v6.11.1 üç∫
 * Do not edit manually.
 * EVE Swagger Interface
 * An OpenAPI for EVE Online
 * OpenAPI spec version: 1.17
 */
import axios from 'axios'
import type {
  AxiosRequestConfig,
  AxiosResponse,
  AxiosError
} from 'axios'
import useSwr from 'swr'
import type {
  SWRConfiguration,
  Key
} from 'swr'
import type {
  GetCharactersCharacterIdKillmailsRecent200Item,
  BadRequest,
  Unauthorized,
  Forbidden,
  ErrorLimited,
  InternalServerError,
  ServiceUnavailable,
  GatewayTimeout,
  GetCharactersCharacterIdKillmailsRecentParams,
  GetCorporationsCorporationIdKillmailsRecent200Item,
  GetCorporationsCorporationIdKillmailsRecentParams,
  GetKillmailsKillmailIdKillmailHash200,
  GetKillmailsKillmailIdKillmailHash422,
  GetKillmailsKillmailIdKillmailHashParams
} from './model'



  
  /**
 * Return a list of a character's kills and losses going back 90 days

---
Alternate route: `/dev/characters/{character_id}/killmails/recent/`

Alternate route: `/legacy/characters/{character_id}/killmails/recent/`

Alternate route: `/v1/characters/{character_id}/killmails/recent/`

---
This route is cached for up to 300 seconds
 * @summary Get a character's recent kills and losses
 */
export const getCharactersCharacterIdKillmailsRecent = (
    characterId: number,
    params?: GetCharactersCharacterIdKillmailsRecentParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<GetCharactersCharacterIdKillmailsRecent200Item[]>> => {
    return axios.get(
      `/characters/${characterId}/killmails/recent/`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }


export const getGetCharactersCharacterIdKillmailsRecentKey = (characterId: number,
    params?: GetCharactersCharacterIdKillmailsRecentParams,) => [`/characters/${characterId}/killmails/recent/`, ...(params ? [params]: [])];

    
export type GetCharactersCharacterIdKillmailsRecentQueryResult = NonNullable<Awaited<ReturnType<typeof getCharactersCharacterIdKillmailsRecent>>>
export type GetCharactersCharacterIdKillmailsRecentQueryError = AxiosError<void | BadRequest | Unauthorized | Forbidden | ErrorLimited | InternalServerError | ServiceUnavailable | GatewayTimeout>

export const useGetCharactersCharacterIdKillmailsRecent = <TError = AxiosError<void | BadRequest | Unauthorized | Forbidden | ErrorLimited | InternalServerError | ServiceUnavailable | GatewayTimeout>>(
 characterId: number,
    params?: GetCharactersCharacterIdKillmailsRecentParams, options?: { swr?:SWRConfiguration<Awaited<ReturnType<typeof getCharactersCharacterIdKillmailsRecent>>, TError> & { swrKey?: Key, enabled?: boolean }, axios?: AxiosRequestConfig }

  ) => {

  const {swr: swrOptions, axios: axiosOptions} = options ?? {}

  const isEnabled = swrOptions?.enabled !== false && !!(characterId)
    const swrKey = swrOptions?.swrKey ?? (() => isEnabled ? getGetCharactersCharacterIdKillmailsRecentKey(characterId,params) : null);
  const swrFn = () => getCharactersCharacterIdKillmailsRecent(characterId,params, axiosOptions);

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * Get a list of a corporation's kills and losses going back 90 days

---
Alternate route: `/dev/corporations/{corporation_id}/killmails/recent/`

Alternate route: `/legacy/corporations/{corporation_id}/killmails/recent/`

Alternate route: `/v1/corporations/{corporation_id}/killmails/recent/`

---
This route is cached for up to 300 seconds

---
Requires one of the following EVE corporation role(s): Director

 * @summary Get a corporation's recent kills and losses
 */
export const getCorporationsCorporationIdKillmailsRecent = (
    corporationId: number,
    params?: GetCorporationsCorporationIdKillmailsRecentParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<GetCorporationsCorporationIdKillmailsRecent200Item[]>> => {
    return axios.get(
      `/corporations/${corporationId}/killmails/recent/`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }


export const getGetCorporationsCorporationIdKillmailsRecentKey = (corporationId: number,
    params?: GetCorporationsCorporationIdKillmailsRecentParams,) => [`/corporations/${corporationId}/killmails/recent/`, ...(params ? [params]: [])];

    
export type GetCorporationsCorporationIdKillmailsRecentQueryResult = NonNullable<Awaited<ReturnType<typeof getCorporationsCorporationIdKillmailsRecent>>>
export type GetCorporationsCorporationIdKillmailsRecentQueryError = AxiosError<void | BadRequest | Unauthorized | Forbidden | ErrorLimited | InternalServerError | ServiceUnavailable | GatewayTimeout>

export const useGetCorporationsCorporationIdKillmailsRecent = <TError = AxiosError<void | BadRequest | Unauthorized | Forbidden | ErrorLimited | InternalServerError | ServiceUnavailable | GatewayTimeout>>(
 corporationId: number,
    params?: GetCorporationsCorporationIdKillmailsRecentParams, options?: { swr?:SWRConfiguration<Awaited<ReturnType<typeof getCorporationsCorporationIdKillmailsRecent>>, TError> & { swrKey?: Key, enabled?: boolean }, axios?: AxiosRequestConfig }

  ) => {

  const {swr: swrOptions, axios: axiosOptions} = options ?? {}

  const isEnabled = swrOptions?.enabled !== false && !!(corporationId)
    const swrKey = swrOptions?.swrKey ?? (() => isEnabled ? getGetCorporationsCorporationIdKillmailsRecentKey(corporationId,params) : null);
  const swrFn = () => getCorporationsCorporationIdKillmailsRecent(corporationId,params, axiosOptions);

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * Return a single killmail from its ID and hash

---
Alternate route: `/dev/killmails/{killmail_id}/{killmail_hash}/`

Alternate route: `/legacy/killmails/{killmail_id}/{killmail_hash}/`

Alternate route: `/v1/killmails/{killmail_id}/{killmail_hash}/`

---
This route is cached for up to 30758400 seconds
 * @summary Get a single killmail
 */
export const getKillmailsKillmailIdKillmailHash = (
    killmailId: number,
    killmailHash: string,
    params?: GetKillmailsKillmailIdKillmailHashParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<GetKillmailsKillmailIdKillmailHash200>> => {
    return axios.get(
      `/killmails/${killmailId}/${killmailHash}/`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }


export const getGetKillmailsKillmailIdKillmailHashKey = (killmailId: number,
    killmailHash: string,
    params?: GetKillmailsKillmailIdKillmailHashParams,) => [`/killmails/${killmailId}/${killmailHash}/`, ...(params ? [params]: [])];

    
export type GetKillmailsKillmailIdKillmailHashQueryResult = NonNullable<Awaited<ReturnType<typeof getKillmailsKillmailIdKillmailHash>>>
export type GetKillmailsKillmailIdKillmailHashQueryError = AxiosError<void | BadRequest | ErrorLimited | GetKillmailsKillmailIdKillmailHash422 | InternalServerError | ServiceUnavailable | GatewayTimeout>

export const useGetKillmailsKillmailIdKillmailHash = <TError = AxiosError<void | BadRequest | ErrorLimited | GetKillmailsKillmailIdKillmailHash422 | InternalServerError | ServiceUnavailable | GatewayTimeout>>(
 killmailId: number,
    killmailHash: string,
    params?: GetKillmailsKillmailIdKillmailHashParams, options?: { swr?:SWRConfiguration<Awaited<ReturnType<typeof getKillmailsKillmailIdKillmailHash>>, TError> & { swrKey?: Key, enabled?: boolean }, axios?: AxiosRequestConfig }

  ) => {

  const {swr: swrOptions, axios: axiosOptions} = options ?? {}

  const isEnabled = swrOptions?.enabled !== false && !!(killmailId && killmailHash)
    const swrKey = swrOptions?.swrKey ?? (() => isEnabled ? getGetKillmailsKillmailIdKillmailHashKey(killmailId,killmailHash,params) : null);
  const swrFn = () => getKillmailsKillmailIdKillmailHash(killmailId,killmailHash,params, axiosOptions);

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

