generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  relationMode = "prisma"
  url          = env("DATABASE_URL")
}

model Character {
  characterId        Int           @id
  // TODO
  CorporationCeo     Corporation?  @relation("corporationCeo")
  CorporationCreator Corporation[] @relation("corporationCreator")
  updatedAt          DateTime      @updatedAt()
  isDeleted          Boolean       @default(false)
}

model MarketGroup {
  marketGroupId       Int           @id
  name                String
  description         String
  types               Type[]
  parentMarketGroupId Int?
  ParentMarketGroup   MarketGroup?  @relation("marketGroupParent", fields: [parentMarketGroupId], references: [marketGroupId], onDelete: Restrict, onUpdate: Restrict)
  children            MarketGroup[] @relation("marketGroupParent")
  updatedAt           DateTime      @updatedAt()
  isDeleted           Boolean       @default(false)

  @@index([parentMarketGroupId])
}

model Category {
  categoryId Int      @id
  Groups     Group[]
  name       String
  published  Boolean
  updatedAt  DateTime @updatedAt()
  isDeleted  Boolean  @default(false)
}

model Group {
  groupId    Int      @id
  Category   Category @relation(fields: [categoryId], references: [categoryId])
  categoryId Int
  name       String
  published  Boolean
  Type       Type[]
  updatedAt  DateTime @updatedAt()
  isDeleted  Boolean  @default(false)

  @@index([categoryId])
}

model Type {
  typeId          Int              @id
  capacity        Float?
  description     String           @db.Text
  dogmaAttributes DogmaAttribute[]
  dogmaEffects    DogmaEffect[]
  Graphic         Graphic?         @relation(fields: [graphicId], references: [graphicId])
  graphicId       Int?
  Group           Group            @relation(fields: [groupId], references: [groupId])
  groupId         Int
  Icon            Icon?            @relation(fields: [iconId], references: [iconId])
  iconId          Int?
  marketGroupId   Int?
  MarketGroup     MarketGroup?     @relation(fields: [marketGroupId], references: [marketGroupId])
  mass            Float?
  name            String           @db.Text
  packagedVolume  Float?
  portionSize     Int?
  published       Boolean
  radius          Float?
  Station         Station[]
  volume          Float?
  updatedAt       DateTime         @updatedAt()
  isDeleted       Boolean          @default(false)

  @@index([marketGroupId])
  @@index([graphicId])
  @@index([groupId])
  @@index([iconId])
}

model Graphic {
  graphicId Int    @id
  Type      Type[]
}

model DogmaAttribute {
  attributeId  Int        @id
  defaultValue Float?
  description  String?
  displayName  String?
  highIsGood   Boolean?
  iconId       Int?
  name         String?
  published    Boolean?
  stackable    Boolean?
  unitId       Int?
  Icon         Icon?      @relation(fields: [iconId], references: [iconId])
  DogmaUnit    DogmaUnit? @relation(fields: [unitId], references: [unitId])
  updatedAt    DateTime   @updatedAt()
  isDeleted    Boolean    @default(false)
  Types        Type[]

  @@index([unitId])
  @@index([iconId])
}

model DogmaEffect {
  effectId Int    @id
  Types    Type[]
}

model DogmaUnit {
  unitId         Int              @id
  displayName    String
  description    String
  DogmaAttribute DogmaAttribute[]
  updatedAt      DateTime         @updatedAt()
  isDeleted      Boolean          @default(false)
}

model Icon {
  iconId         Int              @id
  description    String
  iconFile       String
  DogmaAttribute DogmaAttribute[]
  updatedAt      DateTime         @updatedAt()
  isDeleted      Boolean          @default(false)
  Type           Type[]
}

model Alliance {
  allianceId            Int          @id
  CreatorCorporation    Corporation  @relation("allianceCreatorCorporation", fields: [creatorCorporationId], references: [corporationId])
  creatorCorporationId  Int
  dateFounded           DateTime
  executorCorporation   Corporation? @relation("allianceExecutorCorporation", fields: [executorCorporationId], references: [corporationId])
  executorCorporationId Int?         @unique
  Faction               Faction?     @relation(fields: [factionId], references: [factionId])
  factionId             Int?
  MemberCorporation     Corporation? @relation("allianceMemberCorporation", fields: [memberCorporationId], references: [corporationId])
  memberCorporationId   Int?         @unique
  name                  String
  ticker                String
  updatedAt             DateTime     @updatedAt()
  isDeleted             Boolean      @default(false)

  @@index([creatorCorporationId])
  @@index([factionId])
}

// TODO
model Faction {
  factionId   Int           @id
  Alliance    Alliance[]
  Corporation Corporation[]
  updatedAt   DateTime      @updatedAt()
  isDeleted   Boolean       @default(false)
}

model Corporation {
  corporationId    Int        @id
  allianceId       Alliance?  @relation("allianceMemberCorporation")
  Ceo              Character  @relation("corporationCeo", fields: [ceoId], references: [characterId])
  ceoId            Int        @unique
  Creator          Character  @relation("corporationCreator", fields: [creatorId], references: [characterId])
  createdAlliances Alliance[] @relation("allianceCreatorCorporation")
  executorAlliance Alliance?  @relation("allianceExecutorCorporation")
  creatorId        Int
  dateFounded      DateTime?
  description      String?
  Faction          Faction?   @relation(fields: [factionId], references: [factionId])
  factionId        Int?
  HomeStation      Station?   @relation(fields: [homeStationId], references: [stationId])
  homeStationId    Int?
  memberCount      Int
  name             String
  shares           Int?
  taxRate          Float
  ticker           String
  url              String?
  warEligible      Boolean?
  updatedAt        DateTime   @updatedAt()
  isDeleted        Boolean    @default(false)

  @@index([creatorId])
  @@index([factionId])
  @@index([homeStationId])
}

model Station {
  stationId               Int           @id
  name                    String
  CorporationHomeStations Corporation[]
  StationSolarSystem      SolarSystem   @relation(fields: [solarSystemId], references: [solarSystemId])
  solarSystemId           Int
  StationType             Type          @relation(fields: [typeId], references: [typeId])
  typeId                  Int
  updatedAt               DateTime      @updatedAt()
  isDeleted               Boolean       @default(false)

  @@index([solarSystemId])
  @@index([typeId])
}

// done:
// alliance
model Region {
  regionId             Int             @id
  name                 String
  description          String?
  RegionConstellations Constellation[]
  updatedAt            DateTime        @updatedAt()
  isDeleted            Boolean         @default(false)
}

// TODO: Add missing "position" field
model Constellation {
  constellationId           Int           @id
  name                      String
  regionId                  Int
  ConstellationRegion       Region?       @relation(fields: [regionId], references: [regionId])
  ConstellationSolarSystems SolarSystem[]
  updatedAt                 DateTime      @updatedAt()
  isDeleted                 Boolean       @default(false)

  @@index([regionId])
}

// TODO add planets, position,
model SolarSystem {
  solarSystemId   Int           @id
  name            String
  SystemStations  Station[]
  Constellation   Constellation @relation(fields: [constellationId], references: [constellationId])
  constellationId Int
  securityClass   String?
  securityStatus  Decimal
  Star            Star?         @relation(fields: [starId], references: [starId])
  starId          Int?
  // List of stargates that are located in this system
  Stargate        Stargate[]    @relation("SolarSystemStargate")
  // List of stargates that have this system as a destination
  StargateOrigins Stargate[]    @relation("SolarSystemStargateDestination")
  updatedAt       DateTime      @updatedAt()
  isDeleted       Boolean       @default(false)

  @@index([constellationId])
  @@index([starId])
}

model Star {
  starId      Int           @id
  name        String
  SolarSystem SolarSystem[]
  updatedAt   DateTime      @updatedAt()
  isDeleted   Boolean       @default(false)
}

model Stargate {
  stargateId               Int         @id
  name                     String
  SolarSystem              SolarSystem @relation("SolarSystemStargate", fields: [solarSystemId], references: [solarSystemId])
  solarSystemId            Int
  DestinationSolarSystem   SolarSystem @relation("SolarSystemStargateDestination", fields: [destinationSolarSystemId], references: [solarSystemId])
  destinationSolarSystemId Int
  updatedAt                DateTime    @updatedAt()
  isDeleted                Boolean     @default(false)

  @@index([solarSystemId])
  @@index([destinationSolarSystemId])
}
