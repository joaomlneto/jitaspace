generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  relationMode = "prisma"
  url          = env("DATABASE_URL")
}

enum CharacterGender {
  male
  female
}

model Character {
  characterId         Int             @id
  birthday            DateTime
  bloodline           Bloodline       @relation("CharacterBloodline", fields: [bloodlineId], references: [bloodlineId])
  bloodlineId         Int
  corporation         Corporation     @relation("CharacterCorporation", fields: [corporationId], references: [corporationId])
  corporationId       Int
  description         String?
  faction             Faction?        @relation("CharacterFaction", fields: [factionId], references: [factionId])
  factionId           Int?
  gender              CharacterGender
  name                String
  race                Race            @relation("CharacterRace", fields: [raceId], references: [raceId])
  raceId              Int
  securityStatus      Float?
  title               String?
  CorporationCeo      Corporation[]   @relation("corporationCeo")
  createdCorporations Corporation[]   @relation("corporationCreator")
  updatedAt           DateTime        @updatedAt()
  isDeleted           Boolean         @default(false)

  @@index([bloodlineId])
  @@index([corporationId])
  @@index([factionId])
  @@index([raceId])
}

model MarketGroup {
  marketGroupId       Int           @id
  name                String
  description         String        @db.Text
  types               Type[]
  parentMarketGroupId Int?
  parent              MarketGroup?  @relation("marketGroupParent", fields: [parentMarketGroupId], references: [marketGroupId], onDelete: Restrict, onUpdate: Restrict)
  children            MarketGroup[] @relation("marketGroupParent")
  updatedAt           DateTime      @updatedAt()
  isDeleted           Boolean       @default(false)

  @@index([parentMarketGroupId])
}

model Category {
  categoryId Int      @id
  groups     Group[]
  name       String
  published  Boolean
  updatedAt  DateTime @updatedAt()
  isDeleted  Boolean  @default(false)
}

model Group {
  groupId    Int      @id
  category   Category @relation(fields: [categoryId], references: [categoryId])
  categoryId Int
  name       String
  published  Boolean
  types      Type[]
  updatedAt  DateTime @updatedAt()
  isDeleted  Boolean  @default(false)

  @@index([categoryId])
}

model Type {
  typeId         Int             @id
  capacity       Float?
  description    String          @db.Text
  dogmaEffects   DogmaEffect[]
  graphic        Graphic?        @relation(fields: [graphicId], references: [graphicId])
  graphicId      Int?
  group          Group           @relation(fields: [groupId], references: [groupId])
  groupId        Int
  icon           Icon?           @relation(fields: [iconId], references: [iconId])
  iconId         Int?
  marketGroupId  Int?
  marketGroup    MarketGroup?    @relation(fields: [marketGroupId], references: [marketGroupId])
  mass           Float?
  name           String          @db.Text
  packagedVolume Float?
  portionSize    Int?
  published      Boolean
  radius         Float?
  stations       Station[]
  volume         Float?
  updatedAt      DateTime        @updatedAt()
  isDeleted      Boolean         @default(false)
  attributes     TypeAttribute[]
  effects        TypeEffect[]
  bloodlines     Bloodline[]     @relation("BloodlineShipType")
  Planet         Planet[]        @relation("PlanetType")

  @@index([marketGroupId])
  @@index([graphicId])
  @@index([groupId])
  @@index([iconId])
}

model TypeAttribute {
  type        Type           @relation(fields: [typeId], references: [typeId])
  attribute   DogmaAttribute @relation(fields: [attributeId], references: [attributeId])
  typeId      Int
  attributeId Int
  value       Float
  updatedAt   DateTime       @updatedAt()
  isDeleted   Boolean        @default(false)

  @@id([typeId, attributeId])
  @@index([typeId])
  @@index([attributeId])
}

model TypeEffect {
  type      Type        @relation(fields: [typeId], references: [typeId])
  typeId    Int
  effect    DogmaEffect @relation(fields: [effectId], references: [effectId])
  effectId  Int
  isDefault Boolean
  updatedAt DateTime    @updatedAt()
  isDeleted Boolean     @default(false)

  @@id([typeId, effectId])
  @@index([typeId])
  @@index([effectId])
}

model Graphic {
  graphicId Int    @id
  types     Type[]
}

model DogmaAttribute {
  attributeId            Int                   @id
  defaultValue           Float?
  description            String?               @db.Text
  displayName            String?
  highIsGood             Boolean?
  iconId                 Int?
  name                   String?
  published              Boolean?
  stackable              Boolean?
  unitId                 Int?
  Icon                   Icon?                 @relation(fields: [iconId], references: [iconId])
  DogmaUnit              DogmaUnit?            @relation(fields: [unitId], references: [unitId])
  updatedAt              DateTime              @updatedAt()
  isDeleted              Boolean               @default(false)
  TypeAttributes         TypeAttribute[]
  DischargeAttribute     DogmaEffect[]         @relation("DischargeAttribute")
  DurationAttribute      DogmaEffect[]         @relation("DurationAttribute")
  FalloffAttribute       DogmaEffect[]         @relation("FalloffAttribute")
  RangeAttribute         DogmaEffect[]         @relation("RangeAttribute")
  TrackingSpeedAttribute DogmaEffect[]         @relation("TrackingSpeedAttribute")
  DogmaEffectsModified   DogmaEffectModifier[] @relation("DogmaEffectsModified")
  DogmaEffectsModifying  DogmaEffectModifier[] @relation("DogmaEffectsModifying")

  @@index([unitId])
  @@index([iconId])
}

model DogmaEffectCategory {
  effectCategoryId Int           @id
  effects          DogmaEffect[]
}

model DogmaEffect {
  effectId                 Int                  @id
  description              String?              @db.Text
  disallowAutoRepeat       Boolean?
  dischargeAttribute       DogmaAttribute?      @relation("DischargeAttribute", fields: [dischargeAttributeId], references: [attributeId])
  dischargeAttributeId     Int?
  displayName              String?
  durationAttribute        DogmaAttribute?      @relation("DurationAttribute", fields: [durationAttributeId], references: [attributeId])
  durationAttributeId      Int?
  effectCategory           DogmaEffectCategory? @relation(fields: [effectCategoryId], references: [effectCategoryId])
  effectCategoryId         Int?
  electronicChance         Boolean?
  falloffAttribute         DogmaAttribute?      @relation("FalloffAttribute", fields: [falloffAttributeId], references: [attributeId])
  falloffAttributeId       Int?
  Icon                     Icon?                @relation(fields: [iconId], references: [iconId])
  iconId                   Int?
  isAssistance             Boolean?
  isOffensive              Boolean?
  isWarpSafe               Boolean?
  // TODO MODIFIERS
  name                     String?
  postExpression           Int?
  preExpression            Int?
  published                Boolean?
  rangeAttribute           DogmaAttribute?      @relation("RangeAttribute", fields: [rangeAttributeId], references: [attributeId])
  rangeAttributeId         Int?
  rangeChance              Boolean?
  trackingSpeedAttribute   DogmaAttribute?      @relation("TrackingSpeedAttribute", fields: [trackingSpeedAttributeId], references: [attributeId])
  trackingSpeedAttributeId Int?

  types                Type[]
  updatedAt            DateTime              @updatedAt()
  isDeleted            Boolean               @default(false)
  DogmaEffectModifiers DogmaEffectModifier[] @relation("DogmaEffectModifiers")
  ModifiedDogmaEffect  DogmaEffectModifier[] @relation("ModifiedDogmaEffect")
  TypeEffect           TypeEffect[]

  @@index([dischargeAttributeId])
  @@index([durationAttributeId])
  @@index([effectCategoryId])
  @@index([falloffAttributeId])
  @@index([iconId])
  @@index([rangeAttributeId])
  @@index([trackingSpeedAttributeId])
}

model DogmaEffectModifier {
  effect               DogmaEffect     @relation("DogmaEffectModifiers", fields: [effectId], references: [effectId])
  effectId             Int
  domain               String?
  targetEffect         DogmaEffect?    @relation("ModifiedDogmaEffect", fields: [targetEffectId], references: [effectId])
  targetEffectId       Int?
  func                 String
  modifiedAttribute    DogmaAttribute? @relation("DogmaEffectsModified", fields: [modifiedAttributeId], references: [attributeId])
  modifiedAttributeId  Int?
  modifyingAttribute   DogmaAttribute? @relation("DogmaEffectsModifying", fields: [modifyingAttributeId], references: [attributeId])
  modifyingAttributeId Int?
  operator             Int?

  @@id([effectId])
  @@index([effectId])
  @@index([targetEffectId])
  @@index([modifiedAttributeId])
  @@index([modifyingAttributeId])
}

model DogmaUnit {
  unitId      Int              @id
  displayName String
  description String           @db.Text
  attributes  DogmaAttribute[]
  updatedAt   DateTime         @updatedAt()
  isDeleted   Boolean          @default(false)
}

model Icon {
  iconId      Int              @id
  description String           @db.Text
  iconFile    String
  updatedAt   DateTime         @updatedAt()
  isDeleted   Boolean          @default(false)
  attributes  DogmaAttribute[]
  types       Type[]
  effects     DogmaEffect[]
  ancestries  Ancestry[]       @relation("AncestryIcon")
}

model Alliance {
  allianceId            Int          @id
  creatorCorporation    Corporation  @relation("AllianceCreator", fields: [creatorCorporationId], references: [corporationId])
  creatorCorporationId  Int
  dateFounded           DateTime
  executorCorporation   Corporation? @relation("AllianceExecutor", fields: [executorCorporationId], references: [corporationId])
  executorCorporationId Int?         @unique
  faction               Faction?     @relation(fields: [factionId], references: [factionId])
  factionId             Int?
  name                  String
  ticker                String
  updatedAt             DateTime     @updatedAt()
  isDeleted             Boolean      @default(false)

  memberCorporations Corporation[] @relation("CorporationAlliance")

  @@index([creatorCorporationId])
  @@index([factionId])
}

// TODO
model Faction {
  factionId            Int           @id
  name                 String
  description          String        @db.Text
  isUnique             Boolean
  militiaCorporation   Corporation?  @relation("FactionMilitiaCorporation", fields: [militiaCorporationId], references: [corporationId], onUpdate: NoAction, onDelete: NoAction)
  militiaCorporationId Int?
  alliances            Alliance[]
  corporations         Corporation[] @relation("CorporationFaction")
  factionCorporation   Corporation?  @relation("FactionCorporation", fields: [corporationId], references: [corporationId], onUpdate: NoAction, onDelete: NoAction)
  corporationId        Int?
  sizeFactor           Float
  solarSystem          SolarSystem?  @relation("FactionSolarSystem", fields: [solarSystemId], references: [solarSystemId])
  solarSystemId        Int?
  // do we need to store this?
  stationCount         Int
  // do we need to store this?
  stationSystemCount   Int
  updatedAt            DateTime      @updatedAt()
  isDeleted            Boolean       @default(false)
  Character            Character[]   @relation("CharacterFaction")
  races                Race[]        @relation("RaceFaction")

  @@index([corporationId])
  @@index([militiaCorporationId])
  @@index([solarSystemId])
}

model Corporation {
  corporationId Int        @id
  alliance      Alliance?  @relation("CorporationAlliance", fields: [allianceId], references: [allianceId], onUpdate: NoAction, onDelete: NoAction)
  allianceId    Int?
  ceo           Character? @relation("corporationCeo", fields: [ceoId], references: [characterId], onUpdate: NoAction, onDelete: NoAction)
  ceoId         Int?
  creator       Character? @relation("corporationCreator", fields: [creatorId], references: [characterId], onUpdate: NoAction, onDelete: NoAction)
  creatorId     Int?
  dateFounded   DateTime?
  description   String?    @db.Text
  faction       Faction?   @relation("CorporationFaction", fields: [factionId], references: [factionId])
  factionId     Int?
  homeStation   Station?   @relation("CorporationHomeStation", fields: [homeStationId], references: [stationId], onDelete: NoAction, onUpdate: NoAction)
  homeStationId Int?
  memberCount   Int
  name          String
  shares        BigInt?
  taxRate       Float
  ticker        String
  url           String?    @db.Text
  warEligible   Boolean?

  updatedAt DateTime @updatedAt()
  isDeleted Boolean  @default(false)

  executorAlliance    Alliance?   @relation("AllianceExecutor")
  createdAlliances    Alliance[]  @relation("AllianceCreator")
  ownedStations       Station[]   @relation("StationOwner")
  bloodlines          Bloodline[] @relation("BloodlineCorporation")
  CorporationFactions Faction[]   @relation("FactionCorporation")
  MilitiaFaction      Faction[]   @relation("FactionMilitiaCorporation")
  Character           Character[] @relation("CharacterCorporation")

  @@index([creatorId])
  @@index([factionId])
  @@index([homeStationId])
  @@index([allianceId])
  @@index([ceoId])
}

model Station {
  stationId                Int              @id
  name                     String
  corporationHomeStations  Corporation[]    @relation("CorporationHomeStation")
  solarSystem              SolarSystem      @relation(fields: [solarSystemId], references: [solarSystemId])
  solarSystemId            Int
  stationType              Type             @relation(fields: [typeId], references: [typeId])
  typeId                   Int
  maxDockableShipVolume    Float
  officeRentalCost         Float
  owner                    Corporation?     @relation("StationOwner", fields: [ownerId], references: [corporationId])
  ownerId                  Int?
  // TODO add XYZ Position field
  race                     Race?            @relation("RaceStations", fields: [raceId], references: [raceId])
  raceId                   Int?
  reprocessingEfficiency   Float
  reprocessingStationsTake Float
  stationServices          StationService[]
  updatedAt                DateTime         @updatedAt()
  isDeleted                Boolean          @default(false)

  @@index([solarSystemId])
  @@index([typeId])
  @@index([ownerId])
  @@index([raceId])
}

model StationService {
  stationServiceId Int       @id
  name             String
  stations         Station[]
}

model Race {
  raceId      Int         @id
  name        String
  description String      @db.Text
  faction     Faction?    @relation("RaceFaction", fields: [factionId], references: [factionId])
  factionId   Int?
  updatedAt   DateTime    @updatedAt()
  isDeleted   Boolean     @default(false)
  stations    Station[]   @relation("RaceStations")
  bloodlines  Bloodline[] @relation("BloodlineRace")
  characters  Character[] @relation("CharacterRace")

  @@index([factionId])
}

// done:
// alliance
model Region {
  regionId       Int             @id
  name           String
  description    String?         @db.Text
  updatedAt      DateTime        @updatedAt()
  isDeleted      Boolean         @default(false)
  constellations Constellation[]
}

// TODO: Add missing "position" field
model Constellation {
  constellationId Int           @id
  name            String
  regionId        Int
  region          Region?       @relation(fields: [regionId], references: [regionId])
  solarSystems    SolarSystem[]
  updatedAt       DateTime      @updatedAt()
  isDeleted       Boolean       @default(false)

  @@index([regionId])
}

// TODO add position,
model SolarSystem {
  solarSystemId       Int           @id
  name                String
  stations            Station[]
  constellation       Constellation @relation(fields: [constellationId], references: [constellationId])
  constellationId     Int
  securityClass       String?
  securityStatus      Decimal
  star                Star?         @relation("SolarSystemStar")
  starId              Int?
  stargates           Stargate[]    @relation("SolarSystemStargate")
  updatedAt           DateTime      @updatedAt()
  isDeleted           Boolean       @default(false)
  solarSystemFactions Faction[]     @relation("FactionSolarSystem")
  Planet              Planet[]      @relation("PlanetSolarSystem")

  @@index([constellationId])
}

model Star {
  starId        Int         @id
  name          String
  solarSystem   SolarSystem @relation("SolarSystemStar", fields: [solarSystemId], references: [solarSystemId])
  solarSystemId Int         @unique
  updatedAt     DateTime    @updatedAt()
  isDeleted     Boolean     @default(false)
}

// TODO: Add missing "position" field
model Stargate {
  stargateId            Int         @id
  name                  String
  solarSystem           SolarSystem @relation("SolarSystemStargate", fields: [solarSystemId], references: [solarSystemId])
  solarSystemId         Int
  DestinationStargate   Stargate    @relation("StargateDestination", fields: [destinationStargateId], references: [stargateId], onDelete: NoAction, onUpdate: NoAction)
  destinationStargateId Int         @unique
  updatedAt             DateTime    @updatedAt()
  isDeleted             Boolean     @default(false)
  IncomingStargates     Stargate[]  @relation("StargateDestination")

  @@index([solarSystemId])
}

// TODO: Add missing "position" field
model Planet {
  planetId      Int            @id
  name          String
  solarSystem   SolarSystem    @relation("PlanetSolarSystem", fields: [solarSystemId], references: [solarSystemId])
  solarSystemId Int
  type          Type           @relation("PlanetType", fields: [typeId], references: [typeId])
  typeId        Int
  updatedAt     DateTime       @updatedAt()
  isDeleted     Boolean        @default(false)
  moons         Moon[]         @relation("PlanetMoons")
  asteroidBelts AsteroidBelt[] @relation("PlanetAsteroidBelts")

  @@index([solarSystemId])
  @@index([typeId])
}

// TODO: Add missing "position" field
model Moon {
  moonId    Int      @id
  name      String
  planet    Planet   @relation("PlanetMoons", fields: [planetId], references: [planetId])
  planetId  Int
  updatedAt DateTime @updatedAt()
  isDeleted Boolean  @default(false)

  @@index([planetId])
}

// TODO: Add missing "position" field
model AsteroidBelt {
  asteroidBeltId Int      @id
  name           String
  planet         Planet   @relation("PlanetAsteroidBelts", fields: [planetId], references: [planetId])
  planetId       Int
  updatedAt      DateTime @updatedAt()
  isDeleted      Boolean  @default(false)

  @@index([planetId])
}

model Ancestry {
  ancestryId       Int       @id
  name             String
  shortDescription String?   @db.Text
  description      String    @db.Text
  icon             Icon?     @relation("AncestryIcon", fields: [iconId], references: [iconId])
  iconId           Int?
  bloodline        Bloodline @relation("AncestryBloodline", fields: [bloodlineId], references: [bloodlineId])
  bloodlineId      Int
  updatedAt        DateTime  @updatedAt()
  isDeleted        Boolean   @default(false)

  @@index([iconId])
  @@index([bloodlineId])
}

model Bloodline {
  bloodlineId   Int         @id
  corporation   Corporation @relation("BloodlineCorporation", fields: [corporationId], references: [corporationId])
  corporationId Int
  name          String
  description   String      @db.Text
  shipType      Type?       @relation("BloodlineShipType", fields: [shipTypeId], references: [typeId])
  shipTypeId    Int?
  race          Race        @relation("BloodlineRace", fields: [raceId], references: [raceId])
  raceId        Int
  charisma      Int
  intelligence  Int
  memory        Int
  perception    Int
  willpower     Int
  Character     Character[] @relation("CharacterBloodline")
  ancestries    Ancestry[]  @relation("AncestryBloodline")
  updatedAt     DateTime    @updatedAt()
  isDeleted     Boolean     @default(false)

  @@index([corporationId])
  @@index([shipTypeId])
  @@index([raceId])
}
